#ifndef ERROR_H
#define ERROR_H
#include "type.h"
#include "log.h"

ENUM_DEFINE(ErrCode,
SUCCESS,
ERR_COL_DESC,
ROW_ID_NOT_FOUND,
ERR_COL_INDEX,
ERR_ROW_DESC,
ROW_DATA_TOO_LONG,
NO_MORE_PAGE_FREE_SPACE,
NO_MORE_ROWS,
TABLE_FILE_NOT_EXISTS,
UNKNOWN_PAGE_OFFSET,
BAD_PAGE_IN_FILE,
WRITE_PAGE_ERROR,
END_OF_TABLE_SPACE,
ROW_ID_DELETED,
EMPTY_TABLE_SPACE,
WRONG_CALC_FOR_OP,
INVALID_OBJECT,
OPERATION_NOT_SUPPORT,
DEVISOR_IS_ZERO,
ROW_NOT_FOUND,
ERROR_OPERATION_IN_EUQAL_JOIN_CONDITION,
ERR_EXPR_TYPE,
ERR_BUCKET_IDX,
UNKNOWN_AGG_FUNC,
UNKNOWN_WIN_FUNC,
EXPR_CALC_ERR,
ERROR_LEX_STMT,
ERROR_COLUMN_VALUE,
PLAN_NOT_BUILD,
COLUMN_NOT_EXISTS,
TABLE_NOT_EXISTS,
VIEW_NOT_EXISTS,
TABLE_REDEFINE,
JOIN_TABLES_NOT_EXISTS,
NOT_UNIQUE_TABLE,
NO_TABLE_FOR_SELECT,
HAVING_ERROR,
HAVE_ALL_COLUMN_STMT,
ERROR_INDEX,
SYSTEM_SCHEMA_ERROR,
DATABASE_EXISTS,
DATABASE_NOT_EXISTS,
TABLE_EXISTS,
VIEW_EXISTS,
SUBQUERY_RESULT_MUST_BE_ONE_COLUMN,
SUBQUERY_RESULT_MUST_BE_ONE_ROW,
END_OF_BUCKETS,
SET_ROW_DESC_ERROR,
CAN_NOT_ANALYZE_SYSTEM,
CAST_DATA_ERROR,
CAN_NOT_REWRITE,
UNKNOWN_PAGE_BUFFER,
SIZE_OVERFLOW,
OBJ_TYPE_ERROR,
ERR_UNEXPECTED,
INVALID_ARGUMENT,
INVALID_CMD_TYPE,
IS_ALL_COLUMN_STMT,
MARK_ROW,
NO_MORE_MEMORY,
MORE_THAN_ONE_ROW,
QB_NAME_EXISTS,
QUERY_KILLED,
INVALID_CAST,
INVALID_NUMBER,
INVALID_DATETIME,
EMPTY_ORDER_BY,
MAX_ERROR_CODE);

#define SUCC(code)   ((ret=code) == SUCCESS)
#define FAIL(code)   ((ret=code) != SUCCESS)
#define CHECK(function) ret=function; \
                        if (FAIL(ret)) { \
                            if (NO_MORE_ROWS != ret && ROW_NOT_FOUND != ret) \
                            LOG_ERR("catch error code", K(ret));\
                            return ret;\
                        }

bool is_false();

template<typename T, typename ...ARGS>
bool is_false(const T &value, ARGS... args)
{
    return !value || is_false(args...);
}

#define MY_ASSERT(...) do { if (is_false(__VA_ARGS__)) { \
                            ret = ERR_UNEXPECTED;\
                            LOG_ERR("param check failed", K(ret));\
                            return ret;\
                        } } while(0);

#endif	//ERROR_H