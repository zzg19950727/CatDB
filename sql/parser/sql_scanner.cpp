#line 2 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#line 4 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CatDB_FlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *CatDB_alloc (yy_size_t  );
void *CatDB_realloc (void *,yy_size_t  );
void CatDB_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int SqlScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 193
#define YY_END_OF_BUFFER 194
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[686] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      194,  193,  192,  193,  165,  174,    1,    2,    8,    6,
        3,    7,    4,    9,  159,    5,   13,   16,   17,  193,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  183,  182,  175,  193,  191,  193,
      184,  173,  166,  193,  163,  163,  192,   12,   11,  159,
      162,  159,  159,    0,   14,   15,   18,  161,  160,  160,
      160,   22,  160,  160,  160,  160,   30,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,   69,   71,   81,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      107,  108,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      182,  181,  179,  180,  176,  178,  177,  191,  190,  188,
      189,  185,  187,  186,  173,  172,  170,  171,  167,  169,
      168,  164,    0,   10,    0,    0,  159,  161,   19,   20,
       21,   23,   24,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,   38,  160,   43,  160,  160,  160,

      160,  160,  160,  160,  160,  160,   54,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,   76,  160,  160,  160,  160,  160,
      160,  160,   89,  160,  160,  160,   93,  160,  103,  160,
      160,  160,  160,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  127,  160,  160,  160,
      160,  160,  160,  160,  136,  160,  160,  160,  160,  160,
      160,  160,  160,  148,  160,  160,  160,  160,  160,  160,
        0,  159,    0,  159,  160,  160,  160,  160,   29,   31,
       32,   33,  160,  160,  160,  160,   41,  160,  160,  160,

       47,  160,  160,   51,   52,   53,  160,  160,  160,   58,
      160,  160,  160,  160,  160,   64,   65,  160,  160,  160,
      160,  160,  160,  160,  160,  160,   80,   82,   83,  160,
       85,   86,  160,   88,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  160,  104,  160,  160,  160,  160,  112,
      160,  160,  160,  160,  118,  119,  160,  160,  160,  160,
      160,  160,  160,  128,  160,  130,  160,  160,  160,  160,
      160,  139,  140,  160,  160,  160,  160,  160,  160,  160,
      160,  160,  160,  154,  155,  160,  160,  158,  160,  160,
      160,  160,  160,   36,  160,  160,  160,  160,  160,  160,

      160,  160,  160,  160,  160,  160,  160,  160,  160,   62,
       63,  160,   67,  160,  160,   72,  160,   74,  160,  160,
      160,  160,   87,  160,  160,   92,   94,  160,  160,  160,
      160,  160,  160,  160,  160,  160,  109,  111,  160,  160,
      160,  160,  160,  160,  122,  124,  160,  160,  160,  160,
      160,  132,  160,  160,  160,  137,  160,  160,  160,  160,
      145,  160,  160,  160,  160,  160,  160,  160,  156,  160,
      160,  160,   27,   28,   34,   37,  160,  160,  160,   45,
      160,  160,  160,   50,  160,   56,   57,   59,  160,  160,
      160,   68,   70,   73,   75,  160,  160,  160,  160,  160,

       91,  160,  160,  160,  160,  160,  160,  160,  105,  160,
      160,  160,  160,  160,  160,  160,  160,  121,  160,  125,
      126,  160,  160,  133,  134,  135,  138,  160,  160,  160,
      160,  146,  147,  160,  150,  151,  160,  160,  160,  160,
       26,   35,  160,  160,   44,  160,  160,  160,  160,   60,
      160,  160,   77,  160,  160,   84,  160,  160,  160,  160,
      160,  160,  160,  160,  106,  110,  113,  160,  160,  160,
      160,  120,  160,  160,  160,  160,  142,  143,  160,  160,
      160,  153,  160,  160,   39,   42,  160,   48,   49,  160,
      160,   66,  160,   79,  160,  160,   96,  160,  160,  160,

      160,  160,  160,  114,  160,  160,  160,  160,  160,  131,
      160,  160,  149,  160,  160,  160,   40,  160,  160,  160,
       78,   90,  160,  160,  160,   99,  160,  101,  160,  115,
      116,  160,  160,  160,  141,  144,  152,  157,  160,   46,
      160,  160,  160,   97,  160,  160,  160,  160,  123,  160,
      160,  160,  160,  160,  160,  100,  160,  117,  129,  160,
      160,  160,  160,  160,  102,  160,  160,  160,  160,  160,
      160,  160,   61,  160,   98,  160,  160,  160,  160,   55,
      160,  160,   95,   25,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,   16,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,    1,   48,   49,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    2,    6,    7,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static yyconst flex_int16_t yy_base[699] =
    {   0,
        0,    0,   73,   74,   75,   78,   79,   82, 1278, 1277,
     1281, 1379,   86, 1261, 1379, 1379, 1379, 1379, 1263, 1379,
     1379, 1379,  610,  611,   77, 1379,   75, 1379,  377,    0,
       67,   78,  112,  160,  105,  116,   45,   65,  158,   70,
       85,  136,  182,  118,  174,  120,    0,  204,  248,  214,
      217,  146,  237,   92, 1379,    0, 1379,  253,    0,  281,
     1379,    0, 1379,  301, 1379,  378,   93, 1379, 1379,  148,
      351,  184,  242,   85, 1379, 1379, 1379,    0,    0,  132,
      285,  148,  164,  243,  297,  170,    0,  294,  198,  293,
      198,  189,  297,  335,  222,  222,  265,  290,  275,  322,

      354,  303,  312,  316,  350,  330,  330,  339,  365,    0,
      352,  353,  367,  390,  342,  392,  363,  366,  387,  399,
        0,  383,  369,  412,  417,  404,  407,  422,  415,  401,
      413,  417,  412,  418,  427,  431,  444,  452,  445,  454,
      448,  297,  454,  465,  465,  463,  472,  473,  465,  479,
        0, 1379, 1379, 1379, 1379, 1379, 1379,    0, 1379, 1379,
     1379, 1379, 1379, 1379,    0, 1379, 1379, 1379, 1379, 1379,
     1379, 1379,   96, 1379,  104,  286,  282,    0,    0,    0,
        0,    0,    0,  473,  461,  476,  485,  475,  477,  488,
      477,  475,  486,  500,    0,  516,    0,  493,  498,  486,

      509,  499,  518,  507,  514,  522,  238,  519,  528,  532,
      517,  525,  526,  538,  527,  530,  541,  524,  538,  530,
      548,  545,  553,  554,  555,  547,  551,  571,  557,  573,
      570,  576,    0,  575,  570,  579,    0,  571,    0,  616,
      581,  592,  590,  591,  580,  590,  608,  599,  592,  599,
      600,  595,  609,  624,  602,  614,    0,  613,  626,  638,
      632,  640,  631,  634,    0,  642,  641,  651,  634,  667,
      645,  656,  666,  226,  648,  672,  653,  673,  211,  659,
      235,  232,  213,  207,  665,  681,  678,  675,    0,    0,
        0,    0,  681,  675,  677,  698,  681,  689,  687,  704,

      693,  703,  701,    0,    0,    0,  699,  703,  702,    0,
      699,  724,  158,  723,  708,    0,    0,  712,  717,  720,
      723,  713,  727,  726,  727,  742,    0,    0,    0,  741,
        0,    0,  731,    0,  731,  735,  750,  750,  735,  760,
      762,  760,  756,  762,    0,  767,  758,  759,  765,    0,
      784,  774,  781,  786,    0,    0,  791,  775,  775,  793,
      788,  791,  804,    0,  796,    0,  797,  790,  802,  793,
      811,    0,  798,  809,  817,  806,  814,  810,  810,  827,
      828,  825,  835,    0,    0,  839,  835,    0,  124,  844,
      830,  826,  839,    0,  850,  859,  852,  864,  861,  112,

      858,  854,  864,  850,  869,  855,  857,  872,  869,    0,
        0,  876,    0,  879,  875,    0,  883,    0,  871,  887,
      880,  879,    0,  888,  881,    0,    0,  891,  890,  886,
      898,  899,  913,  905,  905,  915,  920,    0,  919,  915,
      909,  930,  929,  919,    0,    0,  918,  936,  923,  935,
      936,    0,  927,  931,  933,  938,  939,  946,  963,  952,
        0,  946,  962,  968,  959,  957,  963,  980,    0,  981,
      968,  970,    0,    0,  966,    0,  968,  977,  979,    0,
      974,  995,  996,    0,  981,    0,    0,    0,  988,  988,
      989,    0,    0,    0,    0,  989, 1003, 1008, 1008, 1008,

        0, 1000, 1015, 1005, 1008, 1020,  108,  107,    0, 1024,
     1025, 1029, 1030, 1030, 1019, 1022, 1037,    0, 1030,    0,
        0, 1039, 1034,    0,    0,    0,    0, 1048, 1030, 1037,
     1055,    0,    0, 1040,    0,    0, 1059, 1043, 1055, 1044,
        0,    0, 1061, 1062,    0, 1072, 1070, 1056, 1068,    0,
     1063, 1068,    0, 1080, 1073,    0, 1073,   96, 1087, 1084,
     1085, 1079, 1092, 1086,    0,    0,    0, 1089, 1088, 1089,
     1096,    0, 1111, 1090, 1097, 1105,    0,    0, 1114, 1112,
     1105,    0, 1115, 1105, 1112,    0, 1119,    0,    0, 1125,
     1125,    0, 1119,    0, 1120, 1127,    0, 1123, 1136, 1130,

     1150, 1143, 1155,    0, 1143, 1153, 1150, 1156,   70,    0,
     1148, 1147,    0, 1141, 1168, 1161,    0, 1164, 1162, 1176,
        0,    0, 1163, 1176, 1176,    0, 1164,    0, 1182,    0,
        0, 1172, 1174, 1177,    0,    0,    0,    0, 1188,    0,
     1193, 1187, 1183,    0, 1178, 1200, 1200, 1193,    0, 1197,
     1201,   62, 1207, 1204,   56,    0, 1216,    0,    0, 1217,
     1219, 1198, 1228, 1212,    0,   50, 1232, 1229, 1223, 1219,
     1235, 1220,    0, 1232,    0, 1246, 1248, 1224, 1234,    0,
     1250, 1255,    0,    0, 1379, 1305, 1312, 1319, 1326,   85,
     1329, 1335, 1342, 1349, 1355, 1362, 1369, 1372

    } ;

static yyconst flex_int16_t yy_def[699] =
    {   0,
      685,    1,  686,  686,  687,  687,  688,  688,  689,  689,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  690,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  685,  692,  685,  693,  694,  695,
      685,  696,  685,  697,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  698,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      692,  685,  685,  685,  685,  685,  685,  694,  685,  685,
      685,  685,  685,  685,  696,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  698,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      685,  685,  685,  685,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,

      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,  691,  691,  691,  691,  691,  691,
      691,  691,  691,  691,    0,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685

    } ;

static yyconst flex_int16_t yy_nxt[1455] =
    {   0,
       12,   13,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   47,   54,   47,   12,   47,   55,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   47,   54,   47,   12,   12,   12,   57,   57,
       12,   12,  106,   63,   12,  107,   63,   67,   67,   72,
       78,   73,   75,   76,   67,   67,  176,  671,   80,  177,

       81,   74,   84,  664,  111,   82,   85,  281,   83,  661,
      282,  106,   86,  112,  107,  283,  150,  634,  284,   58,
       58,   60,   87,   61,   60,   64,   61,   80,   64,   81,
       74,   84,   88,  111,   82,   85,   99,   83,  100,   89,
      125,   86,  112,  596,  102,  150,   90,  103,  101,   91,
       92,   87,  119,  104,  564,  563,  105,  126,  120,  481,
      113,   88,   70,  179,  114,   99,  146,  100,   89,  125,
      182,  471,  173,  102,  147,   90,  103,  101,   91,   92,
       93,  119,  104,  108,   94,  105,  126,  120,   95,  113,
      183,  109,  179,  114,   96,  146,  110,   97,   70,  182,

       98,  173,  115,  147,  188,  409,  116,  121,  175,   93,
      117,  122,  108,   94,  123,  124,  118,   95,  191,  183,
      109,  284,  194,   96,  127,  110,   97,  284,  128,   98,
      195,  115,  129,  188,  139,  116,  121,  175,  130,  117,
      122,  140,  141,  123,  124,  118,  282,  191,  142,  282,
      143,  194,  144,  127,   72,  145,   73,  128,  387,  195,
      202,  129,  203,  139,  148,  149,   74,  130,  131,  184,
      140,  141,  132,  380,  153,  133,  134,  142,  154,  143,
      135,  144,  185,  136,  145,  307,  155,  137,  138,  202,
      156,  203,  157,  148,  149,   74,  177,  131,  184,  204,

      177,  132,  160,  153,  133,  134,  161,  154,  180,  135,
      205,  185,  136,  206,  162,  155,  137,  138,  163,  156,
      164,  157,  167,  186,  192,  189,  168,  213,  204,  181,
      187,  160,  190,  193,  169,  161,  196,  180,  170,  205,
      171,  197,  206,  162,  270,  207,  214,  163,  208,  164,
      215,  167,  186,  192,  189,  168,  213,  198,  181,  187,
      174,  190,  193,  169,  218,  196,  199,  170,  200,  171,
      197,  219,  220,  201,  207,  214,  209,  208,  210,  215,
      226,  216,  211,  217,  227,  233,  198,  228,  221,  212,
      222,  172,  229,  218,   77,  199,  237,  200,  223,  238,

      219,  220,  201,  224,  225,  209,  243,  210,  244,  226,
      216,  211,  217,  227,  233,  234,  228,  221,  212,  222,
      230,  229,  231,  232,  235,  237,  239,  223,  238,  236,
      241,  242,  224,  225,  240,  243,  245,  244,  248,  246,
      249,  253,  250,  254,  234,  255,  258,  261,  256,  230,
      259,  231,  232,  235,  247,  239,  257,  251,  236,  241,
      242,  252,  262,  260,  263,  245,  266,  248,  246,  249,
      253,  250,  254,  264,  255,  258,  261,  256,  267,  259,
      268,  269,  271,  247,  265,  257,  251,  272,  273,  274,
      252,  262,  260,  263,  275,  266,  277,  278,  279,  280,

      276,  285,  264,  286,  287,  288,  289,  267,  290,  268,
      269,  271,  291,  265,  292,  293,  272,  273,  274,  294,
      295,  298,  299,  275,  300,  277,  278,  279,  280,  276,
      285,  301,  286,  287,  288,  289,  296,  290,  302,  303,
      297,  291,  304,  292,  293,  305,  306,  308,  294,  295,
      298,  299,  309,  300,  310,  311,  312,  314,  315,  316,
      301,  317,  313,  318,  319,  296,  320,  302,  303,  297,
      321,  304,  322,  323,  305,  306,  308,  324,  325,  326,
      328,  309,  329,  310,  311,  312,  314,  315,  316,  327,
      317,  313,  318,  319,  330,  320,  331,  332,  333,  321,

      334,  322,  323,  335,  336,  337,  324,  325,  326,  328,
      338,  329,  345,  346,  348,  349,  347,  350,  327,   71,
      351,  354,  355,  330,   70,  331,  332,  333,  352,  334,
      356,  357,  335,  336,  337,  358,  359,  362,  363,  338,
      339,  345,  346,  348,  349,  347,  350,  353,  340,  351,
      354,  355,  360,  341,  342,  364,  343,  352,  344,  356,
      357,  365,  366,  367,  358,  359,  362,  363,  368,  339,
      369,  361,  370,  371,  372,  373,  353,  340,  374,  377,
      378,  360,  341,  342,  364,  343,  379,  344,  381,  375,
      365,  366,  367,  382,  383,  384,  388,  368,  389,  369,

      376,  370,  371,  372,  373,  390,  385,  374,  377,  378,
      386,  391,  392,  393,  394,  379,  395,  381,  375,  396,
      397,  398,  382,  383,  384,  388,  399,  389,  400,  376,
      401,  402,  403,  404,  390,  385,  405,  406,  407,  386,
      391,  392,  393,  394,  408,  395,  410,  411,  396,  397,
      398,  412,  413,  414,  415,  399,  416,  400,  417,  401,
      402,  403,  404,  418,  419,  405,  406,  407,  420,  422,
      423,  424,  425,  408,  426,  410,  411,  427,  428,  421,
      412,  413,  414,  415,  429,  416,  430,  417,  431,  432,
      434,  435,  418,  419,  433,  436,  437,  420,  422,  423,

      424,  425,  438,  426,  439,  440,  427,  428,  421,  441,
      442,  443,  444,  429,  445,  430,  446,  431,  432,  434,
      435,  447,  448,  433,  436,  437,  449,  450,  451,  452,
      453,  438,  455,  439,  440,  456,  457,  458,  441,  442,
      443,  444,  454,  445,  459,  446,  460,  461,  462,  463,
      447,  448,  466,  467,  464,  449,  450,  451,  452,  453,
      465,  455,  468,  469,  456,  457,  458,  470,  472,  473,
      474,  454,  475,  459,  476,  460,  461,  462,  463,  477,
      478,  466,  467,  464,  479,  480,  482,  483,  484,  465,
      485,  468,  469,  486,  487,  488,  470,  472,  473,  474,

      489,  475,  490,  476,  491,  492,  493,  494,  477,  478,
      495,  496,  499,  479,  480,  482,  483,  484,  497,  485,
      500,  498,  486,  487,  488,  501,  502,  503,  504,  489,
      505,  490,  506,  491,  492,  493,  494,  507,  508,  495,
      496,  499,  509,  510,  511,  512,  513,  497,  514,  500,
      498,  517,  518,  515,  501,  502,  503,  504,  519,  505,
      520,  506,  521,  522,  523,  524,  507,  508,  516,  525,
      526,  509,  510,  511,  512,  513,  527,  514,  528,  529,
      517,  518,  515,  530,  531,  532,  533,  519,  534,  520,
      535,  521,  522,  523,  524,  536,  537,  516,  525,  526,

      538,  539,  540,  541,  542,  527,  543,  528,  529,  544,
      545,  546,  530,  531,  532,  533,  547,  534,  548,  535,
      549,  550,  551,  552,  536,  537,  553,  554,  555,  538,
      539,  540,  541,  542,  556,  543,  557,  558,  544,  545,
      546,  559,  560,  561,  562,  547,  565,  548,  566,  549,
      550,  551,  552,  567,  568,  553,  554,  555,  569,  570,
      571,  572,  573,  556,  574,  557,  558,  575,  576,  577,
      559,  560,  561,  562,  578,  565,  579,  566,  580,  581,
      582,  583,  567,  568,  584,  585,  586,  569,  570,  571,
      572,  573,  587,  574,  588,  589,  575,  576,  577,  590,

      591,  592,  593,  578,  594,  579,  595,  580,  581,  582,
      583,  597,  598,  584,  585,  586,  599,  600,  603,  601,
      604,  587,  605,  588,  589,  602,  606,  607,  590,  591,
      592,  593,  608,  594,  609,  595,  610,  611,  612,  613,
      597,  598,  614,  615,  616,  599,  600,  603,  601,  604,
      617,  605,  618,  619,  602,  606,  607,  620,  621,  622,
      623,  608,  624,  609,  625,  610,  611,  612,  613,  626,
      627,  614,  615,  616,  628,  629,  630,  631,  632,  617,
      633,  618,  619,  635,  636,  637,  620,  621,  622,  623,
      638,  624,  639,  625,  640,  641,  642,  643,  626,  627,

      644,  645,  646,  628,  629,  630,  631,  632,  647,  633,
      648,  649,  635,  636,  637,  650,  651,  652,  653,  638,
      654,  639,  655,  640,  641,  642,  643,  656,  657,  644,
      645,  646,  658,  659,  660,  662,  663,  647,  665,  648,
      649,  666,  667,  668,  650,  651,  652,  653,  669,  654,
      670,  655,  672,  673,  674,  675,  656,  657,  676,  677,
      678,  658,  659,  660,  662,  663,  679,  665,  680,  681,
      666,  667,  668,  682,  683,  684,   69,  669,   68,  670,
      685,  672,  673,  674,  675,   66,   66,  676,  677,  678,
      685,  685,  685,  685,  685,  679,  685,  680,  681,  685,

      685,  685,  682,  683,  684,   56,   56,   56,   56,   56,
       56,   56,   59,   59,   59,   59,   59,   59,   59,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,
       65,   65,   65,   79,   79,  151,  685,  151,  685,  151,
      151,  151,  152,  152,  152,  152,  152,  152,  152,  158,
      685,  158,  158,  158,  158,  159,  159,  159,  159,  159,
      159,  159,  165,  685,  685,  165,  165,  165,  165,  166,
      166,  166,  166,  166,  166,  166,  178,  178,   11,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685
    } ;

static yyconst flex_int16_t yy_chk[1455] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    5,    3,    4,
        6,    7,   37,    7,    8,   38,    8,   13,   13,   25,
      690,   25,   27,   27,   67,   67,   74,  666,   31,   74,

       31,   25,   32,  655,   40,   31,   32,  173,   31,  652,
      173,   37,   32,   41,   38,  175,   54,  609,  175,    3,
        4,    5,   32,    5,    6,    7,    6,   31,    8,   31,
       25,   32,   33,   40,   31,   32,   35,   31,   35,   33,
       46,   32,   41,  558,   36,   54,   33,   36,   35,   33,
       33,   32,   44,   36,  508,  507,   36,   46,   44,  400,
       42,   33,   70,   80,   42,   35,   52,   35,   33,   46,
       82,  389,   70,   36,   52,   33,   36,   35,   33,   33,
       34,   44,   36,   39,   34,   36,   46,   44,   34,   42,
       83,   39,   80,   42,   34,   52,   39,   34,   72,   82,

       34,   70,   43,   52,   86,  313,   43,   45,   72,   34,
       43,   45,   39,   34,   45,   45,   43,   34,   89,   83,
       39,  284,   91,   34,   48,   39,   34,  283,   48,   34,
       92,   43,   48,   86,   50,   43,   45,   72,   48,   43,
       45,   50,   50,   45,   45,   43,  282,   89,   50,  281,
       51,   91,   51,   48,   73,   51,   73,   48,  279,   92,
       95,   48,   96,   50,   53,   53,   73,   48,   49,   84,
       50,   50,   49,  274,   58,   49,   49,   50,   58,   51,
       49,   51,   84,   49,   51,  207,   58,   49,   49,   95,
       58,   96,   58,   53,   53,   73,  177,   49,   84,   97,

      176,   49,   60,   58,   49,   49,   60,   58,   81,   49,
       98,   84,   49,   99,   60,   58,   49,   49,   60,   58,
       60,   58,   64,   85,   90,   88,   64,  102,   97,   81,
       85,   60,   88,   90,   64,   60,   93,   81,   64,   98,
       64,   93,   99,   60,  142,  100,  103,   60,  100,   60,
      104,   64,   85,   90,   88,   64,  102,   94,   81,   85,
       71,   88,   90,   64,  106,   93,   94,   64,   94,   64,
       93,  107,  108,   94,  100,  103,  101,  100,  101,  104,
      111,  105,  101,  105,  112,  115,   94,  113,  109,  101,
      109,   66,  113,  106,   29,   94,  117,   94,  109,  118,

      107,  108,   94,  109,  109,  101,  122,  101,  123,  111,
      105,  101,  105,  112,  115,  116,  113,  109,  101,  109,
      114,  113,  114,  114,  116,  117,  119,  109,  118,  116,
      120,  120,  109,  109,  119,  122,  124,  123,  126,  125,
      127,  129,  128,  130,  116,  131,  133,  135,  132,  114,
      134,  114,  114,  116,  125,  119,  132,  128,  116,  120,
      120,  128,  136,  134,  137,  124,  139,  126,  125,  127,
      129,  128,  130,  138,  131,  133,  135,  132,  140,  134,
      141,  141,  143,  125,  138,  132,  128,  143,  144,  145,
      128,  136,  134,  137,  146,  139,  147,  148,  149,  150,

      146,  184,  138,  185,  186,  187,  188,  140,  189,  141,
      141,  143,  190,  138,  191,  192,  143,  144,  145,  193,
      194,  198,  199,  146,  200,  147,  148,  149,  150,  146,
      184,  201,  185,  186,  187,  188,  196,  189,  202,  203,
      196,  190,  204,  191,  192,  205,  206,  208,  193,  194,
      198,  199,  209,  200,  210,  211,  212,  213,  214,  215,
      201,  216,  212,  217,  218,  196,  219,  202,  203,  196,
      220,  204,  221,  222,  205,  206,  208,  223,  224,  225,
      226,  209,  227,  210,  211,  212,  213,  214,  215,  225,
      216,  212,  217,  218,  228,  219,  229,  230,  231,  220,

      232,  221,  222,  234,  235,  236,  223,  224,  225,  226,
      238,  227,  241,  242,  243,  244,  242,  245,  225,   24,
      246,  248,  249,  228,   23,  229,  230,  231,  247,  232,
      250,  251,  234,  235,  236,  252,  253,  255,  256,  238,
      240,  241,  242,  243,  244,  242,  245,  247,  240,  246,
      248,  249,  254,  240,  240,  258,  240,  247,  240,  250,
      251,  259,  260,  261,  252,  253,  255,  256,  262,  240,
      263,  254,  264,  266,  267,  268,  247,  240,  269,  271,
      272,  254,  240,  240,  258,  240,  273,  240,  275,  270,
      259,  260,  261,  276,  276,  277,  280,  262,  285,  263,

      270,  264,  266,  267,  268,  286,  278,  269,  271,  272,
      278,  287,  288,  293,  294,  273,  295,  275,  270,  296,
      297,  298,  276,  276,  277,  280,  299,  285,  300,  270,
      301,  302,  303,  307,  286,  278,  308,  309,  311,  278,
      287,  288,  293,  294,  312,  295,  314,  315,  296,  297,
      298,  318,  319,  320,  321,  299,  322,  300,  323,  301,
      302,  303,  307,  324,  325,  308,  309,  311,  326,  330,
      333,  335,  336,  312,  337,  314,  315,  338,  339,  326,
      318,  319,  320,  321,  340,  322,  341,  323,  342,  343,
      344,  346,  324,  325,  343,  347,  348,  326,  330,  333,

      335,  336,  349,  337,  351,  352,  338,  339,  326,  353,
      354,  357,  358,  340,  359,  341,  360,  342,  343,  344,
      346,  361,  362,  343,  347,  348,  363,  365,  367,  368,
      369,  349,  370,  351,  352,  371,  373,  374,  353,  354,
      357,  358,  369,  359,  375,  360,  376,  377,  378,  379,
      361,  362,  381,  382,  380,  363,  365,  367,  368,  369,
      380,  370,  383,  386,  371,  373,  374,  387,  390,  391,
      392,  369,  393,  375,  395,  376,  377,  378,  379,  396,
      397,  381,  382,  380,  398,  399,  401,  402,  403,  380,
      404,  383,  386,  405,  406,  407,  387,  390,  391,  392,

      408,  393,  409,  395,  412,  414,  415,  417,  396,  397,
      419,  420,  422,  398,  399,  401,  402,  403,  421,  404,
      424,  421,  405,  406,  407,  425,  428,  429,  430,  408,
      431,  409,  432,  412,  414,  415,  417,  433,  434,  419,
      420,  422,  435,  436,  437,  439,  440,  421,  441,  424,
      421,  443,  444,  442,  425,  428,  429,  430,  447,  431,
      448,  432,  449,  450,  451,  453,  433,  434,  442,  454,
      455,  435,  436,  437,  439,  440,  456,  441,  457,  458,
      443,  444,  442,  459,  460,  462,  463,  447,  464,  448,
      465,  449,  450,  451,  453,  466,  467,  442,  454,  455,

      468,  470,  471,  472,  475,  456,  477,  457,  458,  478,
      479,  481,  459,  460,  462,  463,  482,  464,  483,  465,
      485,  489,  490,  491,  466,  467,  496,  497,  498,  468,
      470,  471,  472,  475,  499,  477,  500,  502,  478,  479,
      481,  503,  504,  505,  506,  482,  510,  483,  511,  485,
      489,  490,  491,  512,  513,  496,  497,  498,  514,  515,
      516,  517,  519,  499,  522,  500,  502,  523,  528,  529,
      503,  504,  505,  506,  530,  510,  531,  511,  534,  537,
      538,  539,  512,  513,  540,  543,  544,  514,  515,  516,
      517,  519,  546,  522,  547,  548,  523,  528,  529,  549,

      551,  552,  554,  530,  555,  531,  557,  534,  537,  538,
      539,  559,  560,  540,  543,  544,  561,  562,  564,  563,
      568,  546,  569,  547,  548,  563,  570,  571,  549,  551,
      552,  554,  573,  555,  574,  557,  575,  576,  579,  580,
      559,  560,  581,  583,  584,  561,  562,  564,  563,  568,
      585,  569,  587,  590,  563,  570,  571,  591,  593,  595,
      596,  573,  598,  574,  599,  575,  576,  579,  580,  600,
      601,  581,  583,  584,  602,  603,  605,  606,  607,  585,
      608,  587,  590,  611,  612,  614,  591,  593,  595,  596,
      615,  598,  616,  599,  618,  619,  620,  623,  600,  601,

      624,  625,  627,  602,  603,  605,  606,  607,  629,  608,
      632,  633,  611,  612,  614,  634,  639,  641,  642,  615,
      643,  616,  645,  618,  619,  620,  623,  646,  647,  624,
      625,  627,  648,  650,  651,  653,  654,  629,  657,  632,
      633,  660,  661,  662,  634,  639,  641,  642,  663,  643,
      664,  645,  667,  668,  669,  670,  646,  647,  671,  672,
      674,  648,  650,  651,  653,  654,  676,  657,  677,  678,
      660,  661,  662,  679,  681,  682,   19,  663,   14,  664,
       11,  667,  668,  669,  670,   10,    9,  671,  672,  674,
        0,    0,    0,    0,    0,  676,    0,  677,  678,    0,

        0,    0,  679,  681,  682,  686,  686,  686,  686,  686,
      686,  686,  687,  687,  687,  687,  687,  687,  687,  688,
      688,  688,  688,  688,  688,  688,  689,  689,  689,  689,
      689,  689,  689,  691,  691,  692,    0,  692,    0,  692,
      692,  692,  693,  693,  693,  693,  693,  693,  693,  694,
        0,  694,  694,  694,  694,  695,  695,  695,  695,  695,
      695,  695,  696,    0,    0,  696,  696,  696,  696,  697,
      697,  697,  697,  697,  697,  697,  698,  698,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,

      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685,  685,  685,  685,  685,  685,  685,
      685,  685,  685,  685
    } ;

static yyconst flex_int16_t yy_rule_linenum[193] =
    {   0,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
       98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,

      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
      168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
      178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  190,  191,  192,  193,  194,  195,  196,  197,
      198,  200,  203,  209,  213,  217,  221,  222,  223,  224,
      225,  226,  227,  234,  235,  239,  240,  241,  242,  243,
      244,  245,  252,  253,  257,  258,  259,  260,  261,  262,
      263,  270

    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
#line 8 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
	#include "sql_parser.hpp"	//包含由parser.l生成的头文件
	#include "sql_scanner.h" 	//包含yyFlexLexer子类的头文件
	#include "location.hh" 	//包含位置调试信息头文件
	#define yyterminate() return CatDB::SqlParser::make_END(loc);
	#define YY_USER_ACTION  loc.columns (yyleng);
	#undef yywrap
  	#define yywrap() 1
	#define YY_NO_UNISTD_H




#line 1082 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#define INITIAL 0
#define beg_str 1
#define beg_str2 2
#define beg_ident 3
#define beg_comment 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 36 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"


#line 1246 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 686 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1379 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 193 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 193 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 194 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 38 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LP(loc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 39 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RP(loc); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 40 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COMMA(loc); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PERIOD(loc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SEMICOLON(loc); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 43 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PLUS(loc); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 44 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MINUS(loc); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MUL(loc); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DIV(loc); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BEGIN_HINT(loc); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 48 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_END_HINT(loc); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_NE(loc); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 50 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_LT(loc); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 51 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_LE(loc); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 52 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_NE(loc); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 53 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_EQ(loc); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_GT(loc); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 55 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_GE(loc); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 56 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ALL(loc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 57 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AND(loc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 58 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ANY(loc); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 59 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AS(loc); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 60 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ASC(loc); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 61 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AVG(loc); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 62 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BEGIN_OUTLINE_DATA(loc); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BETWEEN(loc); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BIGINT(loc); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BINARY(loc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 66 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BOOL(loc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 67 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BY(loc); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 68 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CALL(loc); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 69 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CASE(loc); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 70 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CHAR(loc); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 71 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COLUMN(loc); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 72 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COLUMNS(loc); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 73 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COUNT(loc); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 74 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CREATE(loc); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 75 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CSV(loc); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 76 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATABASE(loc); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 77 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATABASES(loc); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 78 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATE(loc); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 79 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATETIME(loc); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 80 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DAY(loc); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 81 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DECIMAL(loc); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 82 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DELETE(loc); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 83 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DENSE_RANK(loc); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 84 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DESC(loc); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 85 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DESCRIBE(loc); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 86 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DISTINCT(loc); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 87 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DOUBLE(loc); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 88 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DROP(loc); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 89 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DUAL(loc); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 90 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ELSE(loc); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 91 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_END_SYM(loc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 92 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_END_OUTLINE_DATA(loc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 93 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ENGINE(loc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 94 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXCEPT(loc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 95 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXEC(loc); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 96 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXISTS(loc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 97 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXPLAIN(loc); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 98 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXPR_NORMALIZE(loc); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 99 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FIELD(loc); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 100 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FLOAT(loc); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 101 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FROM(loc); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 102 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FULL(loc); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 103 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FUNCTION(loc);}
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 104 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_GROUP(loc); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 105 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_HAVING(loc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 106 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IF(loc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 107 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IFNULL(loc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 108 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IN(loc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 109 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INDEX(loc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 110 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INFILE(loc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 111 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INNER(loc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 112 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INSERT(loc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 113 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INT(loc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 114 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTEGER(loc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 115 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTERSECT(loc); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 116 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTERVAL(loc); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 117 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTO(loc); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 118 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IS(loc); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 119 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_JOIN(loc); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 120 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_KILL(loc); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 121 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LEADING(loc); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 122 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LEFT(loc); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 123 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LIKE(loc); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 124 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LIMIT(loc); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 125 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LINE(loc); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 126 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MAX(loc); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 127 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MEDIUMINT(loc); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 128 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MEMORY(loc); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 129 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MERGE(loc); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 130 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MIN(loc); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 131 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MONTH(loc); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 132 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_EXPR_NORMALIZE(loc); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 133 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_MERGE(loc); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 134 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_REWRITE(loc); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 135 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_SIMPLIFY_SQ(loc); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 136 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_UNNEST(loc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 137 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_USE_HASH(loc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 138 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_USE_NL(loc); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 139 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_WIN_MAGIC(loc); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 140 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NOT(loc); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 141 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NULLX(loc); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 142 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMBER(loc); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 143 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMERIC_SYM(loc); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 144 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ON(loc); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 145 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OR(loc); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 146 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ORDER(loc); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 147 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ORDERED(loc); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 148 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OUTER(loc); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 149 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OVER(loc); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 150 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PACKAGE(loc);}
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 151 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PARALLEL(loc); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 152 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PARTITION(loc); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 153 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PROCEDURE(loc);}
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 154 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PROCESSLIST(loc); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 155 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RANK(loc); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 156 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_REAL(loc); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 157 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_REPLACE(loc);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 158 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RETURN(loc);}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 159 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RIGHT(loc); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 160 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ROW_NUMBER(loc); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 161 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ROWID(loc); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 162 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SAMPLE(loc); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 163 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SELECT(loc); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 164 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SET(loc); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 165 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SHOW(loc); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 166 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SIMPLIFY_SQ(loc); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 167 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SIZE(loc); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 168 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SMALLINT(loc); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 169 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SPLIT(loc); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 170 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_STATIS(loc); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 171 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_STATUS(loc); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 172 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SUBSTR(loc); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 173 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SUM(loc); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 174 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TABLE(loc); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 175 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TABLES(loc); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 176 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_THEN(loc); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 177 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TIME(loc); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 178 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TIMESTAMP_SYM(loc); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 179 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TINYINT(loc); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 180 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TO_CHAR(loc); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 181 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TO_NUMBER(loc); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 182 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UNION(loc); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 183 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UNNEST(loc); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 184 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UPDATE(loc); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 185 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USING(loc); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 186 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USE_HASH(loc); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 187 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USE_NL(loc); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 188 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VALUES(loc); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 189 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VARBINARY(loc); }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 190 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VARCHAR(loc); }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 191 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VIEW(loc); }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 192 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WHEN(loc); }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 193 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WHERE(loc); }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 194 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WIN_MAGIC(loc); }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 195 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_YEAR(loc); }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 196 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMERIC(yytext,loc);	}
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 197 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IDENT(yytext,loc);	} 
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 198 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_QB_NAME_IDENT(yytext+1,loc);	} 
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 200 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(beg_comment);		
							}
	YY_BREAK
case 163:
/* rule 163 can match eol */
YY_RULE_SETUP
#line 203 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								;
							}
	YY_BREAK
case YY_STATE_EOF(beg_comment):
#line 206 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								yyterminate();
							}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 209 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(INITIAL);
							}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 213 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								parse_str.clear();
								BEGIN(beg_ident);
							}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 217 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(INITIAL);
								return CatDB::SqlParser::make_IDENT(parse_str,loc);
							}
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 221 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 222 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 223 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 224 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 225 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 172:
/* rule 172 can match eol */
YY_RULE_SETUP
#line 226 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 227 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								tmp_ptr = yytext;
								while( *tmp_ptr ) {
									parse_str += *tmp_ptr++;
								}
							}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 234 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_str);}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 235 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(INITIAL);
								return CatDB::SqlParser::make_STRING(parse_str,loc);
							}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 239 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 240 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 241 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 242 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 243 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 181:
/* rule 181 can match eol */
YY_RULE_SETUP
#line 244 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 245 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								tmp_ptr = yytext;
								while( *tmp_ptr ) {
									parse_str += *tmp_ptr++;
								}
							}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 252 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_str2);}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 253 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(INITIAL);
								return CatDB::SqlParser::make_STRING(parse_str,loc);
							}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 257 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 258 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 259 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 260 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 261 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 262 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 263 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								tmp_ptr = yytext;
								while( *tmp_ptr ) {
									parse_str += *tmp_ptr++;
								}
							}
	YY_BREAK
case 192:
/* rule 192 can match eol */
YY_RULE_SETUP
#line 270 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"

	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(beg_str):
case YY_STATE_EOF(beg_str2):
case YY_STATE_EOF(beg_ident):
#line 271 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ yyterminate(); }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 272 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
ECHO;
	YY_BREAK
#line 2375 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	CatDB_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	CatDB_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CatDB_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CatDB_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 686 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 686 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 685);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CatDB_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CatDB_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CatDB_free((void *) b->yy_ch_buf  );

	CatDB_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)CatDB_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CatDB_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) CatDB_alloc(new_size  );

		else
			(yy_start_stack) = (int *) CatDB_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CatDB_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *CatDB_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void CatDB_free (void * ptr )
{
	free( (char *) ptr );	/* see CatDB_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 272 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"



