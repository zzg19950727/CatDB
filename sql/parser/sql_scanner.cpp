#line 2 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#line 4 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CatDB_FlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *CatDB_alloc (yy_size_t  );
void *CatDB_realloc (void *,yy_size_t  );
void CatDB_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int SqlScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 126
#define YY_END_OF_BUFFER 127
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[391] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,  127,  126,
      123,  126,  102,  111,   93,   94,  100,   98,   95,   99,
       96,  101,  124,   97,   16,   15,   14,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  120,
      110,  103,  126,  119,  112,  126,  122,  121,  123,   11,
      124,  124,  124,    0,   17,   12,   13,  125,  125,  125,
       25,  125,  125,  125,   27,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,   21,   22,  125,  125,  125,  125,  125,

      125,   58,    8,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  110,  109,  107,  108,  104,  106,  105,  119,
      118,  116,  117,  113,  115,  114,  122,    0,    0,    0,
      124,   24,  125,    9,   23,   26,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,   52,  125,  125,  125,  125,
      125,   10,  125,  125,  125,  125,  125,  125,  125,  125,
      125,   65,  125,  125,  125,  125,  125,  125,  125,  125,

      125,  125,  125,   73,  125,  125,  125,    0,  124,    0,
      124,  125,  125,  125,  125,    1,   89,   84,  125,  125,
      125,   33,  125,  125,   36,  125,  125,   40,   41,   92,
      125,  125,  125,  125,  125,   45,   46,  125,  125,  125,
      125,  125,  125,   53,   54,   55,   18,  125,  125,    2,
      125,  125,  125,  125,   83,  125,  125,  125,  125,   66,
       67,  125,  125,  125,   91,   88,  125,    4,  125,  125,
      125,  125,  125,   90,  125,  125,  125,  125,  125,  125,
      125,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,    3,   44,   47,  125,   50,   51,  125,  125,   56,

      125,  125,  125,   59,  125,   61,   62,  125,  125,  125,
      125,  125,   70,  125,  125,    6,  125,  125,  125,  125,
       76,  125,  125,   80,   85,   28,   30,  125,  125,  125,
       35,  125,  125,   39,    5,   42,  125,   48,   49,  125,
      125,   57,  125,  125,   63,   64,  125,   68,   69,   71,
      125,  125,   72,   74,  125,  125,   20,   19,   29,  125,
      125,   81,  125,  125,   43,  125,  125,   82,  125,  125,
      125,   77,  125,   75,   31,   34,   37,   38,  125,  125,
       60,   78,  125,  125,   32,    7,   79,   87,   86,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,   16,   17,
       18,   19,    1,    1,   20,   21,   22,   23,   24,   25,
       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
        1,   46,    1,    1,   36,   47,   48,   49,   50,   51,

       52,   53,   54,   55,   56,   57,   58,   59,   60,   61,
       62,   63,   36,   64,   65,   66,   67,   68,   69,   70,
       71,   72,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[73] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    1,    1,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    2,    6,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5
    } ;

static yyconst flex_int16_t yy_base[400] =
    {   0,
        0,    0,   70,   71,   74,   75,   76,   79,  186,  820,
       81,  164,  820,  820,  820,  820,  820,  820,  820,  820,
      153,  820,   72,  820,   70,  820,  143,   68,   84,  110,
      155,   72,  114,   49,   71,  105,   70,    0,   83,  117,
      123,  116,  128,  172,  215,  177,  175,  136,  132,  820,
        0,  820,  223,    0,  820,  253,    0,  820,   90,  820,
      178,  194,  242,   82,  820,  820,  820,    0,  129,  229,
      149,  125,  262,  164,    0,  129,  181,  192,  207,  198,
      274,  220,  242,  231,  249,  245,  285,  267,  265,  267,
      272,  270,  250,  305,    0,  280,  296,  315,  299,  276,

      320,    0,  302,  293,  314,  311,  298,  314,  324,  320,
      313,  339,  340,  340,  340,  336,  332,  348,  354,  354,
      363,  357,    0,  820,  820,  820,  820,  820,  820,    0,
      820,  820,  820,  820,  820,  820,    0,   83,   90,  137,
      135,    0,  353,    0,    0,    0,  344,  363,  373,  364,
      374,  364,  362,  383,  387,  380,  386,  392,  377,  396,
      383,  389,  400,  401,  392,  401,  396,  417,  408,  410,
      404,  419,  425,  426,  427,  430,  422,  419,  432,  431,
      434,    0,  432,  446,  442,  452,  442,  447,  448,  445,
      457,    0,  444,  464,  458,  454,  465,  464,  475,  459,

      481,  472,  487,    0,  470,  490,  481,   99,   95,   94,
       85,  475,  491,  488,  486,    0,    0,    0,  494,  489,
      508,  492,  500,  497,  501,  513,  513,    0,    0,    0,
      512,  512,  528,  528,  517,    0,    0,  518,  526,  518,
      525,  527,  529,    0,    0,    0,    0,  528,  528,    0,
      546,  536,  537,  540,    0,  538,  556,  551,  562,    0,
        0,  554,  562,  562,    0,  554,  568,    0,  564,  564,
      581,  578,  581,    0,  585,  566,  591,  578,  576,  588,
      598,  603,  598,  607,  604,  603,  599,  611,  600,  602,
      613,    0,    0,    0,  616,    0,    0,  606,  608,    0,

      616,  615,  625,    0,  626,    0,    0,  634,  622,  634,
      626,  627,  630,  632,  641,    0,  651,  639,  645,  660,
        0,  658,  650,    0,    0,  649,    0,  651,  652,  662,
        0,  673,  674,    0,    0,    0,  664,    0,    0,  675,
      672,    0,  679,  681,    0,    0,  674,    0,    0,    0,
      689,  674,    0,    0,  695,  680,    0,    0,    0,  694,
      695,    0,  696,  684,    0,  704,  697,    0,  700,  695,
      700,    0,  699,    0,  700,    0,    0,    0,  700,  702,
        0,    0,  707,  701,    0,    0,    0,    0,    0,  820,
      772,  778,  784,   85,  790,  796,  802,  808,  814

    } ;

static yyconst flex_int16_t yy_def[400] =
    {   0,
      390,    1,  391,  391,  392,  392,  393,  393,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  390,
      395,  390,  396,  397,  390,  398,  399,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  395,  390,  390,  390,  390,  390,  390,  397,
      390,  390,  390,  390,  390,  390,  399,  390,  390,  390,
      390,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  390,  390,  390,
      390,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,

      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,  394,
      394,  394,  394,  394,  394,  394,  394,  394,  394,    0,
      390,  390,  390,  390,  390,  390,  390,  390,  390

    } ;

static yyconst flex_int16_t yy_nxt[893] =
    {   0,
       10,   11,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   38,   44,   45,   46,   47,
       48,   49,   38,   38,   38,   10,   50,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   38,
       38,   38,   10,   10,   52,   52,   10,   10,   10,   55,
       55,   10,   59,   59,   62,   92,   63,   65,   66,   68,
       93,   59,   59,  140,  208,   64,  141,  209,   69,  211,

       70,  210,   86,   96,  211,   71,   97,   72,  211,  209,
       98,   73,   92,  209,   87,   53,   53,   74,   93,   56,
       56,   10,   58,   64,   10,   58,   69,   75,   70,   76,
       86,   96,   71,   88,   97,   72,   77,   94,   98,   73,
       99,   87,   95,   78,   89,   74,   79,  104,  102,  141,
       90,  141,  103,   91,   75,  121,  100,   76,  122,  142,
       67,   88,  101,  147,   77,   94,  151,   61,   99,   95,
      146,   78,   89,   79,   80,  104,  102,   90,   81,  103,
       91,   60,   82,  121,  100,  390,  122,  142,   83,  101,
      147,   84,   61,  151,   85,  105,  114,  150,  146,  106,

      152,  138,   80,  115,  116,  107,   81,  118,   61,  119,
       82,  390,  120,  117,  390,  390,   83,  139,   84,  390,
      390,   85,  153,  105,  114,  150,  390,  106,  152,  138,
      154,  115,  116,  107,  108,  118,  155,  119,  109,  120,
      117,  110,  111,  125,  390,  139,  112,  126,  143,  390,
      153,  144,  390,  113,   62,  127,   63,  159,  154,  128,
      390,  129,  108,  155,  161,   64,  109,  390,  162,  110,
      111,  125,  145,  132,  112,  126,  143,  133,  390,  144,
      113,  160,  163,  127,  159,  134,  128,  148,  129,  135,
      172,  136,  161,   64,  149,  156,  162,  167,  168,  145,

      169,  132,  170,  171,  157,  133,  164,  177,  160,  163,
      390,  158,  165,  134,  182,  148,  135,  172,  136,  166,
      178,  181,  149,  156,  185,  167,  168,  173,  169,  186,
      170,  171,  157,  187,  164,  177,  188,  174,  158,  189,
      165,  182,  175,  176,  179,  190,  180,  166,  178,  181,
      183,  184,  185,  193,  191,  173,  186,  194,  195,  196,
      197,  187,  192,  198,  188,  174,  189,  199,  200,  175,
      176,  201,  179,  190,  180,  202,  203,  204,  183,  184,
      207,  193,  191,  212,  194,  213,  195,  196,  197,  192,
      214,  198,  215,  205,  216,  199,  200,  217,  201,  206,

      218,  219,  220,  202,  203,  204,  221,  223,  207,  224,
      222,  212,  213,  225,  390,  226,  227,  228,  214,  229,
      215,  205,  216,  230,  231,  217,  206,  218,  219,  232,
      220,  233,  390,  234,  221,  223,  235,  224,  222,  236,
      237,  225,  226,  238,  227,  228,  239,  229,  240,  241,
      242,  230,  231,  243,  245,  247,  232,  246,  248,  233,
      234,  249,  250,  244,  235,  253,  251,  236,  237,  252,
      238,  254,  255,  256,  239,  257,  240,  241,  242,  258,
      259,  243,  245,  247,  246,  260,  248,  261,  262,  249,
      250,  244,  263,  253,  251,  264,  265,  252,  266,  254,

      255,  256,  267,  257,  268,  269,  270,  258,  259,  271,
      272,  273,  260,  274,  277,  261,  262,  275,  276,  263,
      278,  390,  279,  264,  265,  280,  266,  281,  282,  267,
      283,  284,  268,  269,  270,  285,  271,  286,  272,  273,
      287,  274,  277,  288,  275,  276,  289,  291,  278,  279,
      290,  292,  294,  280,  281,  293,  282,  283,  295,  284,
      296,  297,  285,  298,  286,  299,  300,  301,  287,  302,
      305,  288,  303,  304,  289,  291,  306,  290,  307,  292,
      294,  308,  293,  309,  310,  313,  295,  296,  297,  311,
      298,  314,  299,  300,  301,  315,  316,  302,  305,  303,

      304,  312,  317,  306,  318,  319,  307,  320,  321,  308,
      322,  309,  310,  313,  323,  390,  324,  311,  314,  325,
      326,  327,  328,  315,  316,  329,  330,  331,  312,  317,
      332,  333,  318,  319,  334,  320,  321,  322,  335,  336,
      337,  338,  323,  324,  339,  340,  325,  341,  326,  327,
      328,  342,  343,  329,  330,  331,  344,  345,  332,  333,
      346,  347,  334,  348,  349,  335,  336,  350,  337,  338,
      351,  339,  340,  352,  353,  341,  354,  355,  342,  356,
      343,  357,  358,  361,  344,  345,  359,  346,  360,  347,
      348,  349,  362,  363,  350,  364,  365,  351,  366,  367,

      368,  352,  353,  354,  369,  355,  370,  356,  371,  357,
      358,  361,  372,  359,  373,  360,  374,  375,  376,  377,
      362,  363,  378,  364,  365,  379,  366,  367,  368,  380,
      381,  383,  369,  382,  370,  384,  371,  385,  386,  372,
      387,  388,  373,  374,  389,  375,  376,  377,  390,  378,
      390,  390,  390,  379,  390,  390,  390,  380,  381,  383,
      382,  390,  384,  390,  385,  386,  390,  387,  390,  388,
      390,  389,   51,   51,   51,   51,   51,   51,   54,   54,
       54,   54,   54,   54,   57,   57,   57,   57,   57,   57,
      123,  390,  390,  123,  123,  123,  124,  124,  124,  124,

      124,  124,  130,  390,  130,  390,  130,  130,  131,  131,
      131,  131,  131,  131,  137,  390,  137,  137,  137,    9,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390

    } ;

static yyconst flex_int16_t yy_chk[893] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    4,    3,    4,    5,    6,    7,    5,
        6,    8,   11,   11,   23,   34,   23,   25,   25,  394,
       35,   59,   59,   64,  138,   23,   64,  138,   28,  211,

       28,  139,   32,   37,  139,   28,   39,   29,  210,  209,
       39,   29,   34,  208,   32,    3,    4,   29,   35,    5,
        6,    7,    7,   23,    8,    8,   28,   29,   28,   30,
       32,   37,   28,   33,   39,   29,   30,   36,   39,   29,
       40,   32,   36,   30,   33,   29,   30,   43,   42,  141,
       33,  140,   42,   33,   29,   48,   41,   30,   49,   69,
       27,   33,   41,   72,   30,   36,   76,   21,   40,   36,
       71,   30,   33,   30,   31,   43,   42,   33,   31,   42,
       33,   12,   31,   48,   41,    9,   49,   69,   31,   41,
       72,   31,   61,   76,   31,   44,   46,   74,   71,   44,

       77,   61,   31,   46,   46,   44,   31,   47,   62,   47,
       31,    0,   47,   46,    0,    0,   31,   62,   31,    0,
        0,   31,   78,   44,   46,   74,    0,   44,   77,   61,
       79,   46,   46,   44,   45,   47,   80,   47,   45,   47,
       46,   45,   45,   53,    0,   62,   45,   53,   70,    0,
       78,   70,    0,   45,   63,   53,   63,   82,   79,   53,
        0,   53,   45,   80,   84,   63,   45,    0,   85,   45,
       45,   53,   70,   56,   45,   53,   70,   56,    0,   70,
       45,   83,   86,   53,   82,   56,   53,   73,   53,   56,
       93,   56,   84,   63,   73,   81,   85,   88,   89,   70,

       90,   56,   91,   92,   81,   56,   87,   96,   83,   86,
        0,   81,   87,   56,  100,   73,   56,   93,   56,   87,
       97,   99,   73,   81,  103,   88,   89,   94,   90,  104,
       91,   92,   81,  105,   87,   96,  106,   94,   81,  107,
       87,  100,   94,   94,   98,  108,   98,   87,   97,   99,
      101,  101,  103,  110,  109,   94,  104,  111,  112,  113,
      114,  105,  109,  115,  106,   94,  107,  116,  116,   94,
       94,  117,   98,  108,   98,  118,  119,  120,  101,  101,
      122,  110,  109,  143,  111,  147,  112,  113,  114,  109,
      148,  115,  149,  121,  150,  116,  116,  151,  117,  121,

      152,  153,  154,  118,  119,  120,  155,  156,  122,  157,
      155,  143,  147,  158,    0,  159,  160,  161,  148,  162,
      149,  121,  150,  163,  164,  151,  121,  152,  153,  165,
      154,  166,    0,  167,  155,  156,  168,  157,  155,  169,
      170,  158,  159,  171,  160,  161,  172,  162,  173,  174,
      175,  163,  164,  176,  177,  179,  165,  178,  180,  166,
      167,  181,  183,  176,  168,  185,  184,  169,  170,  184,
      171,  186,  187,  188,  172,  189,  173,  174,  175,  190,
      191,  176,  177,  179,  178,  193,  180,  194,  195,  181,
      183,  176,  196,  185,  184,  197,  198,  184,  199,  186,

      187,  188,  200,  189,  201,  202,  203,  190,  191,  205,
      206,  206,  193,  207,  213,  194,  195,  207,  212,  196,
      214,    0,  215,  197,  198,  219,  199,  220,  221,  200,
      222,  223,  201,  202,  203,  224,  205,  225,  206,  206,
      226,  207,  213,  227,  207,  212,  231,  233,  214,  215,
      232,  234,  238,  219,  220,  235,  221,  222,  239,  223,
      240,  241,  224,  242,  225,  243,  248,  249,  226,  251,
      254,  227,  252,  253,  231,  233,  256,  232,  257,  234,
      238,  258,  235,  259,  262,  264,  239,  240,  241,  263,
      242,  266,  243,  248,  249,  267,  269,  251,  254,  252,

      253,  263,  270,  256,  271,  272,  257,  273,  275,  258,
      276,  259,  262,  264,  277,    0,  278,  263,  266,  279,
      280,  281,  282,  267,  269,  283,  284,  285,  263,  270,
      286,  287,  271,  272,  288,  273,  275,  276,  289,  290,
      291,  295,  277,  278,  298,  299,  279,  301,  280,  281,
      282,  302,  303,  283,  284,  285,  305,  308,  286,  287,
      309,  310,  288,  311,  312,  289,  290,  313,  291,  295,
      314,  298,  299,  315,  317,  301,  318,  319,  302,  320,
      303,  322,  323,  329,  305,  308,  326,  309,  328,  310,
      311,  312,  330,  332,  313,  333,  337,  314,  340,  341,

      343,  315,  317,  318,  344,  319,  347,  320,  351,  322,
      323,  329,  352,  326,  355,  328,  356,  360,  361,  363,
      330,  332,  364,  333,  337,  366,  340,  341,  343,  367,
      369,  371,  344,  370,  347,  373,  351,  375,  379,  352,
      380,  383,  355,  356,  384,  360,  361,  363,    0,  364,
        0,    0,    0,  366,    0,    0,    0,  367,  369,  371,
      370,    0,  373,    0,  375,  379,    0,  380,    0,  383,
        0,  384,  391,  391,  391,  391,  391,  391,  392,  392,
      392,  392,  392,  392,  393,  393,  393,  393,  393,  393,
      395,    0,    0,  395,  395,  395,  396,  396,  396,  396,

      396,  396,  397,    0,  397,    0,  397,  397,  398,  398,
      398,  398,  398,  398,  399,    0,  399,  399,  399,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390,  390,  390,  390,  390,  390,  390,  390,  390,
      390,  390

    } ;

static yyconst flex_int16_t yy_rule_linenum[126] =
    {   0,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
       93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
      103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
      113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
      123,  124,  126,  127,  128,  129,  130,  131,  132,  133,

      134,  136,  137,  141,  142,  143,  144,  145,  146,  147,
      153,  154,  158,  159,  160,  161,  162,  163,  164,  170,
      171,  175,  181,  182,  183
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
#line 7 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
	#include "sql_parser.hpp"	//包含由parser.l生成的头文件
	#include "sql_scanner.h" 	//包含yyFlexLexer子类的头文件
	#include "location.hh" 	//包含位置调试信息头文件
	#include <string>
	# define YY_USER_ACTION  loc.columns (yyleng);
	#define yyterminate() CatDB::SqlParser::make_END(loc);
	# undef yywrap
  	# define yywrap() 1
	#define YY_NO_UNISTD_H



#line 853 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#define INITIAL 0
#define beg_str 1
#define beg_str2 2
#define beg_ident 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 31 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"


#line 1016 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 391 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 820 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 126 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 126 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 127 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 33 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BOOL(loc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 34 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NULLX(loc); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 35 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FALSE(loc); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 36 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TRUE(loc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 37 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXCEPT(loc); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 38 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UNION(loc); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 39 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTERSECT(loc); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 40 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OR(loc); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 41 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AND(loc); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 42 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NOT(loc); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 43 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_NE(loc); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 44 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_NE(loc); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 45 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_GE(loc); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 46 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_GT(loc); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 47 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_EQ(loc); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 48 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_LT(loc); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 49 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_LE(loc); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 50 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LIKE(loc); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 51 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BETWEEN(loc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 52 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ANALYZE(loc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 53 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IN(loc); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 54 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IS(loc); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 55 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ANY(loc); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 56 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ALL(loc); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 57 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AS(loc); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 58 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ASC(loc); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 59 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BY(loc); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 60 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COLUMN(loc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 61 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COLUMNS(loc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 62 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CREATE(loc); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 63 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATABASE(loc); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 64 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATABASES(loc); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 65 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATE(loc); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 66 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATETIME(loc); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 67 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DELETE(loc); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 68 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DESC(loc); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 69 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DESCRIBE(loc); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 70 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DISTINCT(loc); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 71 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DOUBLE(loc); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 72 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DROP(loc); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 73 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DUAL(loc); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 74 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXISTS(loc); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 75 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXPLAIN(loc); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 76 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FLOAT(loc); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 77 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FROM(loc); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 78 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FULL(loc); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 79 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_GROUP(loc); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 80 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_HAVING(loc); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 81 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INSERT(loc); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 82 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INDEX(loc); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 83 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INNER(loc); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 84 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INT(loc); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 85 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTO(loc); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 86 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_JOIN(loc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 87 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LEFT(loc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 88 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LIMIT(loc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 89 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMBER(loc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 90 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ON(loc); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 91 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ORDER(loc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 92 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PARALLEL(loc); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 93 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RIGHT(loc); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 94 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ROWID(loc); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 95 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SAMPLE(loc); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 96 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SELECT(loc); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 97 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SET(loc); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 98 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SHOW(loc); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 99 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SIZE(loc); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 100 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_STATIS(loc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 101 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_STATUS(loc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 102 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TABLE(loc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 103 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TABLES(loc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 104 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UPDATE(loc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 105 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USING(loc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 106 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VALUES(loc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 107 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VARCHAR(loc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 108 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WHERE(loc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 109 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TINYINT(loc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 110 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SMALLINT(loc); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 111 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MEDIUMINT(loc); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 112 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BIGINT(loc); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 113 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DECIMAL(loc); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 114 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMERIC_SYM(loc); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 115 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_REAL(loc); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 116 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CHAR(loc); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 117 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BINARY(loc); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 118 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VARBINARY(loc); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 119 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TIMESTAMP_SYM(loc); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 120 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TIME(loc); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 121 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CASE(loc); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 122 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WHEN(loc); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 123 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_THEN(loc); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 124 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ELSE(loc); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 126 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LP(loc); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 127 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RP(loc); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 128 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COMMA(loc); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 129 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PERIOD(loc); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 130 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SEMICOLON(loc); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 131 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PLUS(loc); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 132 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MINUS(loc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 133 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MUL(loc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 134 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DIV(loc); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 136 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_str);}
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 137 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						BEGIN(INITIAL);
						return CatDB::SqlParser::make_STRING(parse_str,loc);
					}
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 141 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 142 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 143 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 144 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 145 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 109:
/* rule 109 can match eol */
YY_RULE_SETUP
#line 146 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 147 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						tmp_ptr = yytext;
						while( *tmp_ptr )
							parse_str += *tmp_ptr++;
					}
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 153 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_str2);}
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 154 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						BEGIN(INITIAL);
						return CatDB::SqlParser::make_STRING(parse_str,loc);
					}
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 158 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 159 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 160 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 161 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 162 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 118:
/* rule 118 can match eol */
YY_RULE_SETUP
#line 163 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 164 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						tmp_ptr = yytext;
						while( *tmp_ptr )
							parse_str += *tmp_ptr++;
					}
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 170 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_ident);}
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 171 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						BEGIN(INITIAL);
						return CatDB::SqlParser::make_IDENT(parse_str,loc);
					}
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 175 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						tmp_ptr = yytext;
						while( *tmp_ptr )
							parse_str += *tmp_ptr++;
					}
	YY_BREAK
case 123:
/* rule 123 can match eol */
YY_RULE_SETUP
#line 181 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"

	YY_BREAK
case 124:
YY_RULE_SETUP
#line 182 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMERIC(yytext,loc);	}
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 183 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IDENT(yytext,loc);	} 
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(beg_str):
case YY_STATE_EOF(beg_str2):
case YY_STATE_EOF(beg_ident):
#line 184 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ yyterminate(); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 185 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
ECHO;
	YY_BREAK
#line 1790 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	CatDB_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	CatDB_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CatDB_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CatDB_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 391 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 391 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 390);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CatDB_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CatDB_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CatDB_free((void *) b->yy_ch_buf  );

	CatDB_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)CatDB_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CatDB_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) CatDB_alloc(new_size  );

		else
			(yy_start_stack) = (int *) CatDB_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CatDB_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *CatDB_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void CatDB_free (void * ptr )
{
	free( (char *) ptr );	/* see CatDB_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 185 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"



