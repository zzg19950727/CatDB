#line 2 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#line 4 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 37
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro. This is required in order to pass the c++-multiple-scanners
     * test in the regression suite. We get reports that it breaks inheritance.
     * We will address this in a future release of flex, or omit the C++ scanner
     * altogether.
     */
    #define yyFlexLexer CatDB_FlexLexer
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* %if-c++-only */
/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */
/* %endif */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* %not-for-header */

/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
/* %ok-for-header */

/* %if-reentrant */
/* %endif */

/* %if-not-reentrant */

/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
extern yy_size_t yyleng;
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
/* %endif */

/* %if-c++-only */
	std::istream* yy_input_file;
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* %if-c-only Standard (non-C++) definition */
/* %if-not-reentrant */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
/* %endif */

void *CatDB_alloc (yy_size_t  );
void *CatDB_realloc (void *,yy_size_t  );
void CatDB_free (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>

int yyFlexLexer::yywrap() { return 1; }
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int SqlScanner::yylex()

/* %if-c-only Standard (non-C++) definition */
/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	(yy_c_buf_p) = yy_cp;

/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 180
#define YY_END_OF_BUFFER 181
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[653] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      181,  180,  176,  180,  152,  164,  141,  142,  148,  146,
      143,  147,  144,  149,  177,  145,   14,   13,   12,  180,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  173,  163,  156,  180,  172,  165,
      180,  175,  174,  154,  154,  176,    9,  151,  177,  153,
      177,  177,    0,   15,   10,   11,  179,  178,  178,  178,
       23,  178,  178,  178,  178,   25,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  178,  178,  178,  178,  178,   49,   19,   20,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,   63,
        6,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  163,
      162,  160,  161,  157,  159,  158,  172,  171,  169,  170,
      166,  168,  167,  175,  155,    0,  150,    0,    0,  177,
      179,   22,  178,    7,   21,   24,  126,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  121,  178,   33,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  103,

      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,   54,  178,  178,  178,  178,
      178,  178,  178,  128,  178,  178,  178,  127,  178,    8,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  178,  178,   72,  178,  178,  178,  178,  178,
      178,  178,  124,  178,  178,  178,  178,  178,  178,  178,
      178,   83,  178,  178,  178,  178,  178,  178,    0,  177,
        0,  177,  178,  178,  178,  178,  178,    1,   99,   94,
      178,  178,  178,  178,   31,  178,  178,  178,   35,  178,
      178,   39,   40,  102,  178,  178,  178,  178,  178,  178,

      178,  178,   44,   45,  178,  178,  178,  178,  178,  178,
      178,  178,   57,   58,   48,  178,   59,   16,  178,  119,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
        2,  178,  178,  178,  130,  178,  178,  178,  129,   93,
      178,  178,  178,  178,  178,   73,  178,   74,  178,  178,
      178,  178,  178,  101,   98,  178,  178,  178,  178,  178,
      178,  178,  178,  178,  178,  123,  100,  178,  178,  122,
      178,  178,  178,  178,  178,  178,  125,  178,  178,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,  118,   43,   46,  178,  178,   52,  178,   53,

      178,  178,  178,  178,   60,  178,  178,  110,   62,  178,
      178,  178,  178,  178,  178,  178,  178,   64,   65,  178,
      178,  178,   68,   69,  178,  178,  178,  178,  178,  120,
      178,  178,  178,   78,  178,  178,  178,  178,    4,  178,
      178,  178,  178,  178,  178,  178,   86,  178,  178,  178,
      178,   90,   95,   26,   28,  178,  178,  178,   34,  178,
      178,  178,   38,  178,  116,    3,   41,  178,  178,   47,
       50,  117,   51,  178,  178,  178,  178,  178,   61,  178,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  178,
      178,  178,   70,   71,  178,  178,   75,   76,   77,   79,

      178,  178,  178,  178,  108,   82,  178,  105,   84,  178,
      178,  178,   18,  178,   17,   27,  178,  178,   91,  178,
      178,  178,  178,   42,  178,   56,  178,  178,  112,  178,
      178,  178,  178,  178,  178,  178,  178,   92,  114,  178,
      178,  178,  178,  178,  178,  178,   87,   80,  178,  178,
      178,   85,  178,  178,   29,   32,  178,   36,   37,  178,
      178,  178,   55,  178,  178,  111,  178,  178,  178,  178,
      178,  178,  113,  178,  178,  178,  178,   88,  178,  178,
      104,  178,  178,  178,   30,  178,  178,  178,    5,   89,
      178,  178,  178,  109,  178,  107,  178,   66,  178,  178,

      178,   97,   81,   96,  139,  178,  131,  178,  178,  178,
      115,  178,  178,  178,  178,  132,  178,  178,  178,  178,
      178,  178,  106,  178,   67,  135,  178,  178,  178,  178,
      178,  140,  178,  178,  178,  178,  178,  178,  178,  137,
      178,  136,  178,  178,  178,  178,  134,  178,  178,  138,
      133,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    6,    7,
        8,    9,   10,   11,   12,   13,   14,   15,   15,   15,
       15,   15,   15,   15,   15,   15,   15,    1,   16,   17,
       18,   19,    1,   20,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,    1,   48,   49,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[76] =
    {   0,
        1,    1,    2,    1,    3,    4,    1,    1,    1,    1,
        1,    1,    1,    1,    5,    1,    1,    1,    1,    1,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    2,    6,    7,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6
    } ;

static yyconst flex_int16_t yy_base[665] =
    {   0,
        0,    0,   73,   74,   77,   78,   79,   82, 1210, 1207,
     1215, 1310,   84,  631, 1310, 1310, 1310, 1310,  584, 1310,
     1310, 1310,  582,  583,   76, 1310,   74, 1310,  368,    0,
       71,   69,  116,  164,   75,  120,   50,   85,  133,   76,
       83,  121,  182,  112,  174,  124,    0,  198,  242,  222,
      129,  148,  181,  132, 1310,    0, 1310,  247,    0, 1310,
      275,    0, 1310, 1310,  359,   93, 1310, 1310,  205,  357,
      210,  240,   85, 1310, 1310, 1310,    0,    0,  139,  282,
      172,  186,  220,  261,  194,    0,  222,  270,  287,  268,
      263,  278,  326,  269,  280,  290,  312,  300,  316,  330,

      316,  310,  311,  319,  320,  319,  329,  357,    0,  335,
      339,  377,  368,  332,  380,  343,  345,  367,  384,    0,
      361,  369,  386,  381,  386,  388,  402,  397,  386,  401,
      403,  402,  408,  418,  412,  428,  434,  433,  432,  426,
      288,  440,  437,  437,  433,  450,  451,  443,  458,    0,
     1310, 1310, 1310, 1310, 1310, 1310,    0, 1310, 1310, 1310,
     1310, 1310, 1310,    0, 1310,   87, 1310,  103,  316,  314,
        0,    0,  448,    0,    0,    0,    0,  452,  439,  458,
      471,  461,  470,  459,  458,  467,  481,    0,  492,    0,
      478,  487,  475,  492,  478,  497,  484,  491,  500,  236,

      498,  504,  493,  501,  502,  514,  504,  506,  499,  516,
      509,  526,  524,  530,  532,  535,  525,  533,  547,  532,
      548,  546,  551,    0,  548,  543,  554,    0,  543,    0,
      588,  553,  562,  565,  566,  555,  575,  572,  572,  576,
      581,  582,  581,  593,    0,  580,  592,  608,  602,  606,
      596,  600,    0,  609,  609,  620,  603,  644,  616,  628,
      633,  229,  618,  653,  618,  635,  226,  628,  253,  251,
      239,  234,  626,  645,  656,  650,  647,    0,    0,    0,
      653,  647,  649,  669,  652,  660,  654,  672,  661,  672,
      671,    0,    0,    0,  671,  675,  675,  672,  696,  178,

      695,  684,    0,    0,  689,  693,  697,  687,  701,  696,
      698,  712,    0,    0,    0,  708,    0,    0,  702,    0,
      702,  706,  720,  719,  705,  726,  727,  726,  725,  728,
        0,  723,  729,  731,    0,  738,  746,  752,    0,    0,
      742,  759,  751,  755,  766,    0,  759,    0,  760,  754,
      766,  757,  775,    0,  762,  773,  775,  764,  774,  770,
      770,  785,  790,  788,  794,    0,    0,  800,  794,    0,
      782,  173,  808,  795,  795,  807,    0,  818,  824,  818,
      828,  825,  156,  823,  819,  830,  817,  834,  820,  822,
      834,  831,    0,    0,    0,  839,  835,    0,  843,    0,

      831,  848,  838,  841,    0,  850,  840,    0,    0,  850,
      853,  850,  865,  865,  876,  869,  876,  882,    0,  876,
      870,  872,    0,    0,  872,  891,  877,  889,  890,    0,
      882,  884,  886,  886,  886,  895,  910,  900,    0,  895,
      913,  920,  911,  905,  915,  930,    0,  935,  932,  924,
      927,    0,    0,  924,    0,  926,  933,  936,    0,  931,
      949,  951,    0,  935,    0,    0,    0,  942,  942,    0,
        0,    0,    0,  941,  956,  961,  956,  955,    0,  949,
      962,  953,  957,  971,  122,  116,  976,  977,  977,  978,
      970,  981,    0,    0,  989,  983,    0,    0,    0,    0,

      998,  981,  985, 1002,    0,    0,  987,    0,    0, 1006,
      991, 1005,    0,  992,    0,    0, 1009, 1010,    0, 1016,
     1014, 1000, 1009,    0, 1004,    0, 1022, 1015,    0, 1015,
      112, 1026, 1025, 1025, 1020, 1039, 1027,    0,    0, 1033,
     1037, 1043, 1055, 1034, 1041, 1049,    0,    0, 1059, 1057,
     1049,    0, 1061, 1051, 1053,    0, 1059,    0,    0, 1066,
     1064, 1058,    0, 1059, 1066,    0, 1063, 1076, 1067, 1088,
     1080, 1094,    0, 1083, 1089, 1098,  108,    0, 1089, 1092,
        0, 1086, 1110, 1103,    0, 1106, 1105, 1119,    0,    0,
     1107, 1118, 1119,    0, 1109,    0, 1122,    0, 1111, 1113,

     1114,    0,    0,    0,    0, 1126,    0, 1131, 1125, 1120,
        0, 1116, 1135, 1136, 1127,    0, 1133, 1139,   74, 1146,
     1143,   68,    0, 1158,    0,    0, 1158, 1164, 1143, 1170,
     1154,    0,   60, 1174, 1172, 1166, 1163, 1177, 1163,    0,
     1177,    0, 1186, 1187, 1163, 1171,    0, 1188, 1193,    0,
        0, 1310, 1243, 1250, 1257, 1264,   84, 1267, 1273, 1280,
     1287, 1294, 1301, 1303
    } ;

static yyconst flex_int16_t yy_def[665] =
    {   0,
      652,    1,  653,  653,  654,  654,  655,  655,  656,  656,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  657,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  652,  659,  652,  660,  661,  652,
      662,  663,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  664,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  659,
      652,  652,  652,  652,  652,  652,  661,  652,  652,  652,
      652,  652,  652,  663,  652,  652,  652,  652,  652,  652,
      664,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  652,  652,
      652,  652,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,

      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,  658,  658,  658,  658,  658,  658,  658,  658,  658,
      658,    0,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652
    } ;

static yyconst flex_int16_t yy_nxt[1386] =
    {   0,
       12,   13,   13,   14,   15,   16,   17,   18,   19,   20,
       21,   22,   23,   24,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   47,   54,   47,   12,   47,   55,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,   50,   51,
       52,   53,   47,   54,   47,   12,   12,   57,   57,   12,
       12,   12,   60,   60,   12,   66,   66,  105,   71,   77,
       72,   74,   75,   83,   66,   66,  169,   84,  269,  170,

       73,  270,   79,   85,   80,  106,   98,  638,   99,   81,
      110,  111,   82,   86,  271,  631,  105,  272,  100,   58,
       58,  628,   83,   61,   61,   12,   84,   63,   12,   73,
       63,   79,   85,   80,  106,   98,   87,   99,   81,  110,
      111,   82,   86,   88,  124,  112,  118,  100,  101,  113,
       89,  102,  119,   90,   91,  601,  149,  103,  107,  565,
      104,  125,  142,  537,  143,   87,  108,  144,  145,  536,
      172,  109,   88,  124,  112,  118,  146,  101,  113,   89,
      102,  119,   90,   91,   92,  149,  103,  107,   93,  104,
      125,  142,   94,  143,  176,  108,  144,  145,   95,  172,

      109,   96,  114,  460,   97,  146,  115,  120,  147,  148,
      116,  121,  177,   92,  122,  123,  117,   93,  126,   69,
      450,   94,  127,  176,   69,  392,  128,   95,  182,  166,
       96,  114,  129,   97,  168,  115,  120,  147,  148,  116,
      121,  177,  138,  122,  123,  117,  178,  126,  272,  139,
      140,  127,   71,  272,   72,  128,  141,  182,  166,  179,
      183,  129,  130,  168,   73,  270,  131,  270,  152,  132,
      133,  138,  153,  369,  134,  178,  362,  135,  139,  140,
      154,  136,  137,  295,  155,  141,  156,  180,  179,  183,
      184,  130,  187,   73,  181,  131,  159,  152,  132,  133,

      160,  153,  173,  134,  188,  174,  135,  195,  161,  154,
      136,  137,  162,  155,  163,  156,  180,  189,  185,  184,
      196,  187,  190,  181,  197,  159,  175,  186,  170,  160,
      170,  173,  198,  188,  174,  258,  195,  161,  199,  200,
      205,  162,  201,  163,  206,  207,  189,  185,  191,  196,
      208,  190,  202,  197,  209,  175,  186,  192,  203,  193,
      210,  198,  211,  217,  194,  204,  167,  199,  200,  205,
      218,  201,  165,  206,  207,  224,  228,  191,  229,  208,
      212,  202,  213,  209,  234,   76,  192,  203,  193,  210,
      214,  211,  217,  194,  204,  215,  216,  219,  221,  218,

      222,  223,  220,  225,  224,  228,  230,  229,  235,  212,
      236,  213,  226,  234,  231,  232,  233,  227,  237,  214,
      238,  239,  240,  241,  215,  216,  219,  221,  242,  222,
      223,  220,  225,  243,  244,  230,  246,  235,  249,  236,
      247,  226,  245,  250,  232,  233,  227,  237,  251,  238,
      239,  240,  241,  248,  254,  252,  255,  242,  256,  257,
      261,  262,  243,  244,  263,  246,  253,  249,  259,  247,
      264,  245,  250,  260,  265,  266,  267,  251,  268,  273,
      274,  275,  248,  254,  252,  255,  276,  256,  257,  261,
      262,  277,  278,  263,  279,  253,  280,  259,  281,  264,

      282,  283,  260,  265,  266,  267,  286,  268,  273,  274,
      275,  287,  284,  288,  289,  276,  285,  290,  291,  292,
      277,  278,  293,  279,  294,  280,  296,  281,  297,  282,
      283,  298,  299,  301,  302,  286,  303,  304,  300,  305,
      287,  284,  288,  289,  306,  285,  290,  291,  292,  307,
      308,  293,  309,  294,  310,  296,  311,  297,  314,  312,
      298,  299,  301,  302,  315,  303,  304,  300,  305,  313,
      316,  317,  318,  306,  319,  320,  321,  322,  307,  308,
      323,  309,  324,  310,  331,  311,  332,  314,  312,  333,
      334,   70,  335,  315,  338,  336,   69,   68,  313,  316,

      317,  318,  339,  319,  320,  321,  322,  340,  341,  323,
      342,  324,  325,  331,  337,  332,  344,  345,  333,  334,
      326,  335,  346,  338,  336,  327,  328,  347,  329,  343,
      330,  339,  348,  349,  350,  351,  340,  341,  352,  342,
      353,  325,  354,  337,  355,  344,  345,  356,   67,  326,
      359,  346,  360,  361,  327,  328,  347,  329,  363,  330,
      366,  348,  349,  350,  351,  370,  357,  352,  367,  353,
      371,  354,  368,  355,  364,  365,  356,  358,  372,  359,
      373,  360,  361,  374,  375,  376,  377,  363,  378,  366,
      379,  380,  381,  382,  370,  357,  383,  367,  384,  371,

      385,  368,  386,  364,  365,  387,  358,  372,  388,  373,
      389,  390,  374,  375,  376,  377,  391,  378,  393,  379,
      380,  381,  382,  394,  395,  383,  396,  384,  397,  385,
      398,  386,  399,  400,  387,  401,  404,  388,  402,  389,
      390,  405,  406,  407,  408,  391,  409,  393,  410,  403,
      411,  412,  394,  395,  413,  396,  416,  397,  414,  398,
      417,  399,  400,  415,  401,  404,  418,  402,  419,  420,
      405,  406,  407,  408,  421,  409,  422,  410,  403,  411,
      412,  423,  424,  413,  425,  416,  426,  414,  427,  417,
      428,  429,  415,  430,  431,  418,  433,  419,  420,  434,

      435,  436,  437,  421,  438,  422,  432,  439,  440,  441,
      423,  424,  442,  425,  444,  426,  445,  427,  443,  428,
      429,  446,  430,  431,  447,  433,  448,  449,  434,  435,
      436,  437,  451,  438,  452,  432,  439,  440,  441,  453,
      454,  442,  455,  444,  456,  445,  457,  443,  458,  459,
      446,  461,  462,  447,  463,  448,  449,  464,  465,  466,
      467,  451,  468,  452,  469,  470,  471,  472,  453,  454,
      473,  455,  474,  456,  477,  457,  475,  458,  459,  476,
      461,  462,  478,  463,  479,  480,  464,  465,  466,  467,
      481,  468,  482,  469,  470,  471,  472,  483,  484,  473,

      485,  474,  486,  477,  487,  475,  488,  489,  476,  490,
      491,  478,  492,  479,  480,  493,  494,  495,  496,  481,
      497,  482,  498,  499,  500,  501,  483,  484,  502,  485,
      503,  486,  504,  487,  505,  488,  489,  506,  490,  491,
      507,  492,  508,  509,  493,  494,  495,  496,  510,  497,
      511,  498,  499,  500,  501,  512,  513,  502,  514,  503,
      515,  504,  516,  505,  517,  518,  506,  519,  520,  507,
      521,  508,  509,  522,  523,  524,  525,  510,  526,  511,
      527,  528,  529,  530,  512,  513,  531,  514,  532,  515,
      533,  516,  534,  517,  518,  535,  519,  520,  538,  521,

      539,  540,  522,  523,  524,  525,  541,  526,  542,  527,
      528,  529,  530,  543,  544,  531,  545,  532,  546,  533,
      547,  534,  548,  549,  535,  550,  551,  538,  552,  539,
      540,  553,  554,  555,  556,  541,  557,  542,  558,  559,
      560,  561,  543,  544,  562,  545,  563,  546,  564,  547,
      566,  548,  549,  567,  550,  551,  568,  552,  569,  572,
      553,  554,  555,  556,  573,  557,  570,  558,  559,  560,
      561,  574,  571,  562,  575,  563,  576,  564,  577,  566,
      578,  579,  567,  580,  581,  568,  582,  569,  572,  583,
      584,  585,  586,  573,  587,  570,  588,  589,  590,  591,

      574,  571,  592,  575,  593,  576,  594,  577,  595,  578,
      579,  596,  580,  581,  597,  582,  598,  599,  583,  584,
      585,  586,  600,  587,  602,  588,  589,  590,  591,  603,
      604,  592,  605,  593,  606,  594,  607,  595,  608,  609,
      596,  610,  611,  597,  612,  598,  599,  613,  614,  615,
      616,  600,  617,  602,  618,  619,  620,  621,  603,  604,
      622,  605,  623,  606,  624,  607,  625,  608,  609,  626,
      610,  611,  627,  612,  629,  630,  613,  614,  615,  616,
      632,  617,  633,  618,  619,  620,  621,  634,  635,  622,
      636,  623,  637,  624,  639,  625,  640,  641,  626,  642,

      643,  627,  644,  629,  630,  645,  646,  647,  648,  632,
      649,  633,  650,  651,  652,   65,  634,  635,   65,  636,
      652,  637,  652,  639,  652,  640,  641,  652,  642,  643,
      652,  644,  652,  652,  645,  646,  647,  648,  652,  649,
      652,  650,  651,   56,   56,   56,   56,   56,   56,   56,
       59,   59,   59,   59,   59,   59,   59,   62,   62,   62,
       62,   62,   62,   62,   64,   64,   64,   64,   64,   64,
       64,   78,   78,  150,  652,  652,  150,  150,  150,  150,
      151,  151,  151,  151,  151,  151,  151,  157,  652,  157,
      652,  157,  157,  157,  158,  158,  158,  158,  158,  158,

      158,  164,  652,  164,  164,  164,  164,  171,  171,   11,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652
    } ;

static yyconst flex_int16_t yy_chk[1386] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    4,    3,    4,    5,
        6,    7,    5,    6,    8,   13,   13,   37,   25,  657,
       25,   27,   27,   32,   66,   66,   73,   32,  166,   73,

       25,  166,   31,   32,   31,   38,   35,  633,   35,   31,
       40,   41,   31,   32,  168,  622,   37,  168,   35,    3,
        4,  619,   32,    5,    6,    7,   32,    7,    8,   25,
        8,   31,   32,   31,   38,   35,   33,   35,   31,   40,
       41,   31,   32,   33,   46,   42,   44,   35,   36,   42,
       33,   36,   44,   33,   33,  577,   54,   36,   39,  531,
       36,   46,   51,  486,   51,   33,   39,   51,   52,  485,
       79,   39,   33,   46,   42,   44,   52,   36,   42,   33,
       36,   44,   33,   33,   34,   54,   36,   39,   34,   36,
       46,   51,   34,   51,   81,   39,   51,   52,   34,   79,

       39,   34,   43,  383,   34,   52,   43,   45,   53,   53,
       43,   45,   82,   34,   45,   45,   43,   34,   48,   69,
      372,   34,   48,   81,   71,  300,   48,   34,   85,   69,
       34,   43,   48,   34,   71,   43,   45,   53,   53,   43,
       45,   82,   50,   45,   45,   43,   83,   48,  272,   50,
       50,   48,   72,  271,   72,   48,   50,   85,   69,   83,
       87,   48,   49,   71,   72,  270,   49,  269,   58,   49,
       49,   50,   58,  267,   49,   83,  262,   49,   50,   50,
       58,   49,   49,  200,   58,   50,   58,   84,   83,   87,
       88,   49,   90,   72,   84,   49,   61,   58,   49,   49,

       61,   58,   80,   49,   91,   80,   49,   94,   61,   58,
       49,   49,   61,   58,   61,   58,   84,   92,   89,   88,
       95,   90,   92,   84,   96,   61,   80,   89,  170,   61,
      169,   80,   97,   91,   80,  141,   94,   61,   98,   99,
      101,   61,   99,   61,  102,  103,   92,   89,   93,   95,
      104,   92,  100,   96,  105,   80,   89,   93,  100,   93,
      106,   97,  107,  110,   93,  100,   70,   98,   99,  101,
      111,   99,   65,  102,  103,  114,  116,   93,  117,  104,
      108,  100,  108,  105,  121,   29,   93,  100,   93,  106,
      108,  107,  110,   93,  100,  108,  108,  112,  113,  111,

      113,  113,  112,  115,  114,  116,  118,  117,  122,  108,
      123,  108,  115,  121,  118,  119,  119,  115,  124,  108,
      125,  126,  127,  128,  108,  108,  112,  113,  129,  113,
      113,  112,  115,  130,  131,  118,  132,  122,  134,  123,
      133,  115,  131,  135,  119,  119,  115,  124,  136,  125,
      126,  127,  128,  133,  138,  137,  139,  129,  140,  140,
      143,  144,  130,  131,  145,  132,  137,  134,  142,  133,
      145,  131,  135,  142,  146,  147,  148,  136,  149,  173,
      178,  179,  133,  138,  137,  139,  180,  140,  140,  143,
      144,  181,  182,  145,  183,  137,  184,  142,  185,  145,

      186,  187,  142,  146,  147,  148,  191,  149,  173,  178,
      179,  192,  189,  193,  194,  180,  189,  195,  196,  197,
      181,  182,  198,  183,  199,  184,  201,  185,  202,  186,
      187,  203,  204,  205,  206,  191,  207,  208,  204,  209,
      192,  189,  193,  194,  210,  189,  195,  196,  197,  211,
      212,  198,  213,  199,  214,  201,  215,  202,  217,  216,
      203,  204,  205,  206,  218,  207,  208,  204,  209,  216,
      219,  220,  221,  210,  222,  223,  225,  226,  211,  212,
      227,  213,  229,  214,  232,  215,  233,  217,  216,  234,
      235,   24,  236,  218,  238,  237,   23,   19,  216,  219,

      220,  221,  239,  222,  223,  225,  226,  240,  241,  227,
      242,  229,  231,  232,  237,  233,  243,  244,  234,  235,
      231,  236,  246,  238,  237,  231,  231,  247,  231,  242,
      231,  239,  248,  249,  250,  251,  240,  241,  252,  242,
      254,  231,  255,  237,  256,  243,  244,  257,   14,  231,
      259,  246,  260,  261,  231,  231,  247,  231,  263,  231,
      265,  248,  249,  250,  251,  268,  258,  252,  266,  254,
      273,  255,  266,  256,  264,  264,  257,  258,  274,  259,
      275,  260,  261,  276,  277,  281,  282,  263,  283,  265,
      284,  285,  286,  287,  268,  258,  288,  266,  289,  273,

      290,  266,  291,  264,  264,  295,  258,  274,  296,  275,
      297,  298,  276,  277,  281,  282,  299,  283,  301,  284,
      285,  286,  287,  302,  305,  288,  306,  289,  307,  290,
      308,  291,  309,  310,  295,  311,  316,  296,  312,  297,
      298,  319,  321,  322,  323,  299,  324,  301,  325,  312,
      326,  327,  302,  305,  328,  306,  330,  307,  329,  308,
      332,  309,  310,  329,  311,  316,  333,  312,  334,  336,
      319,  321,  322,  323,  337,  324,  338,  325,  312,  326,
      327,  341,  342,  328,  343,  330,  344,  329,  345,  332,
      347,  349,  329,  350,  351,  333,  352,  334,  336,  353,

      355,  356,  357,  337,  358,  338,  351,  359,  360,  361,
      341,  342,  362,  343,  363,  344,  364,  345,  362,  347,
      349,  365,  350,  351,  368,  352,  369,  371,  353,  355,
      356,  357,  373,  358,  374,  351,  359,  360,  361,  375,
      376,  362,  378,  363,  379,  364,  380,  362,  381,  382,
      365,  384,  385,  368,  386,  369,  371,  387,  388,  389,
      390,  373,  391,  374,  392,  396,  397,  399,  375,  376,
      401,  378,  402,  379,  404,  380,  403,  381,  382,  403,
      384,  385,  406,  386,  407,  410,  387,  388,  389,  390,
      411,  391,  412,  392,  396,  397,  399,  413,  414,  401,

      415,  402,  416,  404,  417,  403,  418,  420,  403,  421,
      422,  406,  425,  407,  410,  426,  427,  428,  429,  411,
      431,  412,  432,  433,  434,  435,  413,  414,  436,  415,
      437,  416,  438,  417,  440,  418,  420,  441,  421,  422,
      442,  425,  443,  444,  426,  427,  428,  429,  445,  431,
      446,  432,  433,  434,  435,  448,  449,  436,  450,  437,
      451,  438,  454,  440,  456,  457,  441,  458,  460,  442,
      461,  443,  444,  462,  464,  468,  469,  445,  474,  446,
      475,  476,  477,  478,  448,  449,  480,  450,  481,  451,
      482,  454,  483,  456,  457,  484,  458,  460,  487,  461,

      488,  489,  462,  464,  468,  469,  490,  474,  491,  475,
      476,  477,  478,  492,  495,  480,  496,  481,  501,  482,
      502,  483,  503,  504,  484,  507,  510,  487,  511,  488,
      489,  512,  514,  517,  518,  490,  520,  491,  521,  522,
      523,  525,  492,  495,  527,  496,  528,  501,  530,  502,
      532,  503,  504,  533,  507,  510,  534,  511,  535,  537,
      512,  514,  517,  518,  540,  520,  536,  521,  522,  523,
      525,  541,  536,  527,  542,  528,  543,  530,  544,  532,
      545,  546,  533,  549,  550,  534,  551,  535,  537,  553,
      554,  555,  557,  540,  560,  536,  561,  562,  564,  565,

      541,  536,  567,  542,  568,  543,  569,  544,  570,  545,
      546,  571,  549,  550,  572,  551,  574,  575,  553,  554,
      555,  557,  576,  560,  579,  561,  562,  564,  565,  580,
      582,  567,  583,  568,  584,  569,  586,  570,  587,  588,
      571,  591,  592,  572,  593,  574,  575,  595,  597,  599,
      600,  576,  601,  579,  606,  608,  609,  610,  580,  582,
      612,  583,  613,  584,  614,  586,  615,  587,  588,  617,
      591,  592,  618,  593,  620,  621,  595,  597,  599,  600,
      624,  601,  627,  606,  608,  609,  610,  628,  629,  612,
      630,  613,  631,  614,  634,  615,  635,  636,  617,  637,

      638,  618,  639,  620,  621,  641,  643,  644,  645,  624,
      646,  627,  648,  649,   11,   10,  628,  629,    9,  630,
        0,  631,    0,  634,    0,  635,  636,    0,  637,  638,
        0,  639,    0,    0,  641,  643,  644,  645,    0,  646,
        0,  648,  649,  653,  653,  653,  653,  653,  653,  653,
      654,  654,  654,  654,  654,  654,  654,  655,  655,  655,
      655,  655,  655,  655,  656,  656,  656,  656,  656,  656,
      656,  658,  658,  659,    0,    0,  659,  659,  659,  659,
      660,  660,  660,  660,  660,  660,  660,  661,    0,  661,
        0,  661,  661,  661,  662,  662,  662,  662,  662,  662,

      662,  663,    0,  663,  663,  663,  663,  664,  664,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652,  652,  652,  652,  652,  652,
      652,  652,  652,  652,  652
    } ;

static yyconst flex_int16_t yy_rule_linenum[180] =
    {   0,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   64,   65,   66,   67,
       68,   69,   70,   71,   72,   73,   74,   75,   76,   77,
       78,   79,   80,   81,   82,   83,   84,   85,   86,   87,
       88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
       98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
      108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
      118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
      128,  129,  130,  131,  132,  133,  134,  135,  136,  137,

      138,  139,  140,  141,  142,  143,  144,  145,  146,  147,
      148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
      158,  159,  160,  161,  162,  163,  164,  165,  166,  167,
      168,  169,  170,  171,  172,  173,  174,  175,  176,  177,
      178,  179,  180,  181,  182,  183,  184,  185,  186,  187,
      188,  189,  191,  194,  201,  205,  209,  210,  211,  212,
      213,  214,  215,  221,  222,  226,  227,  228,  229,  230,
      231,  232,  238,  239,  243,  249,  250,  251,  252
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
#line 7 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
	#include "sql_parser.hpp"	//包含由parser.l生成的头文件
	#include "sql_scanner.h" 	//包含yyFlexLexer子类的头文件
	#include "location.hh" 	//包含位置调试信息头文件
	#include <string>
	# define YY_USER_ACTION  loc.columns (yyleng);
	#define yyterminate() return CatDB::SqlParser::make_END(loc);
	# undef yywrap
  	# define yywrap() 1
	#define YY_NO_UNISTD_H




#line 1053 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

#define INITIAL 0
#define beg_str 1
#define beg_str2 2
#define beg_ident 3
#define beg_comment 4

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#include <unistd.h>
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */
/* %if-c-only */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif End reentrant structures and macros. */
/* %if-bison-bridge */
/* %endif */
/* %not-for-header */

/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */

/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */
/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define ECHO LexerOutput( yytext, yyleng )
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
\
/* %if-c++-only C++ definition \ */\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
/* %endif */
/* %if-c++-only */
#define YY_FATAL_ERROR(msg) LexerError( msg )
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */

/* %ok-for-header */

/* %not-for-header */

/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */
/* %endif */
/* %if-c++-only C++ definition */
#define YY_DECL int yyFlexLexer::yylex()
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	YY_USER_ACTION

/* %not-for-header */

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
/* %% [7.0] user's declarations go here */
#line 36 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"


#line 1217 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyin = & std::cin;
/* %endif */

		if ( ! yyout )
/* %if-c-only */
/* %endif */
/* %if-c++-only */
			yyout = & std::cout;
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 653 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1310 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				std::cerr << "--scanner backing up\n";
			else if ( yy_act < 180 )
				std::cerr << "--accepting rule at line " << yy_rule_linenum[yy_act] <<
				         "(\"" << yytext << "\")\n";
			else if ( yy_act == 180 )
				std::cerr << "--accepting default rule (\"" << yytext << "\")\n";
			else if ( yy_act == 181 )
				std::cerr << "--(end of buffer or a NUL)\n";
			else
				std::cerr << "--EOF (start condition " << YY_START << ")\n";
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 38 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BOOL(loc); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 39 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NULLX(loc); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 40 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXCEPT(loc); }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 41 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UNION(loc); }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 42 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTERSECT(loc); }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 43 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OR(loc); }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 44 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AND(loc); }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 45 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NOT(loc); }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 46 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_NE(loc); }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 47 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_NE(loc); }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 48 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_GE(loc); }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 49 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_GT(loc); }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 50 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_EQ(loc); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 51 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_LT(loc); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 52 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CMP_LE(loc); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 53 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LIKE(loc); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 54 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BETWEEN(loc); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 55 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ANALYZE(loc); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 56 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IN(loc); }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 57 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IS(loc); }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 58 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ANY(loc); }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 59 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ALL(loc); }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 60 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AS(loc); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 61 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ASC(loc); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 62 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BY(loc); }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 63 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COLUMN(loc); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 64 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COLUMNS(loc); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 65 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CREATE(loc); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 66 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATABASE(loc); }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 67 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATABASES(loc); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 68 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATE(loc); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 69 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DATETIME(loc); }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 70 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DAY(loc); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 71 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DELETE(loc); }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 72 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DESC(loc); }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 73 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DESCRIBE(loc); }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 74 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DISTINCT(loc); }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 75 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DOUBLE(loc); }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 76 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DROP(loc); }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 77 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DUAL(loc); }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 78 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXISTS(loc); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 79 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXPLAIN(loc); }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 80 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FLOAT(loc); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 81 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FROM(loc); }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 82 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FULL(loc); }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 83 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_GROUP(loc); }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 84 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_HAVING(loc); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 85 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_KILL(loc); }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 86 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IF(loc); }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 87 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IFNULL(loc); }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 88 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INSERT(loc); }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 89 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INDEX(loc); }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 90 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INNER(loc); }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 91 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INT(loc); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 92 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTERVAL(loc); }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 93 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTEGER(loc); }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 94 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INTO(loc); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 95 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_JOIN(loc); }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 96 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LEFT(loc); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 97 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LIMIT(loc); }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 98 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MEMORY(loc); }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 99 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MONTH(loc); }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 100 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ON(loc); }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 101 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ORDER(loc); }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 102 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OUTER(loc); }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 103 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PARTITION(loc); }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 104 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PROCESSLIST(loc); }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 105 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RIGHT(loc); }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 106 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ROWID(loc); }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 107 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SAMPLE(loc); }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 108 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SELECT(loc); }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 109 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SET(loc); }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 110 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SHOW(loc); }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 111 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SIZE(loc); }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 112 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_STATIS(loc); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 113 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_STATUS(loc); }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 114 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SUBSTR(loc); }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 115 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TABLE(loc); }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 116 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TABLES(loc); }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 117 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TO_CHAR(loc); }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 118 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TO_NUMBER(loc); }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 119 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UPDATE(loc); }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 120 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USING(loc); }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 121 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VALUES(loc); }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 122 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VARCHAR(loc); }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 123 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WHERE(loc); }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 124 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TINYINT(loc); }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 125 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SMALLINT(loc); }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 126 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MEDIUMINT(loc); }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 127 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BIGINT(loc); }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 128 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DECIMAL(loc); }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 129 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMERIC_SYM(loc); }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 130 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_REAL(loc); }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 131 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CHAR(loc); }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 132 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BINARY(loc); }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 133 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VARBINARY(loc); }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 134 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TIMESTAMP_SYM(loc); }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 135 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_TIME(loc); }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 136 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CASE(loc); }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 137 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WHEN(loc); }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 138 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_THEN(loc); }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 139 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ELSE(loc); }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 140 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_END_SYM(loc); }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 141 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USE_HASH(loc); }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 142 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_USE_NL(loc); }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 143 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_USE_HASH(loc); }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 144 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_USE_NL(loc); }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 145 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_UNNEST(loc); }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 146 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_UNNEST(loc); }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 147 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MERGE(loc); }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 148 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_MERGE(loc); }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 149 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LEADING(loc); }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 150 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PARALLEL(loc); }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 151 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ORDERED(loc); }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 152 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_REWRITE(loc); }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 153 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ENGINE(loc); }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 154 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_INFILE(loc); }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 155 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_FIELD(loc); }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 156 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LINE(loc); }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 157 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SPLIT(loc); }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 158 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_CSV(loc); }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 159 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_YEAR(loc); }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 160 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_VIEW(loc); }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 161 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SUM(loc); }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 162 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COUNT(loc); }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 163 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_AVG(loc); }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 164 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MIN(loc); }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 165 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MAX(loc); }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 166 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RANK(loc); }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 167 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_OVER(loc); }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 168 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DENSE_RANK(loc); }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 169 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_ROW_NUMBER(loc); }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 170 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BEGIN_OUTLINE_DATA(loc); }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 171 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_END_OUTLINE_DATA(loc); }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 172 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SIMPLIFY_SQ(loc); }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 173 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_SIMPLIFY_SQ(loc); }
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 174 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_EXPR_NORMALIZE(loc); }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 175 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_EXPR_NORMALIZE(loc); }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 176 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_WIN_MAGIC(loc); }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 177 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NO_WIN_MAGIC(loc); }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 178 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_LP(loc); }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 179 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_RP(loc); }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 180 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_COMMA(loc); }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 181 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PERIOD(loc); }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 182 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_SEMICOLON(loc); }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 183 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_PLUS(loc); }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 184 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MINUS(loc); }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 185 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_MUL(loc); }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 186 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_DIV(loc); }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 187 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_BEGIN_HINT(loc); }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 188 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_END_HINT(loc); }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 189 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_str);}
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 191 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(beg_comment);		
							}
	YY_BREAK
case 154:
/* rule 154 can match eol */
YY_RULE_SETUP
#line 194 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								;
							}
	YY_BREAK
case YY_STATE_EOF(beg_comment):
#line 198 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								yyterminate();
							}
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 201 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(INITIAL);
							}
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 205 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
								BEGIN(INITIAL);
								return CatDB::SqlParser::make_STRING(parse_str,loc);
							}
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 209 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 210 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 211 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 212 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 213 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 162:
/* rule 162 can match eol */
YY_RULE_SETUP
#line 214 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 215 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						tmp_ptr = yytext;
						while( *tmp_ptr )
							parse_str += *tmp_ptr++;
					}
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 221 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_str2);}
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 222 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						BEGIN(INITIAL);
						return CatDB::SqlParser::make_STRING(parse_str,loc);
					}
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 226 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\n';
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 227 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\t';
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 228 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\r';
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 229 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\b';
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 230 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += '\f';
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 231 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
parse_str += yytext[1];
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 232 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						tmp_ptr = yytext;
						while( *tmp_ptr )
							parse_str += *tmp_ptr++;
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 238 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{parse_str.clear();BEGIN(beg_ident);}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 239 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						BEGIN(INITIAL);
						return CatDB::SqlParser::make_IDENT(parse_str,loc);
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 243 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{
						tmp_ptr = yytext;
						while( *tmp_ptr )
							parse_str += *tmp_ptr++;
					}
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 249 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"

	YY_BREAK
case 177:
YY_RULE_SETUP
#line 250 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_NUMERIC(yytext,loc);	}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 251 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_IDENT(yytext,loc);	} 
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 252 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ return CatDB::SqlParser::make_QB_NAME_IDENT(yytext+1,loc);	} 
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(beg_str):
case YY_STATE_EOF(beg_str2):
case YY_STATE_EOF(beg_ident):
#line 253 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
{ yyterminate(); }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 254 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"
ECHO;
	YY_BREAK
#line 2274 "/home/lighthouse/CatDB/sql/parser/sql_scanner.cpp"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 0;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = NULL;

	yy_buffer_stack = 0;
	yy_buffer_stack_top = 0;
	yy_buffer_stack_max = 0;

	yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	CatDB_free(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
	CatDB_free(yy_buffer_stack  );
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
int yyFlexLexer::yy_get_next_buffer()
/* %endif */
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					CatDB_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CatDB_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */

/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_get_previous_state()
/* %endif */
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 653 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
/* %endif */
{
	register int yy_is_jam;
    /* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 653 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 652);

		return yy_is_jam ? 0 : yy_current_state;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyunput( int c, register char* yy_bp)
/* %endif */
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

/* %% [18.0] update yylineno here */

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}
/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yyinput()
/* %endif */
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

/* %% [19.0] update BOL and yylineno */

	return c;
}
/* %if-c-only */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yyrestart( std::istream* input_file )
/* %endif */
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
/* %endif */
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_load_buffer_state()
/* %endif */
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
/* %endif */
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) CatDB_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) CatDB_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		CatDB_free((void *) b->yy_ch_buf  );

	CatDB_free((void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )
/* %endif */

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */
/* %endif */
/* %if-c++-only */
	b->yy_is_interactive = 0;
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
/* %endif */
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
/* %endif */
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yypop_buffer_state (void)
/* %endif */
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::yyensure_buffer_stack(void)
/* %endif */
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)CatDB_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)CatDB_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_push_state( int new_state )
/* %endif */
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) CatDB_alloc(new_size  );

		else
			(yy_start_stack) = (int *) CatDB_realloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    void yyFlexLexer::yy_pop_state()
/* %endif */
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

/* %if-c-only */
/* %endif */
/* %if-c++-only */
    int yyFlexLexer::yy_top_state()
/* %endif */
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
/* %endif */
/* %if-c++-only */
void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */
/* %endif */
/* %if-reentrant */
/* %endif */
/* %endif */

/* %if-reentrant */
/* %if-bison-bridge */
/* %endif */
/* %endif if-c-only */

/* %if-c-only */
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* %if-reentrant */
/* %endif */
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *CatDB_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *CatDB_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void CatDB_free (void * ptr )
{
	free( (char *) ptr );	/* see CatDB_realloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 254 "/home/lighthouse/CatDB/sql/parser/sql_parser.l"



