

DROP DATABASE IF EXISTS TPCH

CREATE DATABASE TPCH

CREATE TABLE TPCH.NATION  ( N_NATIONKEY  INTEGER NOT NULL,
N_NAME       CHAR(25) NOT NULL,
N_REGIONKEY  INTEGER NOT NULL,
N_COMMENT    VARCHAR(152))

CREATE TABLE TPCH.REGION  ( R_REGIONKEY  INTEGER NOT NULL,
R_NAME       CHAR(25) NOT NULL,
R_COMMENT    VARCHAR(152))

CREATE TABLE TPCH.PART  ( P_PARTKEY     INTEGER NOT NULL,
P_NAME        VARCHAR(55) NOT NULL,
P_MFGR        CHAR(25) NOT NULL,
P_BRAND       CHAR(10) NOT NULL,
P_TYPE        VARCHAR(25) NOT NULL,
P_SIZE        INTEGER NOT NULL,
P_CONTAINER   CHAR(10) NOT NULL,
P_RETAILPRICE DECIMAL(15,2) NOT NULL,
P_COMMENT     VARCHAR(23) NOT NULL )

CREATE TABLE TPCH.SUPPLIER ( S_SUPPKEY     INTEGER NOT NULL,
S_NAME        CHAR(25) NOT NULL,
S_ADDRESS     VARCHAR(40) NOT NULL,
S_NATIONKEY   INTEGER NOT NULL,
S_PHONE       CHAR(15) NOT NULL,
S_ACCTBAL     DECIMAL(15,2) NOT NULL,
S_COMMENT     VARCHAR(101) NOT NULL)

CREATE TABLE TPCH.PARTSUPP ( PS_PARTKEY     INTEGER NOT NULL,
PS_SUPPKEY     INTEGER NOT NULL,
PS_AVAILQTY    INTEGER NOT NULL,
PS_SUPPLYCOST  DECIMAL(15,2)  NOT NULL,
PS_COMMENT     VARCHAR(199) NOT NULL )

CREATE TABLE TPCH.CUSTOMER ( C_CUSTKEY     INTEGER NOT NULL,
C_NAME        VARCHAR(25) NOT NULL,
C_ADDRESS     VARCHAR(40) NOT NULL,
C_NATIONKEY   INTEGER NOT NULL,
C_PHONE       CHAR(15) NOT NULL,
C_ACCTBAL     DECIMAL(15,2)   NOT NULL,
C_MKTSEGMENT  CHAR(10) NOT NULL,
C_COMMENT     VARCHAR(117) NOT NULL)

CREATE TABLE TPCH.ORDERS  ( O_ORDERKEY       INTEGER NOT NULL,
O_CUSTKEY        INTEGER NOT NULL,
O_ORDERSTATUS    CHAR(1) NOT NULL,
O_TOTALPRICE     DECIMAL(15,2) NOT NULL,
O_ORDERDATE      DATE NOT NULL,
O_ORDERPRIORITY  CHAR(15) NOT NULL,
O_CLERK          CHAR(15) NOT NULL,
O_SHIPPRIORITY   INTEGER NOT NULL,
O_COMMENT        VARCHAR(79) NOT NULL)

CREATE TABLE TPCH.LINEITEM ( L_ORDERKEY    INTEGER NOT NULL,
L_PARTKEY     INTEGER NOT NULL,
L_SUPPKEY     INTEGER NOT NULL,
L_LINENUMBER  INTEGER NOT NULL,
L_QUANTITY    DECIMAL(15,2) NOT NULL,
L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,
L_DISCOUNT    DECIMAL(15,2) NOT NULL,
L_TAX         DECIMAL(15,2) NOT NULL,
L_RETURNFLAG  CHAR(1) NOT NULL,
L_LINESTATUS  CHAR(1) NOT NULL,
L_SHIPDATE    DATE NOT NULL,
L_COMMITDATE  DATE NOT NULL,
L_RECEIPTDATE DATE NOT NULL,
L_SHIPINSTRUCT CHAR(25) NOT NULL,
L_SHIPMODE     CHAR(10) NOT NULL,
L_COMMENT      VARCHAR(44) NOT NULL)

explain /*Q1*/
select c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from
CUSTOMER,
ORDERS,
LINEITEM,
NATION
where
c_custkey = o_custkey
and l_orderkey = o_orderkey
and o_orderdate >= date '1993-08-01'
and o_orderdate < date '1993-08-01' + interval '3' month
and l_returnflag = 'R'
and c_nationkey = n_nationkey
group by
c_custkey,
c_name,
c_acctbal,
c_phone,
n_name,
c_address,
c_comment
order by
revenue desc
limit 20

Query Plan:
+--------------------------------------------------------+
| ID | OPERATOR            | NAME     | ROW COUNT | COST |
+--------------------------------------------------------+
| 0  | TOP_N SORT          |          | 1         | 18   |
| 1  |  HASH GROUP BY      |          | 1         | 18   |
| 2  |   HASH Inner JOIN   |          | 1         | 17   |
| 3  |    TABLE SCAN       | LINEITEM | 1         | 4    |
| 4  |    HASH Inner JOIN  |          | 1         | 13   |
| 5  |     TABLE SCAN      | NATION   | 1         | 4    |
| 6  |     HASH Inner JOIN |          | 1         | 8    |
| 7  |      TABLE SCAN     | CUSTOMER | 1         | 4    |
| 8  |      TABLE SCAN     | ORDERS   | 1         | 4    |
+--------------------------------------------------------+
Outputs & filters:
0 - output([customer.c_custkey], [customer.c_name], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [customer.c_acctbal], [nation.n_name], [customer.c_address], [customer.c_phone], [customer.c_comment])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount) DESC])
top_n([20])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [customer.c_custkey], [customer.c_name], [customer.c_acctbal], [nation.n_name], [customer.c_address], [customer.c_phone], [customer.c_comment])
group_by_exprs([customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [nation.n_name], [customer.c_address], [customer.c_comment])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [nation.n_name], [customer.c_address], [customer.c_comment], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
3 - output([lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_returnflag = 'R'])
access([lineitem.l_orderkey], [lineitem.l_returnflag], [lineitem.l_extendedprice], [lineitem.l_discount])
4 - output([orders.o_orderkey], [customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [nation.n_name], [customer.c_address], [customer.c_comment])
equal_join_conditions([customer.c_nationkey = nation.n_nationkey])
5 - output([nation.n_nationkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_name])
6 - output([customer.c_nationkey], [orders.o_orderkey], [customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [customer.c_address], [customer.c_comment])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
7 - output([customer.c_custkey], [customer.c_nationkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [customer.c_address], [customer.c_comment])
access([customer.c_custkey], [customer.c_nationkey], [customer.c_name], [customer.c_acctbal], [customer.c_address], [customer.c_phone], [customer.c_comment])
8 - output([orders.o_custkey], [orders.o_orderkey])
filters([orders.o_orderdate >= 1993-08-01 00:00:00], [orders.o_orderdate < DATE_ADD(1993-08-01 00:00:00, ?)])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 lineitem, (nation, (customer, orders)))
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 customer, orders)
USE_HASH(@SEL1 nation, customer, orders)
END_OUTLINE_DATA
*/

explain /*Q2*/
SELECT ps_partkey,
Sum(ps_supplycost * ps_availqty) AS value
FROM   partsupp,
supplier,
nation
WHERE  ps_suppkey = s_suppkey
AND s_nationkey = n_nationkey
AND n_name = 'MOZAMBIQUE'
GROUP  BY ps_partkey
HAVING Sum(ps_supplycost * ps_availqty) > (SELECT
Sum(ps_supplycost * ps_availqty) * 0.0001000000
FROM   partsupp,
supplier,
nation
WHERE  ps_suppkey = s_suppkey
AND s_nationkey = n_nationkey
AND n_name = 'MOZAMBIQUE')
ORDER  BY value DESC

Query Plan:
+--------------------------------------------------------+
| ID | OPERATOR            | NAME     | ROW COUNT | COST |
+--------------------------------------------------------+
| 0  | SUBQUERY EVALUATE   |          | 1         | 26   |
| 1  |  SORT               |          | 1         | 13   |
| 2  |   HASH GROUP BY     |          | 1         | 13   |
| 3  |    HASH Inner JOIN  |          | 1         | 13   |
| 4  |     TABLE SCAN      | PARTSUPP | 1         | 4    |
| 5  |     HASH Inner JOIN |          | 1         | 8    |
| 6  |      TABLE SCAN     | SUPPLIER | 1         | 4    |
| 7  |      TABLE SCAN     | NATION   | 1         | 4    |
| 8  |  SCALAR GROUP BY    |          | 1         | 13   |
| 9  |   HASH Inner JOIN   |          | 1         | 13   |
| 10 |    TABLE SCAN       | NATION   | 1         | 4    |
| 11 |    HASH Inner JOIN  |          | 1         | 8    |
| 12 |     TABLE SCAN      | PARTSUPP | 1         | 4    |
| 13 |     TABLE SCAN      | SUPPLIER | 1         | 4    |
+--------------------------------------------------------+
Outputs & filters:
0 - output([partsupp.ps_partkey], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
subquery(0) exec_params()
1 - output([partsupp.ps_partkey], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
sort_keys([SUM(partsupp.ps_supplycost * partsupp.ps_availqty) DESC])
2 - output([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)], [partsupp.ps_partkey])
group_by_exprs([partsupp.ps_partkey])
aggr_exprs([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
3 - output([partsupp.ps_partkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
equal_join_conditions([partsupp.ps_suppkey = supplier.s_suppkey])
4 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
access([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
5 - output([supplier.s_suppkey])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
6 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
7 - output([nation.n_nationkey])
filters([nation.n_name = 'MOZAMBIQUE'])
access([nation.n_nationkey], [nation.n_name])
8 - output([SUM(partsupp.ps_supplycost * partsupp.ps_availqty) * 0.0001000000])
aggr_exprs([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
9 - output([partsupp.ps_supplycost], [partsupp.ps_availqty])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
10 - output([nation.n_nationkey])
filters([nation.n_name = 'MOZAMBIQUE'])
access([nation.n_nationkey], [nation.n_name])
11 - output([supplier.s_nationkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
equal_join_conditions([partsupp.ps_suppkey = supplier.s_suppkey])
12 - output([partsupp.ps_suppkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
access([partsupp.ps_suppkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
13 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL2 nation, (partsupp, supplier))
USE_HASH(@SEL2 supplier)
USE_HASH(@SEL2 partsupp, supplier)
LEADING(@SEL1 partsupp, (supplier, nation))
USE_HASH(@SEL1 nation)
USE_HASH(@SEL1 supplier, nation)
END_OUTLINE_DATA
*/

explain /*Q3*/
SELECT l_shipmode,
SUM(CASE
WHEN o_orderpriority = '1-URGENT'
OR o_orderpriority = '2-HIGH' THEN 1
ELSE 0
END) AS high_line_count,
SUM(CASE
WHEN o_orderpriority <> '1-URGENT'
AND o_orderpriority <> '2-HIGH' THEN 1
ELSE 0
END) AS low_line_count
FROM   orders,
lineitem
WHERE  o_orderkey = l_orderkey
AND l_shipmode IN ( 'RAIL', 'FOB' )
AND l_commitdate < l_receiptdate
AND l_shipdate < l_commitdate
AND l_receiptdate >= DATE '1997-01-01'
AND l_receiptdate < DATE '1997-01-01' + interval '1' year
GROUP  BY l_shipmode
ORDER  BY l_shipmode

Query Plan:
+------------------------------------------------------+
| ID | OPERATOR          | NAME     | ROW COUNT | COST |
+------------------------------------------------------+
| 0  | SORT              |          | 1         | 9    |
| 1  |  HASH GROUP BY    |          | 1         | 9    |
| 2  |   HASH Inner JOIN |          | 1         | 8    |
| 3  |    TABLE SCAN     | ORDERS   | 1         | 4    |
| 4  |    TABLE SCAN     | LINEITEM | 1         | 4    |
+------------------------------------------------------+
Outputs & filters:
0 - output([lineitem.l_shipmode], [SUM(CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)], [SUM(CASE WHEN orders.o_orderpriority != '1-URGENT' AND orders.o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)])
sort_keys([lineitem.l_shipmode ASC])
1 - output([lineitem.l_shipmode], [SUM(CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)], [SUM(CASE WHEN orders.o_orderpriority != '1-URGENT' AND orders.o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)])
group_by_exprs([lineitem.l_shipmode])
aggr_exprs([SUM(CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)], [SUM(CASE WHEN orders.o_orderpriority != '1-URGENT' AND orders.o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)])
2 - output([lineitem.l_shipmode], [orders.o_orderpriority])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
3 - output([orders.o_orderkey], [orders.o_orderpriority])
access([orders.o_orderkey], [orders.o_orderpriority])
4 - output([lineitem.l_orderkey], [lineitem.l_shipmode])
filters([lineitem.l_shipmode IN ('RAIL', 'FOB')], [lineitem.l_commitdate < lineitem.l_receiptdate], [lineitem.l_shipdate < lineitem.l_commitdate], [lineitem.l_receiptdate >= 1997-01-01 00:00:00], [lineitem.l_receiptdate < DATE_ADD(1997-01-01 00:00:00, ?)])
access([lineitem.l_orderkey], [lineitem.l_shipmode], [lineitem.l_commitdate], [lineitem.l_receiptdate], [lineitem.l_shipdate])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 orders, lineitem)
USE_HASH(@SEL1 lineitem)
END_OUTLINE_DATA
*/

explain /*Q4*/
SELECT c_count,
Count(*) AS custdist
FROM   (SELECT c_custkey,
Count(o_orderkey) AS c_count
FROM   customer
LEFT OUTER JOIN orders
ON c_custkey = o_custkey
AND o_comment NOT LIKE '%pending%deposits%'
GROUP  BY c_custkey) c_orders
GROUP  BY c_count
ORDER  BY custdist DESC,
c_count DESC

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | SORT                    |          | 1         | 8    |
| 1  |  HASH GROUP BY          |          | 1         | 8    |
| 2  |   VIEW                  | C_ORDERS | 1         | 8    |
| 3  |    HASH GROUP BY        |          | 1         | 8    |
| 4  |     HASH LeftOuter JOIN |          | 1         | 8    |
| 5  |      TABLE SCAN         | CUSTOMER | 1         | 4    |
| 6  |      TABLE SCAN         | ORDERS   | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([c_orders.c_count], [COUNT(1)])
sort_keys([COUNT(1) DESC], [c_orders.c_count DESC])
1 - output([COUNT(1)], [c_orders.c_count])
group_by_exprs([c_orders.c_count])
aggr_exprs([COUNT(1)], [COUNT(1)])
2 - output([c_orders.c_count])
3 - output([customer.c_custkey], [COUNT(orders.o_orderkey)])
group_by_exprs([customer.c_custkey])
aggr_exprs([COUNT(orders.o_orderkey)])
4 - output([customer.c_custkey], [orders.o_orderkey])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
5 - output([customer.c_custkey])
access([customer.c_custkey])
6 - output([orders.o_custkey], [orders.o_orderkey])
filters([orders.o_comment NOT LIKE '%pending%deposits%'])
access([orders.o_custkey], [orders.o_comment], [orders.o_orderkey])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL2 customer, orders)
USE_HASH(@SEL2 orders)
END_OUTLINE_DATA
*/

explain /*Q5*/
SELECT 100.00 * SUM(CASE
WHEN p_type LIKE 'PROMO%' THEN l_extendedprice *
( 1 - l_discount )
ELSE 0
END) / SUM(l_extendedprice * ( 1 - l_discount )) AS
promo_revenue
FROM   lineitem,
part
WHERE  l_partkey = p_partkey
AND l_shipdate >= DATE '1996-12-01'
AND l_shipdate < DATE '1996-12-01' + interval '1' month

Query Plan:
+-----------------------------------------------------+
| ID | OPERATOR         | NAME     | ROW COUNT | COST |
+-----------------------------------------------------+
| 0  | SCALAR GROUP BY  |          | 1         | 8    |
| 1  |  HASH Inner JOIN |          | 1         | 8    |
| 2  |   TABLE SCAN     | LINEITEM | 1         | 4    |
| 3  |   TABLE SCAN     | PART     | 1         | 4    |
+-----------------------------------------------------+
Outputs & filters:
0 - output([100.00 * SUM(CASE WHEN part.p_type LIKE 'PROMO%' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END) / SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
aggr_exprs([SUM(CASE WHEN part.p_type LIKE 'PROMO%' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
1 - output([part.p_type], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_partkey = part.p_partkey])
2 - output([lineitem.l_partkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1996-12-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1996-12-01 00:00:00, ?)])
access([lineitem.l_partkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
3 - output([part.p_partkey], [part.p_type])
access([part.p_partkey], [part.p_type])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 lineitem, part)
USE_HASH(@SEL1 part)
END_OUTLINE_DATA
*/

CREATE VIEW REVENUE0 AS
SELECT l_suppkey                                 AS supplier_no,
SUM(l_extendedprice * ( 1 - l_discount )) AS total_revenue
FROM   lineitem
WHERE  l_shipdate >= DATE '1997-07-01'
AND l_shipdate < DATE '1997-07-01' + interval '3' month
GROUP  BY l_suppkey

explain /*Q6*/
SELECT s_suppkey,
s_name,
s_address,
s_phone,
total_revenue
FROM   supplier,
REVENUE0
WHERE  s_suppkey = supplier_no
AND total_revenue = (SELECT Max(total_revenue)
FROM REVENUE0)
ORDER  BY s_suppkey

Query Plan:
+------------------------------------------------------+
| ID | OPERATOR          | NAME     | ROW COUNT | COST |
+------------------------------------------------------+
| 0  | SUBQUERY EVALUATE |          | 1         | 13   |
| 1  |  SORT             |          | 1         | 9    |
| 2  |   HASH Inner JOIN |          | 1         | 9    |
| 3  |    TABLE SCAN     | SUPPLIER | 1         | 4    |
| 4  |    VIEW           | REVENUE0 | 1         | 4    |
| 5  |     HASH GROUP BY |          | 1         | 4    |
| 6  |      TABLE SCAN   | LINEITEM | 1         | 4    |
| 7  |  SCALAR GROUP BY  |          | 1         | 4    |
| 8  |   VIEW            | REVENUE0 | 1         | 4    |
| 9  |    HASH GROUP BY  |          | 1         | 4    |
| 10 |     TABLE SCAN    | LINEITEM | 1         | 4    |
+------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [revenue0.total_revenue])
subquery(0) exec_params()
1 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [revenue0.total_revenue])
sort_keys([supplier.s_suppkey ASC])
2 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [revenue0.total_revenue])
equal_join_conditions([supplier.s_suppkey = revenue0.supplier_no])
3 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone])
access([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone])
4 - output([revenue0.supplier_no], [revenue0.total_revenue])
filters([revenue0.total_revenue = subquery(0)])
5 - output([lineitem.l_suppkey], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([lineitem.l_suppkey])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
6 - output([lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1997-07-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1997-07-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
7 - output([MAX(revenue0.total_revenue)])
aggr_exprs([MAX(revenue0.total_revenue)])
8 - output([revenue0.total_revenue])
9 - output([lineitem.l_suppkey], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([lineitem.l_suppkey])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
10 - output([lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1997-07-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1997-07-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 supplier, revenue0)
USE_HASH(@SEL1 revenue0)
END_OUTLINE_DATA
*/

explain /*Q7*/
SELECT p_brand,
p_type,
p_size,
Count(DISTINCT ps_suppkey) AS supplier_cnt
FROM   partsupp,
part
WHERE  p_partkey = ps_partkey
AND p_brand <> 'Brand#34'
AND p_type NOT LIKE 'LARGE BRUSHED%'
AND p_size IN ( 48, 19, 12, 4,
41, 7, 21, 39 )
AND ps_suppkey NOT IN (SELECT s_suppkey
FROM   supplier
WHERE  s_comment LIKE '%Customer%Complaints%')
GROUP  BY p_brand,
p_type,
p_size
ORDER  BY supplier_cnt DESC,
p_brand,
p_type,
p_size

Query Plan:
+-------------------------------------------------------+
| ID | OPERATOR           | NAME     | ROW COUNT | COST |
+-------------------------------------------------------+
| 0  | SUBQUERY EVALUATE  |          | 1         | 13   |
| 1  |  SORT              |          | 1         | 9    |
| 2  |   HASH GROUP BY    |          | 1         | 9    |
| 3  |    HASH Inner JOIN |          | 1         | 8    |
| 4  |     TABLE SCAN     | PARTSUPP | 1         | 4    |
| 5  |     TABLE SCAN     | PART     | 1         | 4    |
| 6  |  TABLE SCAN        | SUPPLIER | 1         | 4    |
+-------------------------------------------------------+
Outputs & filters:
0 - output([part.p_brand], [part.p_type], [part.p_size], [COUNT(DISTINCT partsupp.ps_suppkey)])
subquery(0) exec_params()
1 - output([part.p_brand], [part.p_type], [part.p_size], [COUNT(DISTINCT partsupp.ps_suppkey)])
sort_keys([COUNT(DISTINCT partsupp.ps_suppkey) DESC], [part.p_brand ASC], [part.p_type ASC], [part.p_size ASC])
2 - output([COUNT(DISTINCT partsupp.ps_suppkey)], [part.p_brand], [part.p_type], [part.p_size])
group_by_exprs([part.p_brand], [part.p_type], [part.p_size])
aggr_exprs([COUNT(DISTINCT partsupp.ps_suppkey)], [COUNT(DISTINCT partsupp.ps_suppkey)])
3 - output([part.p_brand], [part.p_type], [part.p_size], [partsupp.ps_suppkey])
equal_join_conditions([part.p_partkey = partsupp.ps_partkey])
4 - output([partsupp.ps_partkey], [partsupp.ps_suppkey])
filters([partsupp.ps_suppkey NOT IN subquery(0)])
access([partsupp.ps_partkey], [partsupp.ps_suppkey])
5 - output([part.p_partkey], [part.p_brand], [part.p_type], [part.p_size])
filters([part.p_brand != 'Brand#34'], [part.p_type NOT LIKE 'LARGE BRUSHED%'], [part.p_size IN (48, 19, 12, 4, 41, 7, 21, 39)])
access([part.p_partkey], [part.p_brand], [part.p_type], [part.p_size])
6 - output([supplier.s_suppkey])
filters([supplier.s_comment LIKE '%Customer%Complaints%'])
access([supplier.s_comment], [supplier.s_suppkey])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 partsupp, part)
USE_HASH(@SEL1 part)
END_OUTLINE_DATA
*/

explain /*Q8*/
SELECT Sum(l_extendedprice) / 7.0 AS avg_yearly
FROM   lineitem,
part
WHERE  p_partkey = l_partkey
AND p_brand = 'Brand#44'
AND p_container = 'WRAP PKG'
AND l_quantity < (SELECT 0.2 * Avg(l_quantity)
FROM   lineitem
WHERE  l_partkey = p_partkey)

Query Plan:
+------------------------------------------------------+
| ID | OPERATOR          | NAME     | ROW COUNT | COST |
+------------------------------------------------------+
| 0  | SUBQUERY EVALUATE |          | 1         | 13   |
| 1  |  SCALAR GROUP BY  |          | 1         | 8    |
| 2  |   HASH Inner JOIN |          | 1         | 8    |
| 3  |    TABLE SCAN     | LINEITEM | 1         | 4    |
| 4  |    TABLE SCAN     | PART     | 1         | 4    |
| 5  |  SCALAR GROUP BY  |          | 1         | 4    |
| 6  |   TABLE SCAN      | LINEITEM | 1         | 4    |
+------------------------------------------------------+
Outputs & filters:
0 - output([SUM(lineitem.l_extendedprice) / 7.0])
subquery(0) exec_params([part.p_partkey])
1 - output([SUM(lineitem.l_extendedprice)])
aggr_exprs([SUM(lineitem.l_extendedprice)])
2 - output([lineitem.l_extendedprice])
equal_join_conditions([part.p_partkey = lineitem.l_partkey])
other_join_conditions([lineitem.l_quantity < subquery(0)])
3 - output([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_extendedprice])
access([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_extendedprice])
4 - output([part.p_partkey])
filters([part.p_brand = 'Brand#44'], [part.p_container = 'WRAP PKG'])
access([part.p_partkey], [part.p_brand], [part.p_container])
5 - output([0.2 * SUM(lineitem.l_quantity) / COUNT(lineitem.l_quantity)])
aggr_exprs([SUM(lineitem.l_quantity)], [COUNT(lineitem.l_quantity)])
6 - output([lineitem.l_quantity])
filters([lineitem.l_partkey = (?-0)])
access([lineitem.l_partkey], [lineitem.l_quantity])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 lineitem, part)
USE_HASH(@SEL1 part)
END_OUTLINE_DATA
*/

explain /*Q9*/
SELECT c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice,
Sum(l_quantity)
FROM   customer,
orders,
lineitem
WHERE  o_orderkey IN (SELECT l_orderkey
FROM   lineitem
GROUP  BY l_orderkey
HAVING Sum(l_quantity) > 314)
AND c_custkey = o_custkey
AND o_orderkey = l_orderkey
GROUP  BY c_name,
c_custkey,
o_orderkey,
o_orderdate,
o_totalprice
ORDER  BY o_totalprice DESC,
o_orderdate
LIMIT  100

Query Plan:
+--------------------------------------------------------+
| ID | OPERATOR            | NAME     | ROW COUNT | COST |
+--------------------------------------------------------+
| 0  | SUBQUERY EVALUATE   |          | 1         | 17   |
| 1  |  TOP_N SORT         |          | 1         | 13   |
| 2  |   HASH GROUP BY     |          | 1         | 13   |
| 3  |    HASH Inner JOIN  |          | 1         | 13   |
| 4  |     TABLE SCAN      | CUSTOMER | 1         | 4    |
| 5  |     HASH Inner JOIN |          | 1         | 8    |
| 6  |      TABLE SCAN     | ORDERS   | 1         | 4    |
| 7  |      TABLE SCAN     | LINEITEM | 1         | 4    |
| 8  |  HASH GROUP BY      |          | 1         | 4    |
| 9  |   TABLE SCAN        | LINEITEM | 1         | 4    |
+--------------------------------------------------------+
Outputs & filters:
0 - output([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [SUM(lineitem.l_quantity)])
subquery(0) exec_params()
1 - output([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [SUM(lineitem.l_quantity)])
sort_keys([orders.o_totalprice DESC], [orders.o_orderdate ASC])
top_n([100])
2 - output([orders.o_totalprice], [orders.o_orderdate], [customer.c_name], [customer.c_custkey], [orders.o_orderkey], [SUM(lineitem.l_quantity)])
group_by_exprs([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice])
aggr_exprs([SUM(lineitem.l_quantity)])
3 - output([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [lineitem.l_quantity])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
4 - output([customer.c_custkey], [customer.c_name])
access([customer.c_custkey], [customer.c_name])
5 - output([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [lineitem.l_quantity])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
6 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate], [orders.o_totalprice])
filters([orders.o_orderkey IN subquery(0)])
access([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate], [orders.o_totalprice])
7 - output([lineitem.l_orderkey], [lineitem.l_quantity])
access([lineitem.l_orderkey], [lineitem.l_quantity])
8 - output([lineitem.l_orderkey])
group_by_exprs([lineitem.l_orderkey])
aggr_exprs([SUM(lineitem.l_quantity)])
9 - output([lineitem.l_orderkey], [lineitem.l_quantity])
access([lineitem.l_orderkey], [lineitem.l_quantity])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 customer, (orders, lineitem))
USE_HASH(@SEL1 lineitem)
USE_HASH(@SEL1 orders, lineitem)
END_OUTLINE_DATA
*/

explain /*Q10*/
SELECT Sum(l_extendedprice * ( 1 - l_discount )) AS revenue
FROM   lineitem,
part
WHERE  ( p_partkey = l_partkey
AND p_brand = 'Brand#52'
AND p_container IN ( 'SM CASE', 'SM BOX', 'SM PACK', 'SM PKG' )
AND l_quantity >= 4
AND l_quantity <= 4 + 10
AND p_size BETWEEN 1 AND 5
AND l_shipmode IN ( 'AIR', 'AIR REG' )
AND l_shipinstruct = 'DELIVER IN PERSON' )
OR ( p_partkey = l_partkey
AND p_brand = 'Brand#11'
AND p_container IN ( 'MED BAG', 'MED BOX', 'MED PKG', 'MED PACK' )
AND l_quantity >= 18
AND l_quantity <= 18 + 10
AND p_size BETWEEN 1 AND 10
AND l_shipmode IN ( 'AIR', 'AIR REG' )
AND l_shipinstruct = 'DELIVER IN PERSON' )
OR ( p_partkey = l_partkey
AND p_brand = 'Brand#51'
AND p_container IN ( 'LG CASE', 'LG BOX', 'LG PACK', 'LG PKG' )
AND l_quantity >= 29
AND l_quantity <= 29 + 10
AND p_size BETWEEN 1 AND 15
AND l_shipmode IN ( 'AIR', 'AIR REG' )
AND l_shipinstruct = 'DELIVER IN PERSON' )

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | SCALAR GROUP BY         |          | 1         | 13   |
| 1  |  NESTED LOOP Inner JOIN |          | 1         | 13   |
| 2  |   TABLE SCAN            | LINEITEM | 1         | 4    |
| 3  |   TABLE SCAN            | PART     | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
1 - output([lineitem.l_extendedprice], [lineitem.l_discount])
other_join_conditions([part.p_partkey = lineitem.l_partkey AND part.p_brand = 'Brand#52' AND part.p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG') AND lineitem.l_quantity >= 4 AND lineitem.l_quantity <= 4 + 10 AND part.p_size BETWEEN 1 AND 5 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON' OR part.p_partkey = lineitem.l_partkey AND part.p_brand = 'Brand#11' AND part.p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK') AND lineitem.l_quantity >= 18 AND lineitem.l_quantity <= 18 + 10 AND part.p_size BETWEEN 1 AND 10 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON' OR part.p_partkey = lineitem.l_partkey AND part.p_brand = 'Brand#51' AND part.p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG') AND lineitem.l_quantity >= 29 AND lineitem.l_quantity <= 29 + 10 AND part.p_size BETWEEN 1 AND 15 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON'])
2 - output([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_shipmode], [lineitem.l_shipinstruct], [lineitem.l_extendedprice], [lineitem.l_discount])
access([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_shipmode], [lineitem.l_shipinstruct], [lineitem.l_extendedprice], [lineitem.l_discount])
3 - output([part.p_partkey], [part.p_brand], [part.p_container], [part.p_size])
access([part.p_partkey], [part.p_brand], [part.p_container], [part.p_size])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 lineitem, part)
USE_NL(@SEL1 part)
END_OUTLINE_DATA
*/

explain /*Q11*/
SELECT l_returnflag,
l_linestatus,
SUM(l_quantity)                                           AS sum_qty,
SUM(l_extendedprice)                                      AS
sum_base_price,
SUM(l_extendedprice * ( 1 - l_discount ))                 AS
sum_disc_price,
SUM(l_extendedprice * ( 1 - l_discount ) * ( 1 + l_tax )) AS sum_charge,
Avg(l_quantity)                                           AS avg_qty,
Avg(l_extendedprice)                                      AS avg_price,
Avg(l_discount)                                           AS avg_disc,
Count(*)                                                  AS count_order
FROM   lineitem
WHERE  l_shipdate <= DATE '1998-12-01' - interval '108' day
GROUP  BY l_returnflag,
l_linestatus
ORDER  BY l_returnflag,
l_linestatus

Query Plan:
+---------------------------------------------------+
| ID | OPERATOR       | NAME     | ROW COUNT | COST |
+---------------------------------------------------+
| 0  | SORT           |          | 1         | 5    |
| 1  |  HASH GROUP BY |          | 1         | 5    |
| 2  |   TABLE SCAN   | LINEITEM | 1         | 4    |
+---------------------------------------------------+
Outputs & filters:
0 - output([lineitem.l_returnflag], [lineitem.l_linestatus], [SUM(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount * 1 + lineitem.l_tax)], [SUM(lineitem.l_quantity) / COUNT(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice) / COUNT(lineitem.l_extendedprice)], [SUM(lineitem.l_discount) / COUNT(lineitem.l_discount)], [COUNT(1)])
sort_keys([lineitem.l_returnflag ASC], [lineitem.l_linestatus ASC])
1 - output([lineitem.l_returnflag], [lineitem.l_linestatus], [SUM(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount * 1 + lineitem.l_tax)], [COUNT(lineitem.l_quantity)], [COUNT(lineitem.l_extendedprice)], [SUM(lineitem.l_discount)], [COUNT(lineitem.l_discount)], [COUNT(1)])
group_by_exprs([lineitem.l_returnflag], [lineitem.l_linestatus])
aggr_exprs([SUM(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount * 1 + lineitem.l_tax)], [SUM(lineitem.l_quantity)], [COUNT(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [COUNT(lineitem.l_extendedprice)], [SUM(lineitem.l_discount)], [COUNT(lineitem.l_discount)], [COUNT(1)])
2 - output([lineitem.l_returnflag], [lineitem.l_linestatus], [lineitem.l_quantity], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_tax])
filters([lineitem.l_shipdate <= DATE_SUB(1998-12-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_returnflag], [lineitem.l_linestatus], [lineitem.l_quantity], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_tax])

outline:
/*+
BEGIN_OUTLINE_DATA
END_OUTLINE_DATA
*/

explain /*Q12*/
SELECT s_name,
s_address
FROM   supplier,
nation
WHERE  s_suppkey IN (SELECT ps_suppkey
FROM   partsupp
WHERE  ps_partkey IN (SELECT p_partkey
FROM   part
WHERE  p_name LIKE 'green%')
AND ps_availqty > (SELECT 0.5 * SUM(l_quantity)
FROM   lineitem
WHERE  l_partkey = ps_partkey
AND l_suppkey = ps_suppkey
AND l_shipdate >= DATE
'1993-01-01'
AND l_shipdate < DATE
'1993-01-01' +
interval
'1' year
))
AND s_nationkey = n_nationkey
AND n_name = 'ALGERIA'
ORDER  BY s_name

Query Plan:
+-------------------------------------------------------+
| ID | OPERATOR           | NAME     | ROW COUNT | COST |
+-------------------------------------------------------+
| 0  | SUBQUERY EVALUATE  |          | 1         | 21   |
| 1  |  SORT              |          | 1         | 8    |
| 2  |   HASH Inner JOIN  |          | 1         | 8    |
| 3  |    TABLE SCAN      | SUPPLIER | 1         | 4    |
| 4  |    TABLE SCAN      | NATION   | 1         | 4    |
| 5  |  SUBQUERY EVALUATE |          | 1         | 12   |
| 6  |   TABLE SCAN       | PARTSUPP | 1         | 4    |
| 7  |   TABLE SCAN       | PART     | 1         | 4    |
| 8  |   SCALAR GROUP BY  |          | 1         | 4    |
| 9  |    TABLE SCAN      | LINEITEM | 1         | 4    |
+-------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_name], [supplier.s_address])
subquery(0) exec_params()
1 - output([supplier.s_name], [supplier.s_address])
sort_keys([supplier.s_name ASC])
2 - output([supplier.s_name], [supplier.s_address])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
3 - output([supplier.s_nationkey], [supplier.s_name], [supplier.s_address])
filters([supplier.s_suppkey IN subquery(0)])
access([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_name], [supplier.s_address])
4 - output([nation.n_nationkey])
filters([nation.n_name = 'ALGERIA'])
access([nation.n_nationkey], [nation.n_name])
5 - output([partsupp.ps_suppkey])
subquery(0) exec_params()
subquery(1) exec_params([partsupp.ps_partkey], [partsupp.ps_suppkey])
6 - output([partsupp.ps_suppkey])
filters([partsupp.ps_partkey IN subquery(0)], [partsupp.ps_availqty > subquery(1)])
access([partsupp.ps_partkey], [partsupp.ps_availqty], [partsupp.ps_suppkey])
7 - output([part.p_partkey])
filters([part.p_name LIKE 'green%'])
access([part.p_name], [part.p_partkey])
8 - output([0.5 * SUM(lineitem.l_quantity)])
aggr_exprs([SUM(lineitem.l_quantity)])
9 - output([lineitem.l_quantity])
filters([lineitem.l_partkey = (?-1)], [lineitem.l_suppkey = (?-2)], [lineitem.l_shipdate >= 1993-01-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1993-01-01 00:00:00, ?)])
access([lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_shipdate], [lineitem.l_quantity])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 supplier, nation)
USE_HASH(@SEL1 nation)
END_OUTLINE_DATA
*/

explain /*Q13*/
SELECT s_name,
Count(*) AS numwait
FROM   supplier,
lineitem l1,
orders,
nation
WHERE  s_suppkey = l1.l_suppkey
AND o_orderkey = l1.l_orderkey
AND o_orderstatus = 'F'
AND l1.l_receiptdate > l1.l_commitdate
AND EXISTS (SELECT *
FROM   lineitem l2
WHERE  l2.l_orderkey = l1.l_orderkey
AND l2.l_suppkey <> l1.l_suppkey)
AND NOT EXISTS (SELECT *
FROM   lineitem l3
WHERE  l3.l_orderkey = l1.l_orderkey
AND l3.l_suppkey <> l1.l_suppkey
AND l3.l_receiptdate > l3.l_commitdate)
AND s_nationkey = n_nationkey
AND n_name = 'EGYPT'
GROUP  BY s_name
ORDER  BY numwait DESC,
s_name
LIMIT  100

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SUBQUERY EVALUATE    |          | 1         | 27   |
| 1  |  TOP_N SORT          |          | 1         | 17   |
| 2  |   HASH GROUP BY      |          | 1         | 17   |
| 3  |    HASH Inner JOIN   |          | 1         | 17   |
| 4  |     TABLE SCAN       | ORDERS   | 1         | 4    |
| 5  |     HASH Inner JOIN  |          | 1         | 13   |
| 6  |      TABLE SCAN      | L1       | 1         | 4    |
| 7  |      HASH Inner JOIN |          | 1         | 8    |
| 8  |       TABLE SCAN     | SUPPLIER | 1         | 4    |
| 9  |       TABLE SCAN     | NATION   | 1         | 4    |
| 10 |  TABLE SCAN          | L2       | 1         | 4    |
| 11 |  TABLE SCAN          | L3       | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_name], [COUNT(1)])
subquery(0) exec_params([l1.l_orderkey], [l1.l_suppkey])
subquery(1) exec_params([l1.l_orderkey], [l1.l_suppkey])
1 - output([supplier.s_name], [COUNT(1)])
sort_keys([COUNT(1) DESC], [supplier.s_name ASC])
top_n([100])
2 - output([COUNT(1)], [supplier.s_name])
group_by_exprs([supplier.s_name])
aggr_exprs([COUNT(1)], [COUNT(1)])
3 - output([supplier.s_name])
equal_join_conditions([orders.o_orderkey = l1.l_orderkey])
4 - output([orders.o_orderkey])
filters([orders.o_orderstatus = 'F'])
access([orders.o_orderkey], [orders.o_orderstatus])
5 - output([l1.l_orderkey], [supplier.s_name])
equal_join_conditions([supplier.s_suppkey = l1.l_suppkey])
6 - output([l1.l_suppkey], [l1.l_orderkey])
filters([l1.l_receiptdate > l1.l_commitdate], [EXISTS(subquery(0))], [NOT EXISTS(subquery(1))])
access([l1.l_suppkey], [l1.l_orderkey], [l1.l_receiptdate], [l1.l_commitdate])
7 - output([supplier.s_suppkey], [supplier.s_name])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
8 - output([supplier.s_nationkey], [supplier.s_suppkey], [supplier.s_name])
access([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_name])
9 - output([nation.n_nationkey])
filters([nation.n_name = 'EGYPT'])
access([nation.n_nationkey], [nation.n_name])
10 - output([l2.l_orderkey], [l2.l_partkey], [l2.l_suppkey], [l2.l_linenumber], [l2.l_quantity], [l2.l_extendedprice], [l2.l_discount], [l2.l_tax], [l2.l_returnflag], [l2.l_linestatus], [l2.l_shipdate], [l2.l_commitdate], [l2.l_receiptdate], [l2.l_shipinstruct], [l2.l_shipmode], [l2.l_comment])
filters([l2.l_orderkey = (?-3)], [l2.l_suppkey != (?-4)])
access([l2.l_orderkey], [l2.l_suppkey], [l2.l_partkey], [l2.l_linenumber], [l2.l_quantity], [l2.l_extendedprice], [l2.l_discount], [l2.l_tax], [l2.l_returnflag], [l2.l_linestatus], [l2.l_shipdate], [l2.l_commitdate], [l2.l_receiptdate], [l2.l_shipinstruct], [l2.l_shipmode], [l2.l_comment])
11 - output([l3.l_orderkey], [l3.l_partkey], [l3.l_suppkey], [l3.l_linenumber], [l3.l_quantity], [l3.l_extendedprice], [l3.l_discount], [l3.l_tax], [l3.l_returnflag], [l3.l_linestatus], [l3.l_shipdate], [l3.l_commitdate], [l3.l_receiptdate], [l3.l_shipinstruct], [l3.l_shipmode], [l3.l_comment])
filters([l3.l_orderkey = (?-5)], [l3.l_suppkey != (?-6)], [l3.l_receiptdate > l3.l_commitdate])
access([l3.l_orderkey], [l3.l_suppkey], [l3.l_receiptdate], [l3.l_commitdate], [l3.l_partkey], [l3.l_linenumber], [l3.l_quantity], [l3.l_extendedprice], [l3.l_discount], [l3.l_tax], [l3.l_returnflag], [l3.l_linestatus], [l3.l_shipdate], [l3.l_shipinstruct], [l3.l_shipmode], [l3.l_comment])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 orders, (l1, (supplier, nation)))
USE_HASH(@SEL1 nation)
USE_HASH(@SEL1 supplier, nation)
USE_HASH(@SEL1 l1, supplier, nation)
END_OUTLINE_DATA
*/

explain /*Q14*/
SELECT cntrycode,
Count(*)       AS numcust,
Sum(c_acctbal) AS totacctbal
FROM   (SELECT Substr(c_phone, 1, 2) AS cntrycode,
c_acctbal
FROM   customer
WHERE  Substr(c_phone, 1, 2) IN ( '20', '40', '22', '30',
'39', '42', '21' )
AND c_acctbal > (SELECT Avg(c_acctbal)
FROM   customer
WHERE  c_acctbal > 0.00
AND Substr(c_phone, 1, 2) IN (
'20', '40', '22', '30',
'39', '42', '21' ))
AND NOT EXISTS (SELECT *
FROM   orders
WHERE  o_custkey = c_custkey)) AS custsale
GROUP  BY cntrycode
ORDER  BY cntrycode

Query Plan:
+------------------------------------------------------+
| ID | OPERATOR          | NAME     | ROW COUNT | COST |
+------------------------------------------------------+
| 0  | SUBQUERY EVALUATE |          | 1         | 13   |
| 1  |  SORT             |          | 1         | 4    |
| 2  |   HASH GROUP BY   |          | 1         | 4    |
| 3  |    TABLE SCAN     | CUSTOMER | 1         | 4    |
| 4  |  SCALAR GROUP BY  |          | 1         | 4    |
| 5  |   TABLE SCAN      | CUSTOMER | 1         | 4    |
| 6  |  TABLE SCAN       | ORDERS   | 1         | 4    |
+------------------------------------------------------+
Outputs & filters:
0 - output([SUBSTR(customer.c_phone , 1 , 2)], [COUNT(1)], [SUM(customer.c_acctbal)])
subquery(0) exec_params()
subquery(1) exec_params([customer.c_custkey])
1 - output([customer.c_phone], [COUNT(1)], [SUM(customer.c_acctbal)])
sort_keys([SUBSTR(customer.c_phone , 1 , 2) ASC])
2 - output([customer.c_phone], [COUNT(1)], [SUM(customer.c_acctbal)])
group_by_exprs([SUBSTR(customer.c_phone , 1 , 2)])
aggr_exprs([COUNT(1)], [SUM(customer.c_acctbal)])
3 - output([customer.c_phone], [customer.c_acctbal])
filters([SUBSTR(customer.c_phone , 1 , 2) IN ('20', '40', '22', '30', '39', '42', '21')], [customer.c_acctbal > subquery(0)], [NOT EXISTS(subquery(1))])
access([customer.c_phone], [customer.c_acctbal], [customer.c_custkey])
4 - output([SUM(customer.c_acctbal) / COUNT(customer.c_acctbal)])
aggr_exprs([SUM(customer.c_acctbal)], [COUNT(customer.c_acctbal)])
5 - output([customer.c_acctbal])
filters([customer.c_acctbal > 0.00], [SUBSTR(customer.c_phone , 1 , 2) IN ('20', '40', '22', '30', '39', '42', '21')])
access([customer.c_acctbal], [customer.c_phone])
6 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderstatus], [orders.o_totalprice], [orders.o_orderdate], [orders.o_orderpriority], [orders.o_clerk], [orders.o_shippriority], [orders.o_comment])
filters([orders.o_custkey = (?-7)])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderstatus], [orders.o_totalprice], [orders.o_orderdate], [orders.o_orderpriority], [orders.o_clerk], [orders.o_shippriority], [orders.o_comment])

outline:
/*+
BEGIN_OUTLINE_DATA
MERGE(@SEL2)
END_OUTLINE_DATA
*/

explain /*Q15*/
SELECT s_acctbal,
s_name,
n_name,
p_partkey,
p_mfgr,
s_address,
s_phone,
s_comment
FROM   part,
supplier,
partsupp,
nation,
region
WHERE  p_partkey = ps_partkey
AND s_suppkey = ps_suppkey
AND p_size = 30
AND p_type LIKE '%STEEL'
AND s_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND r_name = 'ASIA'
AND ps_supplycost = (SELECT Min(ps_supplycost)
FROM   partsupp,
supplier,
nation,
region
WHERE  p_partkey = ps_partkey
AND s_suppkey = ps_suppkey
AND s_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND r_name = 'ASIA')
ORDER  BY s_acctbal DESC,
n_name,
s_name,
p_partkey
LIMIT  100

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SUBQUERY EVALUATE    |          | 1         | 39   |
| 1  |  TOP_N SORT          |          | 1         | 22   |
| 2  |   HASH Inner JOIN    |          | 1         | 22   |
| 3  |    TABLE SCAN        | PART     | 1         | 4    |
| 4  |    HASH Inner JOIN   |          | 1         | 17   |
| 5  |     TABLE SCAN       | PARTSUPP | 1         | 4    |
| 6  |     HASH Inner JOIN  |          | 1         | 13   |
| 7  |      TABLE SCAN      | REGION   | 1         | 4    |
| 8  |      HASH Inner JOIN |          | 1         | 8    |
| 9  |       TABLE SCAN     | SUPPLIER | 1         | 4    |
| 10 |       TABLE SCAN     | NATION   | 1         | 4    |
| 11 |  SCALAR GROUP BY     |          | 1         | 17   |
| 12 |   HASH Inner JOIN    |          | 1         | 17   |
| 13 |    TABLE SCAN        | PARTSUPP | 1         | 4    |
| 14 |    HASH Inner JOIN   |          | 1         | 13   |
| 15 |     TABLE SCAN       | REGION   | 1         | 4    |
| 16 |     HASH Inner JOIN  |          | 1         | 8    |
| 17 |      TABLE SCAN      | SUPPLIER | 1         | 4    |
| 18 |      TABLE SCAN      | NATION   | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_acctbal], [supplier.s_name], [nation.n_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
subquery(0) exec_params([part.p_partkey])
1 - output([supplier.s_acctbal], [supplier.s_name], [nation.n_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
sort_keys([supplier.s_acctbal DESC], [nation.n_name ASC], [supplier.s_name ASC], [part.p_partkey ASC])
top_n([100])
2 - output([supplier.s_acctbal], [nation.n_name], [supplier.s_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([part.p_partkey = partsupp.ps_partkey], [partsupp.ps_supplycost = subquery(0)])
3 - output([part.p_partkey], [part.p_mfgr])
filters([part.p_size = 30], [part.p_type LIKE '%STEEL'])
access([part.p_partkey], [part.p_size], [part.p_type], [part.p_mfgr])
4 - output([partsupp.ps_partkey], [partsupp.ps_supplycost], [supplier.s_acctbal], [nation.n_name], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([supplier.s_suppkey = partsupp.ps_suppkey])
5 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
access([partsupp.ps_partkey], [partsupp.ps_suppkey], [partsupp.ps_supplycost])
6 - output([supplier.s_suppkey], [supplier.s_acctbal], [nation.n_name], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([nation.n_regionkey = region.r_regionkey])
7 - output([region.r_regionkey])
filters([region.r_name = 'ASIA'])
access([region.r_regionkey], [region.r_name])
8 - output([nation.n_regionkey], [supplier.s_suppkey], [supplier.s_acctbal], [nation.n_name], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
9 - output([supplier.s_nationkey], [supplier.s_suppkey], [supplier.s_acctbal], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
access([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_acctbal], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
10 - output([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])
11 - output([MIN(partsupp.ps_supplycost)])
aggr_exprs([MIN(partsupp.ps_supplycost)])
12 - output([partsupp.ps_supplycost])
equal_join_conditions([supplier.s_suppkey = partsupp.ps_suppkey])
13 - output([partsupp.ps_suppkey], [partsupp.ps_supplycost])
filters([(?-8) = partsupp.ps_partkey])
access([partsupp.ps_partkey], [partsupp.ps_suppkey], [partsupp.ps_supplycost])
14 - output([supplier.s_suppkey])
equal_join_conditions([nation.n_regionkey = region.r_regionkey])
15 - output([region.r_regionkey])
filters([region.r_name = 'ASIA'])
access([region.r_regionkey], [region.r_name])
16 - output([nation.n_regionkey], [supplier.s_suppkey])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
17 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
18 - output([nation.n_nationkey], [nation.n_regionkey])
access([nation.n_nationkey], [nation.n_regionkey])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL2 partsupp, (region, (supplier, nation)))
USE_HASH(@SEL2 nation)
USE_HASH(@SEL2 supplier, nation)
USE_HASH(@SEL2 region, supplier, nation)
LEADING(@SEL1 part, (partsupp, (region, (supplier, nation))))
USE_HASH(@SEL1 nation)
USE_HASH(@SEL1 supplier, nation)
USE_HASH(@SEL1 region, supplier, nation)
USE_HASH(@SEL1 partsupp, region, supplier, nation)
END_OUTLINE_DATA
*/

explain /*Q16*/
SELECT   l_orderkey,
Sum(l_extendedprice * (1 - l_discount)) AS revenue,
o_orderdate,
o_shippriority
FROM     customer,
orders,
lineitem
WHERE    c_mktsegment = 'AUTOMOBILE'
AND      c_custkey = o_custkey
AND      l_orderkey = o_orderkey
AND      o_orderdate < date '1995-03-13'
AND      l_shipdate >  date '1995-03-13'
GROUP BY l_orderkey,
o_orderdate,
o_shippriority
ORDER BY revenue DESC,
o_orderdate limit 10

Query Plan:
+-------------------------------------------------------+
| ID | OPERATOR           | NAME     | ROW COUNT | COST |
+-------------------------------------------------------+
| 0  | TOP_N SORT         |          | 1         | 13   |
| 1  |  HASH GROUP BY     |          | 1         | 13   |
| 2  |   HASH Inner JOIN  |          | 1         | 13   |
| 3  |    TABLE SCAN      | CUSTOMER | 1         | 4    |
| 4  |    HASH Inner JOIN |          | 1         | 8    |
| 5  |     TABLE SCAN     | ORDERS   | 1         | 4    |
| 6  |     TABLE SCAN     | LINEITEM | 1         | 4    |
+-------------------------------------------------------+
Outputs & filters:
0 - output([lineitem.l_orderkey], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [orders.o_orderdate], [orders.o_shippriority])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount) DESC], [orders.o_orderdate ASC])
top_n([10])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [orders.o_orderdate], [lineitem.l_orderkey], [orders.o_shippriority])
group_by_exprs([lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
3 - output([customer.c_custkey])
filters([customer.c_mktsegment = 'AUTOMOBILE'])
access([customer.c_mktsegment], [customer.c_custkey])
4 - output([orders.o_custkey], [lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
5 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate], [orders.o_shippriority])
filters([orders.o_orderdate < 1995-03-13 00:00:00])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_shippriority])
6 - output([lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate > 1995-03-13 00:00:00])
access([lineitem.l_orderkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 customer, (orders, lineitem))
USE_HASH(@SEL1 lineitem)
USE_HASH(@SEL1 orders, lineitem)
END_OUTLINE_DATA
*/

explain /*Q17*/
SELECT o_orderpriority,
Count(*) AS order_count
FROM   orders
WHERE  o_orderdate >= DATE '1995-01-01'
AND o_orderdate < DATE '1995-01-01' + interval '3' month
AND EXISTS (SELECT *
FROM   lineitem
WHERE  l_orderkey = o_orderkey
AND l_commitdate < l_receiptdate)
GROUP  BY o_orderpriority
ORDER  BY o_orderpriority

Query Plan:
+------------------------------------------------------+
| ID | OPERATOR          | NAME     | ROW COUNT | COST |
+------------------------------------------------------+
| 0  | SUBQUERY EVALUATE |          | 1         | 9    |
| 1  |  SORT             |          | 1         | 4    |
| 2  |   HASH GROUP BY   |          | 1         | 4    |
| 3  |    TABLE SCAN     | ORDERS   | 1         | 4    |
| 4  |  TABLE SCAN       | LINEITEM | 1         | 4    |
+------------------------------------------------------+
Outputs & filters:
0 - output([orders.o_orderpriority], [COUNT(1)])
subquery(0) exec_params([orders.o_orderkey])
1 - output([orders.o_orderpriority], [COUNT(1)])
sort_keys([orders.o_orderpriority ASC])
2 - output([orders.o_orderpriority], [COUNT(1)])
group_by_exprs([orders.o_orderpriority])
aggr_exprs([COUNT(1)])
3 - output([orders.o_orderpriority])
filters([orders.o_orderdate >= 1995-01-01 00:00:00], [orders.o_orderdate < DATE_ADD(1995-01-01 00:00:00, ?)], [EXISTS(subquery(0))])
access([orders.o_orderdate], [orders.o_orderkey], [orders.o_orderpriority])
4 - output([lineitem.l_orderkey], [lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_linenumber], [lineitem.l_quantity], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_tax], [lineitem.l_returnflag], [lineitem.l_linestatus], [lineitem.l_shipdate], [lineitem.l_commitdate], [lineitem.l_receiptdate], [lineitem.l_shipinstruct], [lineitem.l_shipmode], [lineitem.l_comment])
filters([lineitem.l_orderkey = (?-9)], [lineitem.l_commitdate < lineitem.l_receiptdate])
access([lineitem.l_orderkey], [lineitem.l_commitdate], [lineitem.l_receiptdate], [lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_linenumber], [lineitem.l_quantity], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_tax], [lineitem.l_returnflag], [lineitem.l_linestatus], [lineitem.l_shipdate], [lineitem.l_shipinstruct], [lineitem.l_shipmode], [lineitem.l_comment])

outline:
/*+
BEGIN_OUTLINE_DATA
END_OUTLINE_DATA
*/

explain /*Q18*/
SELECT n_name,
SUM(l_extendedprice * ( 1 - l_discount )) AS revenue
FROM   customer,
orders,
lineitem,
supplier,
nation,
region
WHERE  c_custkey = o_custkey
AND l_orderkey = o_orderkey
AND l_suppkey = s_suppkey
AND c_nationkey = s_nationkey
AND s_nationkey = n_nationkey
AND n_regionkey = r_regionkey
AND r_name = 'MIDDLE EAST'
AND o_orderdate >= DATE '1994-01-01'
AND o_orderdate < DATE '1994-01-01' + interval '1' year
GROUP  BY n_name
ORDER  BY revenue DESC

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 26   |
| 1  |  HASH GROUP BY       |          | 1         | 26   |
| 2  |   HASH Inner JOIN    |          | 1         | 26   |
| 3  |    HASH Inner JOIN   |          | 1         | 8    |
| 4  |     TABLE SCAN       | CUSTOMER | 1         | 4    |
| 5  |     TABLE SCAN       | ORDERS   | 1         | 4    |
| 6  |    HASH Inner JOIN   |          | 1         | 17   |
| 7  |     TABLE SCAN       | LINEITEM | 1         | 4    |
| 8  |     HASH Inner JOIN  |          | 1         | 13   |
| 9  |      TABLE SCAN      | REGION   | 1         | 4    |
| 10 |      HASH Inner JOIN |          | 1         | 8    |
| 11 |       TABLE SCAN     | SUPPLIER | 1         | 4    |
| 12 |       TABLE SCAN     | NATION   | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([nation.n_name], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount) DESC])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [nation.n_name])
group_by_exprs([nation.n_name])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([nation.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey], [customer.c_nationkey = supplier.s_nationkey])
3 - output([orders.o_orderkey], [customer.c_nationkey])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
4 - output([customer.c_custkey], [customer.c_nationkey])
access([customer.c_custkey], [customer.c_nationkey])
5 - output([orders.o_custkey], [orders.o_orderkey])
filters([orders.o_orderdate >= 1994-01-01 00:00:00], [orders.o_orderdate < DATE_ADD(1994-01-01 00:00:00, ?)])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate])
6 - output([lineitem.l_orderkey], [supplier.s_nationkey], [nation.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_suppkey = supplier.s_suppkey])
7 - output([lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
access([lineitem.l_orderkey], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
8 - output([supplier.s_suppkey], [supplier.s_nationkey], [nation.n_name])
equal_join_conditions([nation.n_regionkey = region.r_regionkey])
9 - output([region.r_regionkey])
filters([region.r_name = 'MIDDLE EAST'])
access([region.r_regionkey], [region.r_name])
10 - output([nation.n_regionkey], [supplier.s_suppkey], [supplier.s_nationkey], [nation.n_name])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
11 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
12 - output([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 (customer, orders), (lineitem, (region, (supplier, nation))))
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 nation)
USE_HASH(@SEL1 supplier, nation)
USE_HASH(@SEL1 region, supplier, nation)
USE_HASH(@SEL1 lineitem, region, supplier, nation)
END_OUTLINE_DATA
*/

explain /*Q19*/
select
sum(l_extendedprice * l_discount) as revenue
from
LINEITEM
where
l_shipdate >= date '1994-01-01'
and l_shipdate < date '1994-01-01' + interval '1' year
and l_discount between 0.06 - 0.01 and 0.06 + 0.01
and l_quantity < 24

Query Plan:
+----------------------------------------------------+
| ID | OPERATOR        | NAME     | ROW COUNT | COST |
+----------------------------------------------------+
| 0  | SCALAR GROUP BY |          | 1         | 4    |
| 1  |  TABLE SCAN     | LINEITEM | 1         | 4    |
+----------------------------------------------------+
Outputs & filters:
0 - output([SUM(lineitem.l_extendedprice * lineitem.l_discount)])
aggr_exprs([SUM(lineitem.l_extendedprice * lineitem.l_discount)])
1 - output([lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1994-01-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1994-01-01 00:00:00, ?)], [lineitem.l_discount BETWEEN 0.06 - 0.01 AND 0.06 + 0.01], [lineitem.l_quantity < 24])
access([lineitem.l_shipdate], [lineitem.l_discount], [lineitem.l_quantity], [lineitem.l_extendedprice])

outline:
/*+
BEGIN_OUTLINE_DATA
END_OUTLINE_DATA
*/

explain /*Q20*/
SELECT supp_nation,
cust_nation,
l_year,
SUM(volume) AS revenue
FROM   (SELECT n1.n_name                            AS supp_nation,
n2.n_name                            AS cust_nation,
To_char(l_shipdate, 'yyyy')          AS l_year,
l_extendedprice * ( 1 - l_discount ) AS volume
FROM   supplier,
lineitem,
orders,
customer,
nation n1,
nation n2
WHERE  s_suppkey = l_suppkey
AND o_orderkey = l_orderkey
AND c_custkey = o_custkey
AND s_nationkey = n1.n_nationkey
AND c_nationkey = n2.n_nationkey
AND ( ( n1.n_name = 'JAPAN'
AND n2.n_name = 'INDIA' )
OR ( n1.n_name = 'INDIA'
AND n2.n_name = 'JAPAN' ) )
AND l_shipdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31')
AS
shipping
GROUP  BY supp_nation,
cust_nation,
l_year
ORDER  BY supp_nation,
cust_nation,
l_year

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 26   |
| 1  |  HASH GROUP BY       |          | 1         | 26   |
| 2  |   HASH Inner JOIN    |          | 1         | 26   |
| 3  |    TABLE SCAN        | N1       | 1         | 4    |
| 4  |    HASH Inner JOIN   |          | 1         | 21   |
| 5  |     HASH Inner JOIN  |          | 1         | 8    |
| 6  |      TABLE SCAN      | SUPPLIER | 1         | 4    |
| 7  |      TABLE SCAN      | LINEITEM | 1         | 4    |
| 8  |     HASH Inner JOIN  |          | 1         | 12   |
| 9  |      TABLE SCAN      | ORDERS   | 1         | 4    |
| 10 |      HASH Inner JOIN |          | 1         | 8    |
| 11 |       TABLE SCAN     | CUSTOMER | 1         | 4    |
| 12 |       TABLE SCAN     | N2       | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([n1.n_name], [n2.n_name], [TO_CHAR(lineitem.l_shipdate , 'yyyy')], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([n1.n_name ASC], [n2.n_name ASC], [TO_CHAR(lineitem.l_shipdate , 'yyyy') ASC])
1 - output([n1.n_name], [n2.n_name], [lineitem.l_shipdate], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([n1.n_name], [n2.n_name], [TO_CHAR(lineitem.l_shipdate , 'yyyy')])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([n1.n_name], [n2.n_name], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_nationkey = n1.n_nationkey])
other_join_conditions([n1.n_name = 'JAPAN' AND n2.n_name = 'INDIA' OR n1.n_name = 'INDIA' AND n2.n_name = 'JAPAN'])
3 - output([n1.n_nationkey], [n1.n_name])
access([n1.n_nationkey], [n1.n_name])
4 - output([supplier.s_nationkey], [n2.n_name], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
5 - output([lineitem.l_orderkey], [supplier.s_nationkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_suppkey = lineitem.l_suppkey])
6 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
7 - output([lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate BETWEEN 1995-01-01 00:00:00 AND 1996-12-31 00:00:00])
access([lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
8 - output([orders.o_orderkey], [n2.n_name])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
9 - output([orders.o_custkey], [orders.o_orderkey])
access([orders.o_orderkey], [orders.o_custkey])
10 - output([customer.c_custkey], [n2.n_name])
equal_join_conditions([customer.c_nationkey = n2.n_nationkey])
11 - output([customer.c_nationkey], [customer.c_custkey])
access([customer.c_custkey], [customer.c_nationkey])
12 - output([n2.n_nationkey], [n2.n_name])
access([n2.n_nationkey], [n2.n_name])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 n1, ((supplier, lineitem), (orders, (customer, n2))))
USE_HASH(@SEL1 lineitem)
USE_HASH(@SEL1 n2)
USE_HASH(@SEL1 customer, n2)
USE_HASH(@SEL1 orders, customer, n2)
USE_HASH(@SEL1 supplier, lineitem, orders, customer, n2)
MERGE(@SEL2)
END_OUTLINE_DATA
*/

explain /*Q21*/
SELECT o_year,
SUM(CASE
WHEN nation = 'INDIA' THEN volume
ELSE 0
END) / SUM(volume) AS mkt_share
FROM   (SELECT To_char(o_orderdate, 'yyyy')         AS o_year,
l_extendedprice * ( 1 - l_discount ) AS volume,
n2.n_name                            AS nation
FROM   part,
supplier,
lineitem,
orders,
customer,
nation n1,
nation n2,
region
WHERE  p_partkey = l_partkey
AND s_suppkey = l_suppkey
AND l_orderkey = o_orderkey
AND o_custkey = c_custkey
AND c_nationkey = n1.n_nationkey
AND n1.n_regionkey = r_regionkey
AND r_name = 'ASIA'
AND s_nationkey = n2.n_nationkey
AND o_orderdate BETWEEN DATE '1995-01-01' AND DATE '1996-12-31'
AND p_type = 'SMALL PLATED COPPER') AS all_nations
GROUP  BY o_year
ORDER  BY o_year

Query Plan:
+----------------------------------------------------------+
| ID | OPERATOR              | NAME     | ROW COUNT | COST |
+----------------------------------------------------------+
| 0  | SORT                  |          | 1         | 35   |
| 1  |  HASH GROUP BY        |          | 1         | 35   |
| 2  |   HASH Inner JOIN     |          | 1         | 35   |
| 3  |    TABLE SCAN         | PART     | 1         | 4    |
| 4  |    HASH Inner JOIN    |          | 1         | 30   |
| 5  |     TABLE SCAN        | N2       | 1         | 4    |
| 6  |     HASH Inner JOIN   |          | 1         | 26   |
| 7  |      HASH Inner JOIN  |          | 1         | 13   |
| 8  |       TABLE SCAN      | SUPPLIER | 1         | 4    |
| 9  |       HASH Inner JOIN |          | 1         | 8    |
| 10 |        TABLE SCAN     | LINEITEM | 1         | 4    |
| 11 |        TABLE SCAN     | ORDERS   | 1         | 4    |
| 12 |      HASH Inner JOIN  |          | 1         | 13   |
| 13 |       TABLE SCAN      | REGION   | 1         | 4    |
| 14 |       HASH Inner JOIN |          | 1         | 8    |
| 15 |        TABLE SCAN     | CUSTOMER | 1         | 4    |
| 16 |        TABLE SCAN     | N1       | 1         | 4    |
+----------------------------------------------------------+
Outputs & filters:
0 - output([TO_CHAR(orders.o_orderdate , 'yyyy')], [SUM(CASE WHEN n2.n_name = 'INDIA' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END) / SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([TO_CHAR(orders.o_orderdate , 'yyyy') ASC])
1 - output([orders.o_orderdate], [SUM(CASE WHEN n2.n_name = 'INDIA' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([TO_CHAR(orders.o_orderdate , 'yyyy')])
aggr_exprs([SUM(CASE WHEN n2.n_name = 'INDIA' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([orders.o_orderdate], [n2.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([part.p_partkey = lineitem.l_partkey])
3 - output([part.p_partkey])
filters([part.p_type = 'SMALL PLATED COPPER'])
access([part.p_partkey], [part.p_type])
4 - output([lineitem.l_partkey], [orders.o_orderdate], [n2.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_nationkey = n2.n_nationkey])
5 - output([n2.n_nationkey], [n2.n_name])
access([n2.n_nationkey], [n2.n_name])
6 - output([supplier.s_nationkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([orders.o_custkey = customer.c_custkey])
7 - output([orders.o_custkey], [supplier.s_nationkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_suppkey = lineitem.l_suppkey])
8 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
9 - output([lineitem.l_suppkey], [orders.o_custkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
10 - output([lineitem.l_orderkey], [lineitem.l_suppkey], [lineitem.l_partkey], [lineitem.l_extendedprice], [lineitem.l_discount])
access([lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
11 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate])
filters([orders.o_orderdate BETWEEN 1995-01-01 00:00:00 AND 1996-12-31 00:00:00])
access([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate])
12 - output([customer.c_custkey])
equal_join_conditions([n1.n_regionkey = region.r_regionkey])
13 - output([region.r_regionkey])
filters([region.r_name = 'ASIA'])
access([region.r_regionkey], [region.r_name])
14 - output([n1.n_regionkey], [customer.c_custkey])
equal_join_conditions([customer.c_nationkey = n1.n_nationkey])
15 - output([customer.c_nationkey], [customer.c_custkey])
access([customer.c_custkey], [customer.c_nationkey])
16 - output([n1.n_nationkey], [n1.n_regionkey])
access([n1.n_nationkey], [n1.n_regionkey])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 part, (n2, ((supplier, (lineitem, orders)), (region, (customer, n1)))))
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 lineitem, orders)
USE_HASH(@SEL1 n1)
USE_HASH(@SEL1 customer, n1)
USE_HASH(@SEL1 region, customer, n1)
USE_HASH(@SEL1 supplier, lineitem, orders, region, customer, n1)
USE_HASH(@SEL1 n2, supplier, lineitem, orders, region, customer, n1)
MERGE(@SEL2)
END_OUTLINE_DATA
*/

explain /*Q22*/
SELECT nation,
o_year,
Sum(amount) AS sum_profit
FROM   (SELECT n_name
AS
nation,
To_char(o_orderdate, 'yyyy')
AS
o_year,
l_extendedprice * ( 1 - l_discount ) - ps_supplycost * l_quantity
AS
amount
FROM   part,
supplier,
lineitem,
partsupp,
orders,
nation
WHERE  s_suppkey = l_suppkey
AND ps_suppkey = l_suppkey
AND ps_partkey = l_partkey
AND p_partkey = l_partkey
AND o_orderkey = l_orderkey
AND s_nationkey = n_nationkey
AND p_name LIKE '%dim%') AS profit
GROUP  BY nation,
o_year
ORDER  BY nation,
o_year DESC

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 26   |
| 1  |  HASH GROUP BY       |          | 1         | 26   |
| 2  |   HASH Inner JOIN    |          | 1         | 26   |
| 3  |    TABLE SCAN        | PARTSUPP | 1         | 4    |
| 4  |    HASH Inner JOIN   |          | 1         | 21   |
| 5  |     HASH Inner JOIN  |          | 1         | 8    |
| 6  |      TABLE SCAN      | SUPPLIER | 1         | 4    |
| 7  |      TABLE SCAN      | NATION   | 1         | 4    |
| 8  |     HASH Inner JOIN  |          | 1         | 13   |
| 9  |      TABLE SCAN      | PART     | 1         | 4    |
| 10 |      HASH Inner JOIN |          | 1         | 8    |
| 11 |       TABLE SCAN     | LINEITEM | 1         | 4    |
| 12 |       TABLE SCAN     | ORDERS   | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([nation.n_name], [TO_CHAR(orders.o_orderdate , 'yyyy')], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)])
sort_keys([nation.n_name ASC], [TO_CHAR(orders.o_orderdate , 'yyyy') DESC])
1 - output([nation.n_name], [orders.o_orderdate], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)])
group_by_exprs([nation.n_name], [TO_CHAR(orders.o_orderdate , 'yyyy')])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)])
2 - output([nation.n_name], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [partsupp.ps_supplycost], [lineitem.l_quantity])
equal_join_conditions([partsupp.ps_suppkey = lineitem.l_suppkey], [partsupp.ps_partkey = lineitem.l_partkey])
3 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
access([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
4 - output([lineitem.l_suppkey], [lineitem.l_partkey], [nation.n_name], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
equal_join_conditions([supplier.s_suppkey = lineitem.l_suppkey])
5 - output([supplier.s_suppkey], [nation.n_name])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
6 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
7 - output([nation.n_nationkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_name])
8 - output([lineitem.l_suppkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
equal_join_conditions([part.p_partkey = lineitem.l_partkey])
9 - output([part.p_partkey])
filters([part.p_name LIKE '%dim%'])
access([part.p_partkey], [part.p_name])
10 - output([lineitem.l_partkey], [lineitem.l_suppkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
11 - output([lineitem.l_orderkey], [lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
access([lineitem.l_suppkey], [lineitem.l_partkey], [lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
12 - output([orders.o_orderkey], [orders.o_orderdate])
access([orders.o_orderkey], [orders.o_orderdate])

outline:
/*+
BEGIN_OUTLINE_DATA
LEADING(@SEL1 partsupp, ((supplier, nation), (part, (lineitem, orders))))
USE_HASH(@SEL1 nation)
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 lineitem, orders)
USE_HASH(@SEL1 part, lineitem, orders)
USE_HASH(@SEL1 supplier, nation, part, lineitem, orders)
MERGE(@SEL2)
END_OUTLINE_DATA
*/

Bye
