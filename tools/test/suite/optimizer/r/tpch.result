

DROP DATABASE IF EXISTS TPCH

CREATE DATABASE TPCH

CREATE TABLE TPCH.NATION  ( N_NATIONKEY  INTEGER NOT NULL,
N_NAME       CHAR(25) NOT NULL,
N_REGIONKEY  INTEGER NOT NULL,
N_COMMENT    VARCHAR(152))

CREATE TABLE TPCH.REGION  ( R_REGIONKEY  INTEGER NOT NULL,
R_NAME       CHAR(25) NOT NULL,
R_COMMENT    VARCHAR(152))

CREATE TABLE TPCH.PART  ( P_PARTKEY     INTEGER NOT NULL,
P_NAME        VARCHAR(55) NOT NULL,
P_MFGR        CHAR(25) NOT NULL,
P_BRAND       CHAR(10) NOT NULL,
P_TYPE        VARCHAR(25) NOT NULL,
P_SIZE        INTEGER NOT NULL,
P_CONTAINER   CHAR(10) NOT NULL,
P_RETAILPRICE DECIMAL(15,2) NOT NULL,
P_COMMENT     VARCHAR(23) NOT NULL )

CREATE TABLE TPCH.SUPPLIER ( S_SUPPKEY     INTEGER NOT NULL,
S_NAME        CHAR(25) NOT NULL,
S_ADDRESS     VARCHAR(40) NOT NULL,
S_NATIONKEY   INTEGER NOT NULL,
S_PHONE       CHAR(15) NOT NULL,
S_ACCTBAL     DECIMAL(15,2) NOT NULL,
S_COMMENT     VARCHAR(101) NOT NULL)

CREATE TABLE TPCH.PARTSUPP ( PS_PARTKEY     INTEGER NOT NULL,
PS_SUPPKEY     INTEGER NOT NULL,
PS_AVAILQTY    INTEGER NOT NULL,
PS_SUPPLYCOST  DECIMAL(15,2)  NOT NULL,
PS_COMMENT     VARCHAR(199) NOT NULL )

CREATE TABLE TPCH.CUSTOMER ( C_CUSTKEY     INTEGER NOT NULL,
C_NAME        VARCHAR(25) NOT NULL,
C_ADDRESS     VARCHAR(40) NOT NULL,
C_NATIONKEY   INTEGER NOT NULL,
C_PHONE       CHAR(15) NOT NULL,
C_ACCTBAL     DECIMAL(15,2)   NOT NULL,
C_MKTSEGMENT  CHAR(10) NOT NULL,
C_COMMENT     VARCHAR(117) NOT NULL)

CREATE TABLE TPCH.ORDERS  ( O_ORDERKEY       INTEGER NOT NULL,
O_CUSTKEY        INTEGER NOT NULL,
O_ORDERSTATUS    CHAR(1) NOT NULL,
O_TOTALPRICE     DECIMAL(15,2) NOT NULL,
O_ORDERDATE      DATE NOT NULL,
O_ORDERPRIORITY  CHAR(15) NOT NULL,
O_CLERK          CHAR(15) NOT NULL,
O_SHIPPRIORITY   INTEGER NOT NULL,
O_COMMENT        VARCHAR(79) NOT NULL)

CREATE TABLE TPCH.LINEITEM ( L_ORDERKEY    INTEGER NOT NULL,
L_PARTKEY     INTEGER NOT NULL,
L_SUPPKEY     INTEGER NOT NULL,
L_LINENUMBER  INTEGER NOT NULL,
L_QUANTITY    DECIMAL(15,2) NOT NULL,
L_EXTENDEDPRICE  DECIMAL(15,2) NOT NULL,
L_DISCOUNT    DECIMAL(15,2) NOT NULL,
L_TAX         DECIMAL(15,2) NOT NULL,
L_RETURNFLAG  CHAR(1) NOT NULL,
L_LINESTATUS  CHAR(1) NOT NULL,
L_SHIPDATE    DATE NOT NULL,
L_COMMITDATE  DATE NOT NULL,
L_RECEIPTDATE DATE NOT NULL,
L_SHIPINSTRUCT CHAR(25) NOT NULL,
L_SHIPMODE     CHAR(10) NOT NULL,
L_COMMENT      VARCHAR(44) NOT NULL)

explain
SELECT /*TPCH_Q1*/
l_returnflag,
l_linestatus,
sum(l_quantity) as sum_qty,
sum(l_extendedprice) as sum_base_price,
sum(l_extendedprice * (1 - l_discount)) as sum_disc_price,
sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)) as sum_charge,
avg(l_quantity) as avg_qty,
avg(l_extendedprice) as avg_price,
avg(l_discount) as avg_disc,
count(*) as count_order
from
lineitem
where
l_shipdate <= date'1998-12-01' - interval '90' day
group by
l_returnflag,
l_linestatus
order by
l_returnflag,
l_linestatus

Query Plan:
+---------------------------------------------------+
| ID | OPERATOR       | NAME     | ROW COUNT | COST |
+---------------------------------------------------+
| 0  | SORT           |          | 1         | 5    |
| 1  |  HASH GROUP BY |          | 1         | 5    |
| 2  |   TABLE SCAN   | LINEITEM | 1         | 4    |
+---------------------------------------------------+
Outputs & filters:
0 - output([lineitem.l_returnflag], [lineitem.l_linestatus], [SUM(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount * 1 + lineitem.l_tax)], [CAST(SUM(lineitem.l_quantity) AS NUMBER(72, 38)) / COUNT(lineitem.l_quantity)], [CAST(SUM(lineitem.l_extendedprice) AS NUMBER(72, 38)) / COUNT(lineitem.l_extendedprice)], [CAST(SUM(lineitem.l_discount) AS NUMBER(72, 38)) / COUNT(lineitem.l_discount)], [COUNT(1)])
sort_keys([lineitem.l_returnflag ASC], [lineitem.l_linestatus ASC])
1 - output([lineitem.l_returnflag], [lineitem.l_linestatus], [SUM(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount * 1 + lineitem.l_tax)], [COUNT(lineitem.l_quantity)], [COUNT(lineitem.l_extendedprice)], [SUM(lineitem.l_discount)], [COUNT(lineitem.l_discount)], [COUNT(1)])
group_by_exprs([lineitem.l_returnflag], [lineitem.l_linestatus])
aggr_exprs([SUM(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount * 1 + lineitem.l_tax)], [SUM(lineitem.l_quantity)], [COUNT(lineitem.l_quantity)], [SUM(lineitem.l_extendedprice)], [COUNT(lineitem.l_extendedprice)], [SUM(lineitem.l_discount)], [COUNT(lineitem.l_discount)], [COUNT(1)])
2 - output([lineitem.l_returnflag], [lineitem.l_linestatus], [lineitem.l_quantity], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_tax])
filters([lineitem.l_shipdate <= DATE_SUB(1998-12-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_returnflag], [lineitem.l_linestatus], [lineitem.l_quantity], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_tax])

outline:
/*+
BEGIN_OUTLINE_DATA
END_OUTLINE_DATA
*/

explain
SELECT /*TPCH_Q2*/
s_acctbal, s_name, n_name,
p_partkey, p_mfgr, s_address, s_phone, s_comment
from part, supplier, partsupp, nation, region
where p_partkey = ps_partkey and
s_suppkey = ps_suppkey and
p_size = 30 and
p_type like '%STEEL' and
s_nationkey = n_nationkey and
n_regionkey = r_regionkey and
r_name = 'ASIA' and
ps_supplycost = ( SELECT min(ps_supplycost)
from partsupp, supplier, nation, region
where p_partkey = ps_partkey and
s_suppkey = ps_suppkey and
s_nationkey = n_nationkey and
n_regionkey = r_regionkey and r_name = 'ASIA' )
order by s_acctbal desc, n_name, s_name, p_partkey
limit 100

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | TOP_N SORT              |          | 1         | 40   |
| 1  |  HASH Inner JOIN        |          | 1         | 40   |
| 2  |   TABLE SCAN            | REGION   | 1         | 4    |
| 3  |   HASH Inner JOIN       |          | 1         | 35   |
| 4  |    TABLE SCAN           | NATION   | 1         | 4    |
| 5  |    HASH RightOuter JOIN |          | 1         | 31   |
| 6  |     VIEW                | VIEW1    | 1         | 17   |
| 7  |      HASH GROUP BY      |          | 1         | 17   |
| 8  |       HASH Inner JOIN   |          | 1         | 17   |
| 9  |        TABLE SCAN       | PARTSUPP | 1         | 4    |
| 10 |        HASH Inner JOIN  |          | 1         | 13   |
| 11 |         TABLE SCAN      | REGION   | 1         | 4    |
| 12 |         HASH Inner JOIN |          | 1         | 8    |
| 13 |          TABLE SCAN     | SUPPLIER | 1         | 4    |
| 14 |          TABLE SCAN     | NATION   | 1         | 4    |
| 15 |     HASH Inner JOIN     |          | 1         | 13   |
| 16 |      TABLE SCAN         | PART     | 1         | 4    |
| 17 |      HASH Inner JOIN    |          | 1         | 8    |
| 18 |       TABLE SCAN        | SUPPLIER | 1         | 4    |
| 19 |       TABLE SCAN        | PARTSUPP | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_acctbal], [supplier.s_name], [nation.n_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
sort_keys([supplier.s_acctbal DESC], [nation.n_name ASC], [supplier.s_name ASC], [part.p_partkey ASC])
top_n([100])
1 - output([supplier.s_acctbal], [nation.n_name], [supplier.s_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([nation.n_regionkey = region.r_regionkey])
2 - output([region.r_regionkey])
filters([region.r_name = 'ASIA'])
access([region.r_regionkey], [region.r_name])
3 - output([nation.n_regionkey], [supplier.s_acctbal], [nation.n_name], [supplier.s_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
4 - output([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])
5 - output([supplier.s_nationkey], [supplier.s_acctbal], [supplier.s_name], [part.p_partkey], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
filters([partsupp.ps_supplycost = VIEW1.C1])
equal_join_conditions([part.p_partkey = VIEW1.C1])
6 - output([VIEW1.C1], [VIEW1.C1])
7 - output([partsupp.ps_partkey], [MIN(partsupp.ps_supplycost)])
group_by_exprs([partsupp.ps_partkey])
aggr_exprs([MIN(partsupp.ps_supplycost)])
8 - output([partsupp.ps_partkey], [partsupp.ps_supplycost])
equal_join_conditions([supplier.s_suppkey = partsupp.ps_suppkey])
9 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
access([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
10 - output([supplier.s_suppkey])
equal_join_conditions([nation.n_regionkey = region.r_regionkey])
11 - output([region.r_regionkey])
filters([region.r_name = 'ASIA'])
access([region.r_regionkey], [region.r_name])
12 - output([nation.n_regionkey], [supplier.s_suppkey])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
13 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
14 - output([nation.n_nationkey], [nation.n_regionkey])
access([nation.n_nationkey], [nation.n_regionkey])
15 - output([part.p_partkey], [partsupp.ps_supplycost], [supplier.s_nationkey], [supplier.s_acctbal], [supplier.s_name], [part.p_mfgr], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([part.p_partkey = partsupp.ps_partkey])
16 - output([part.p_partkey], [part.p_mfgr])
filters([part.p_size = 30], [part.p_type LIKE '%STEEL'])
access([part.p_partkey], [part.p_size], [part.p_type], [part.p_mfgr])
17 - output([partsupp.ps_partkey], [partsupp.ps_supplycost], [supplier.s_nationkey], [supplier.s_acctbal], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
equal_join_conditions([supplier.s_suppkey = partsupp.ps_suppkey])
18 - output([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_acctbal], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
access([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_acctbal], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [supplier.s_comment])
19 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
access([partsupp.ps_partkey], [partsupp.ps_suppkey], [partsupp.ps_supplycost])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL2)
USE_HASH(@SEL2 nation)
USE_HASH(@SEL2 supplier, nation)
USE_HASH(@SEL2 region, supplier, nation)
LEADING(@SEL2 partsupp, (region, (supplier, nation)))
USE_HASH(@SEL1 partsupp)
USE_HASH(@SEL1 supplier, partsupp)
USE_HASH(@SEL1 part, supplier, partsupp)
USE_HASH(@SEL1 VIEW1, part, supplier, partsupp)
USE_HASH(@SEL1 nation, VIEW1, part, supplier, partsupp)
LEADING(@SEL1 region, (nation, (VIEW1, (part, (supplier, partsupp)))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q3
*/  l_orderkey,
o_orderdate,
o_shippriority,
sum(l_extendedprice * (1 - l_discount)) as revenue
from customer, orders, lineitem
where c_mktsegment = 'BUILDING' and
c_custkey = o_custkey and
l_orderkey = o_orderkey and
o_orderdate <  date'1995-03-15' and
l_shipdate >  date'1995-03-15'
group by l_orderkey, o_orderdate, o_shippriority
order by revenue desc, o_orderdate
limit 10

Query Plan:
+-------------------------------------------------------+
| ID | OPERATOR           | NAME     | ROW COUNT | COST |
+-------------------------------------------------------+
| 0  | TOP_N SORT         |          | 1         | 13   |
| 1  |  HASH GROUP BY     |          | 1         | 13   |
| 2  |   HASH Inner JOIN  |          | 1         | 13   |
| 3  |    TABLE SCAN      | CUSTOMER | 1         | 4    |
| 4  |    HASH Inner JOIN |          | 1         | 8    |
| 5  |     TABLE SCAN     | ORDERS   | 1         | 4    |
| 6  |     TABLE SCAN     | LINEITEM | 1         | 4    |
+-------------------------------------------------------+
Outputs & filters:
0 - output([lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount) DESC], [orders.o_orderdate ASC])
top_n([10])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [orders.o_orderdate], [lineitem.l_orderkey], [orders.o_shippriority])
group_by_exprs([lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
3 - output([customer.c_custkey])
filters([customer.c_mktsegment = 'BUILDING'])
access([customer.c_mktsegment], [customer.c_custkey])
4 - output([orders.o_custkey], [lineitem.l_orderkey], [orders.o_orderdate], [orders.o_shippriority], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
5 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate], [orders.o_shippriority])
filters([orders.o_orderdate < 1995-03-15 00:00:00])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_shippriority])
6 - output([lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate > 1995-03-15 00:00:00])
access([lineitem.l_orderkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_HASH(@SEL1 lineitem)
USE_HASH(@SEL1 orders, lineitem)
LEADING(@SEL1 customer, (orders, lineitem))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q4
*/ o_orderpriority, count(*) as order_count
from orders
where o_orderdate >= DATE'1993-07-01' and
o_orderdate < DATE'1993-07-01' + interval '3' month and
exists ( SELECT *
from lineitem
where l_orderkey = o_orderkey and
l_commitdate < l_receiptdate )
group by o_orderpriority
order by o_orderpriority

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 8    |
| 1  |  HASH GROUP BY       |          | 1         | 8    |
| 2  |   HASH LeftSemi JOIN |          | 1         | 8    |
| 3  |    TABLE SCAN        | ORDERS   | 1         | 4    |
| 4  |    TABLE SCAN        | LINEITEM | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([orders.o_orderpriority], [COUNT(1)])
sort_keys([orders.o_orderpriority ASC])
1 - output([orders.o_orderpriority], [COUNT(1)])
group_by_exprs([orders.o_orderpriority])
aggr_exprs([COUNT(1)])
2 - output([orders.o_orderpriority])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
3 - output([orders.o_orderkey], [orders.o_orderpriority])
filters([orders.o_orderdate >= 1993-07-01 00:00:00], [orders.o_orderdate < DATE_ADD(1993-07-01 00:00:00, ?)])
access([orders.o_orderdate], [orders.o_orderkey], [orders.o_orderpriority])
4 - output([lineitem.l_orderkey])
filters([lineitem.l_commitdate < lineitem.l_receiptdate])
access([lineitem.l_orderkey], [lineitem.l_commitdate], [lineitem.l_receiptdate])

outline:
/*+
BEGIN_OUTLINE_DATA
SIMPLIFY_SQ(@SEL2)
UNNEST(@SEL2)
MERGE(@SEL2)
USE_HASH(@SEL1 lineitem)
LEADING(@SEL1 orders, lineitem)
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q5
*/ N_NAME, SUM(L_EXTENDEDPRICE*(1-L_DISCOUNT)) AS REVENUE
FROM CUSTOMER, ORDERS, LINEITEM, SUPPLIER, NATION, REGION
WHERE C_CUSTKEY = O_CUSTKEY AND
L_ORDERKEY = O_ORDERKEY AND
L_SUPPKEY = S_SUPPKEY AND
C_NATIONKEY = S_NATIONKEY AND
C_NATIONKEY = N_NATIONKEY AND
N_REGIONKEY = R_REGIONKEY AND
R_NAME = 'EUROPE' AND
O_ORDERDATE >= DATE'1995-01-01' AND
O_ORDERDATE < DATE'1995-01-01' + interval '1' year
GROUP BY N_NAME
ORDER BY REVENUE DESC

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 26   |
| 1  |  HASH GROUP BY       |          | 1         | 26   |
| 2  |   HASH Inner JOIN    |          | 1         | 26   |
| 3  |    HASH Inner JOIN   |          | 1         | 8    |
| 4  |     TABLE SCAN       | NATION   | 1         | 4    |
| 5  |     TABLE SCAN       | REGION   | 1         | 4    |
| 6  |    HASH Inner JOIN   |          | 1         | 17   |
| 7  |     TABLE SCAN       | SUPPLIER | 1         | 4    |
| 8  |     HASH Inner JOIN  |          | 1         | 13   |
| 9  |      TABLE SCAN      | LINEITEM | 1         | 4    |
| 10 |      HASH Inner JOIN |          | 1         | 8    |
| 11 |       TABLE SCAN     | CUSTOMER | 1         | 4    |
| 12 |       TABLE SCAN     | ORDERS   | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([nation.n_name], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount) DESC])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [nation.n_name])
group_by_exprs([nation.n_name])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([nation.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([customer.c_nationkey = nation.n_nationkey])
3 - output([nation.n_nationkey], [nation.n_name])
equal_join_conditions([nation.n_regionkey = region.r_regionkey])
4 - output([nation.n_regionkey], [nation.n_nationkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_regionkey], [nation.n_name])
5 - output([region.r_regionkey])
filters([region.r_name = 'EUROPE'])
access([region.r_regionkey], [region.r_name])
6 - output([customer.c_nationkey], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_suppkey = supplier.s_suppkey], [customer.c_nationkey = supplier.s_nationkey])
7 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
8 - output([lineitem.l_suppkey], [customer.c_nationkey], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
9 - output([lineitem.l_orderkey], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
access([lineitem.l_orderkey], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
10 - output([orders.o_orderkey], [customer.c_nationkey])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
11 - output([customer.c_custkey], [customer.c_nationkey])
access([customer.c_custkey], [customer.c_nationkey])
12 - output([orders.o_custkey], [orders.o_orderkey])
filters([orders.o_orderdate >= 1995-01-01 00:00:00], [orders.o_orderdate < DATE_ADD(1995-01-01 00:00:00, ?)])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_HASH(@SEL1 region)
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 customer, orders)
USE_HASH(@SEL1 lineitem, customer, orders)
USE_HASH(@SEL1 supplier, lineitem, customer, orders)
LEADING(@SEL1 (nation, region), (supplier, (lineitem, (customer, orders))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q6
*/ sum(l_extendedprice * l_discount) as revenue
from lineitem
where l_shipdate >= DATE'1994-01-01' and
l_shipdate < DATE'1994-01-01' + interval  '12' month and
l_discount between .06 - 0.01 and .06 + 0.01 and l_quantity < 24

Query Plan:
+----------------------------------------------------+
| ID | OPERATOR        | NAME     | ROW COUNT | COST |
+----------------------------------------------------+
| 0  | SCALAR GROUP BY |          | 1         | 4    |
| 1  |  TABLE SCAN     | LINEITEM | 1         | 4    |
+----------------------------------------------------+
Outputs & filters:
0 - output([SUM(lineitem.l_extendedprice * lineitem.l_discount)])
aggr_exprs([SUM(lineitem.l_extendedprice * lineitem.l_discount)])
1 - output([lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1994-01-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1994-01-01 00:00:00, ?)], [lineitem.l_discount BETWEEN 0.06 - 0.01 AND 0.06 + 0.01], [lineitem.l_quantity < 24])
access([lineitem.l_shipdate], [lineitem.l_discount], [lineitem.l_quantity], [lineitem.l_extendedprice])

outline:
/*+
BEGIN_OUTLINE_DATA
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q7
*/  supp_nation, cust_nation, l_year, sum(volume) as revenue
from ( SELECT n1.n_name as supp_nation,
n2.n_name as cust_nation,
to_number (to_char(l_shipdate, 'yyyy')) as l_year,
l_extendedprice * (1 - l_discount) as volume
from supplier, lineitem, orders, customer, nation n1, nation n2
where s_suppkey = l_suppkey and
o_orderkey = l_orderkey and
c_custkey = o_custkey and
s_nationkey = n1.n_nationkey and
c_nationkey = n2.n_nationkey and
( (n1.n_name = 'FRANCE' and n2.n_name = 'GERMANY') or
(n1.n_name = 'GERMANY' and n2.n_name = 'FRANCE') ) and
l_shipdate between  date'1995-01-01' and date'1996-12-31' ) shipping
group by supp_nation, cust_nation, l_year order by supp_nation, cust_nation, l_year

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 26   |
| 1  |  HASH GROUP BY       |          | 1         | 26   |
| 2  |   HASH Inner JOIN    |          | 1         | 26   |
| 3  |    TABLE SCAN        | N1       | 1         | 4    |
| 4  |    HASH Inner JOIN   |          | 1         | 21   |
| 5  |     HASH Inner JOIN  |          | 1         | 8    |
| 6  |      TABLE SCAN      | SUPPLIER | 1         | 4    |
| 7  |      TABLE SCAN      | LINEITEM | 1         | 4    |
| 8  |     HASH Inner JOIN  |          | 1         | 12   |
| 9  |      TABLE SCAN      | ORDERS   | 1         | 4    |
| 10 |      HASH Inner JOIN |          | 1         | 8    |
| 11 |       TABLE SCAN     | CUSTOMER | 1         | 4    |
| 12 |       TABLE SCAN     | N2       | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([n1.n_name], [n2.n_name], [TO_NUMBER(TO_CHAR(lineitem.l_shipdate , 'yyyy'))], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([n1.n_name ASC], [n2.n_name ASC], [TO_NUMBER(TO_CHAR(lineitem.l_shipdate , 'yyyy')) ASC])
1 - output([n1.n_name], [n2.n_name], [lineitem.l_shipdate], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([n1.n_name], [n2.n_name], [TO_NUMBER(TO_CHAR(lineitem.l_shipdate , 'yyyy'))])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([n1.n_name], [n2.n_name], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_nationkey = n1.n_nationkey])
other_join_conditions([n1.n_name = 'FRANCE' AND n2.n_name = 'GERMANY' OR n1.n_name = 'GERMANY' AND n2.n_name = 'FRANCE'])
3 - output([n1.n_nationkey], [n1.n_name])
access([n1.n_nationkey], [n1.n_name])
4 - output([supplier.s_nationkey], [n2.n_name], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
5 - output([lineitem.l_orderkey], [supplier.s_nationkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_suppkey = lineitem.l_suppkey])
6 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
7 - output([lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate BETWEEN 1995-01-01 00:00:00 AND 1996-12-31 00:00:00])
access([lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
8 - output([orders.o_orderkey], [n2.n_name])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
9 - output([orders.o_custkey], [orders.o_orderkey])
access([orders.o_orderkey], [orders.o_custkey])
10 - output([customer.c_custkey], [n2.n_name])
equal_join_conditions([customer.c_nationkey = n2.n_nationkey])
11 - output([customer.c_nationkey], [customer.c_custkey])
access([customer.c_custkey], [customer.c_nationkey])
12 - output([n2.n_nationkey], [n2.n_name])
access([n2.n_nationkey], [n2.n_name])

outline:
/*+
BEGIN_OUTLINE_DATA
MERGE(@SEL2)
USE_HASH(@SEL1 lineitem)
USE_HASH(@SEL1 n2)
USE_HASH(@SEL1 customer, n2)
USE_HASH(@SEL1 orders, customer, n2)
USE_HASH(@SEL1 supplier, lineitem, orders, customer, n2)
LEADING(@SEL1 n1, ((supplier, lineitem), (orders, (customer, n2))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q8
*/  o_year, sum(case when nation='BRAZIL' then volume else 0 end )/ sum(volume) as mkt_share
from ( SELECT TO_CHAR(o_orderdate,'YYYY') as o_year,
l_extendedprice * (1 - l_discount) as volume, n2.n_name as nation
from part, supplier, lineitem, orders, customer, nation n1, nation n2, region
where p_partkey = l_partkey and
s_suppkey = l_suppkey and
l_orderkey = o_orderkey and
o_custkey = c_custkey and
c_nationkey = n1.n_nationkey and
n1.n_regionkey = r_regionkey and
r_name = 'AMERICA' and
s_nationkey = n2.n_nationkey and
o_orderdate between date'1995-01-01' and date'1996-12-31' and
p_type = 'ECONOMY ANODIZED STEEL' ) all_nations
group by o_year
order by o_year

Query Plan:
+----------------------------------------------------------+
| ID | OPERATOR              | NAME     | ROW COUNT | COST |
+----------------------------------------------------------+
| 0  | SORT                  |          | 1         | 35   |
| 1  |  HASH GROUP BY        |          | 1         | 35   |
| 2  |   HASH Inner JOIN     |          | 1         | 35   |
| 3  |    TABLE SCAN         | PART     | 1         | 4    |
| 4  |    HASH Inner JOIN    |          | 1         | 30   |
| 5  |     TABLE SCAN        | N2       | 1         | 4    |
| 6  |     HASH Inner JOIN   |          | 1         | 26   |
| 7  |      HASH Inner JOIN  |          | 1         | 13   |
| 8  |       TABLE SCAN      | SUPPLIER | 1         | 4    |
| 9  |       HASH Inner JOIN |          | 1         | 8    |
| 10 |        TABLE SCAN     | LINEITEM | 1         | 4    |
| 11 |        TABLE SCAN     | ORDERS   | 1         | 4    |
| 12 |      HASH Inner JOIN  |          | 1         | 13   |
| 13 |       TABLE SCAN      | REGION   | 1         | 4    |
| 14 |       HASH Inner JOIN |          | 1         | 8    |
| 15 |        TABLE SCAN     | CUSTOMER | 1         | 4    |
| 16 |        TABLE SCAN     | N1       | 1         | 4    |
+----------------------------------------------------------+
Outputs & filters:
0 - output([TO_CHAR(orders.o_orderdate , 'YYYY')], [SUM(CASE WHEN n2.n_name = 'BRAZIL' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END) / SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
sort_keys([TO_CHAR(orders.o_orderdate , 'YYYY') ASC])
1 - output([orders.o_orderdate], [SUM(CASE WHEN n2.n_name = 'BRAZIL' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([TO_CHAR(orders.o_orderdate , 'YYYY')])
aggr_exprs([SUM(CASE WHEN n2.n_name = 'BRAZIL' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([orders.o_orderdate], [n2.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([part.p_partkey = lineitem.l_partkey])
3 - output([part.p_partkey])
filters([part.p_type = 'ECONOMY ANODIZED STEEL'])
access([part.p_partkey], [part.p_type])
4 - output([lineitem.l_partkey], [orders.o_orderdate], [n2.n_name], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_nationkey = n2.n_nationkey])
5 - output([n2.n_nationkey], [n2.n_name])
access([n2.n_nationkey], [n2.n_name])
6 - output([supplier.s_nationkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([orders.o_custkey = customer.c_custkey])
7 - output([orders.o_custkey], [supplier.s_nationkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([supplier.s_suppkey = lineitem.l_suppkey])
8 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
9 - output([lineitem.l_suppkey], [orders.o_custkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
10 - output([lineitem.l_orderkey], [lineitem.l_suppkey], [lineitem.l_partkey], [lineitem.l_extendedprice], [lineitem.l_discount])
access([lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
11 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate])
filters([orders.o_orderdate BETWEEN 1995-01-01 00:00:00 AND 1996-12-31 00:00:00])
access([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate])
12 - output([customer.c_custkey])
equal_join_conditions([n1.n_regionkey = region.r_regionkey])
13 - output([region.r_regionkey])
filters([region.r_name = 'AMERICA'])
access([region.r_regionkey], [region.r_name])
14 - output([n1.n_regionkey], [customer.c_custkey])
equal_join_conditions([customer.c_nationkey = n1.n_nationkey])
15 - output([customer.c_nationkey], [customer.c_custkey])
access([customer.c_custkey], [customer.c_nationkey])
16 - output([n1.n_nationkey], [n1.n_regionkey])
access([n1.n_nationkey], [n1.n_regionkey])

outline:
/*+
BEGIN_OUTLINE_DATA
MERGE(@SEL2)
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 lineitem, orders)
USE_HASH(@SEL1 n1)
USE_HASH(@SEL1 customer, n1)
USE_HASH(@SEL1 region, customer, n1)
USE_HASH(@SEL1 supplier, lineitem, orders, region, customer, n1)
USE_HASH(@SEL1 n2, supplier, lineitem, orders, region, customer, n1)
LEADING(@SEL1 part, (n2, ((supplier, (lineitem, orders)), (region, (customer, n1)))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q9
*/ NATION, O_YEAR, SUM(AMOUNT) AS SUM_PROFIT
FROM (SELECT N_NAME AS NATION,
TO_CHAR(O_ORDERDATE, 'YYYY') AS O_YEAR,
L_EXTENDEDPRICE*(1-L_DISCOUNT)-PS_SUPPLYCOST*L_QUANTITY AS AMOUNT
FROM PART, SUPPLIER, LINEITEM, PARTSUPP, ORDERS, NATION
WHERE S_SUPPKEY = L_SUPPKEY AND
PS_SUPPKEY= L_SUPPKEY AND
PS_PARTKEY = L_PARTKEY AND
P_PARTKEY= L_PARTKEY AND
O_ORDERKEY = L_ORDERKEY AND
S_NATIONKEY = N_NATIONKEY AND
P_NAME LIKE '%%green%%') PROFIT
GROUP BY NATION, O_YEAR ORDER BY SUM_PROFIT, NATION, O_YEAR DESC

Query Plan:
+---------------------------------------------------------+
| ID | OPERATOR             | NAME     | ROW COUNT | COST |
+---------------------------------------------------------+
| 0  | SORT                 |          | 1         | 26   |
| 1  |  HASH GROUP BY       |          | 1         | 26   |
| 2  |   HASH Inner JOIN    |          | 1         | 26   |
| 3  |    TABLE SCAN        | PARTSUPP | 1         | 4    |
| 4  |    HASH Inner JOIN   |          | 1         | 21   |
| 5  |     HASH Inner JOIN  |          | 1         | 8    |
| 6  |      TABLE SCAN      | SUPPLIER | 1         | 4    |
| 7  |      TABLE SCAN      | NATION   | 1         | 4    |
| 8  |     HASH Inner JOIN  |          | 1         | 13   |
| 9  |      TABLE SCAN      | PART     | 1         | 4    |
| 10 |      HASH Inner JOIN |          | 1         | 8    |
| 11 |       TABLE SCAN     | LINEITEM | 1         | 4    |
| 12 |       TABLE SCAN     | ORDERS   | 1         | 4    |
+---------------------------------------------------------+
Outputs & filters:
0 - output([nation.n_name], [TO_CHAR(orders.o_orderdate , 'YYYY')], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity) ASC], [nation.n_name ASC], [TO_CHAR(orders.o_orderdate , 'YYYY') DESC])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)], [nation.n_name], [orders.o_orderdate])
group_by_exprs([nation.n_name], [TO_CHAR(orders.o_orderdate , 'YYYY')])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount - partsupp.ps_supplycost * lineitem.l_quantity)])
2 - output([nation.n_name], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [partsupp.ps_supplycost], [lineitem.l_quantity])
equal_join_conditions([partsupp.ps_suppkey = lineitem.l_suppkey], [partsupp.ps_partkey = lineitem.l_partkey])
3 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
access([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost])
4 - output([lineitem.l_suppkey], [lineitem.l_partkey], [nation.n_name], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
equal_join_conditions([supplier.s_suppkey = lineitem.l_suppkey])
5 - output([supplier.s_suppkey], [nation.n_name])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
6 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
7 - output([nation.n_nationkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_name])
8 - output([lineitem.l_suppkey], [lineitem.l_partkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
equal_join_conditions([part.p_partkey = lineitem.l_partkey])
9 - output([part.p_partkey])
filters([part.p_name LIKE '%%green%%'])
access([part.p_partkey], [part.p_name])
10 - output([lineitem.l_partkey], [lineitem.l_suppkey], [orders.o_orderdate], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
11 - output([lineitem.l_orderkey], [lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
access([lineitem.l_suppkey], [lineitem.l_partkey], [lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount], [lineitem.l_quantity])
12 - output([orders.o_orderkey], [orders.o_orderdate])
access([orders.o_orderkey], [orders.o_orderdate])

outline:
/*+
BEGIN_OUTLINE_DATA
MERGE(@SEL2)
USE_HASH(@SEL1 nation)
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 lineitem, orders)
USE_HASH(@SEL1 part, lineitem, orders)
USE_HASH(@SEL1 supplier, nation, part, lineitem, orders)
LEADING(@SEL1 partsupp, ((supplier, nation), (part, (lineitem, orders))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q10
*/ c_custkey,
c_name,
sum(l_extendedprice * (1 - l_discount)) as revenue,
c_acctbal,
n_name,
c_address,
c_phone,
c_comment
from customer, orders, lineitem, nation
where c_custkey = o_custkey and
l_orderkey = o_orderkey and
o_orderdate >= DATE'1993-10-01' and
o_orderdate < DATE'1993-10-01' + interval '3' month and
l_returnflag = 'R' and
c_nationkey = n_nationkey
group by c_custkey, c_name, c_acctbal, c_phone, n_name, c_address, c_comment
order by revenue desc
limit 20

Query Plan:
+--------------------------------------------------------+
| ID | OPERATOR            | NAME     | ROW COUNT | COST |
+--------------------------------------------------------+
| 0  | TOP_N SORT          |          | 1         | 18   |
| 1  |  HASH GROUP BY      |          | 1         | 18   |
| 2  |   HASH Inner JOIN   |          | 1         | 17   |
| 3  |    TABLE SCAN       | LINEITEM | 1         | 4    |
| 4  |    HASH Inner JOIN  |          | 1         | 13   |
| 5  |     TABLE SCAN      | NATION   | 1         | 4    |
| 6  |     HASH Inner JOIN |          | 1         | 8    |
| 7  |      TABLE SCAN     | CUSTOMER | 1         | 4    |
| 8  |      TABLE SCAN     | ORDERS   | 1         | 4    |
+--------------------------------------------------------+
Outputs & filters:
0 - output([customer.c_custkey], [customer.c_name], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [customer.c_acctbal], [nation.n_name], [customer.c_address], [customer.c_phone], [customer.c_comment])
sort_keys([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount) DESC])
top_n([20])
1 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [customer.c_custkey], [customer.c_name], [customer.c_acctbal], [nation.n_name], [customer.c_address], [customer.c_phone], [customer.c_comment])
group_by_exprs([customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [nation.n_name], [customer.c_address], [customer.c_comment])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
2 - output([customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [nation.n_name], [customer.c_address], [customer.c_comment], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_orderkey = orders.o_orderkey])
3 - output([lineitem.l_orderkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_returnflag = 'R'])
access([lineitem.l_orderkey], [lineitem.l_returnflag], [lineitem.l_extendedprice], [lineitem.l_discount])
4 - output([orders.o_orderkey], [customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [nation.n_name], [customer.c_address], [customer.c_comment])
equal_join_conditions([customer.c_nationkey = nation.n_nationkey])
5 - output([nation.n_nationkey], [nation.n_name])
access([nation.n_nationkey], [nation.n_name])
6 - output([customer.c_nationkey], [orders.o_orderkey], [customer.c_custkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [customer.c_address], [customer.c_comment])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
7 - output([customer.c_custkey], [customer.c_nationkey], [customer.c_name], [customer.c_acctbal], [customer.c_phone], [customer.c_address], [customer.c_comment])
access([customer.c_custkey], [customer.c_nationkey], [customer.c_name], [customer.c_acctbal], [customer.c_address], [customer.c_phone], [customer.c_comment])
8 - output([orders.o_custkey], [orders.o_orderkey])
filters([orders.o_orderdate >= 1993-10-01 00:00:00], [orders.o_orderdate < DATE_ADD(1993-10-01 00:00:00, ?)])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 customer, orders)
USE_HASH(@SEL1 nation, customer, orders)
LEADING(@SEL1 lineitem, (nation, (customer, orders)))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q11
*/ ps_partkey,
Sum(ps_supplycost * ps_availqty) AS value
FROM   partsupp,
supplier,
nation
WHERE  ps_suppkey = s_suppkey
AND s_nationkey = n_nationkey
AND n_name = 'MOZAMBIQUE'
GROUP  BY ps_partkey
HAVING Sum(ps_supplycost * ps_availqty) > (SELECT
Sum(ps_supplycost * ps_availqty) * 0.0001000000
FROM   partsupp,
supplier,
nation
WHERE  ps_suppkey = s_suppkey
AND s_nationkey = n_nationkey
AND n_name = 'MOZAMBIQUE')
ORDER  BY value DESC

Query Plan:
+---------------------------------------------------------------+
| ID | OPERATOR                   | NAME     | ROW COUNT | COST |
+---------------------------------------------------------------+
| 0  | SORT                       |          | 1         | 30   |
| 1  |  HASH GROUP BY             |          | 1         | 30   |
| 2  |   HASH Inner JOIN          |          | 1         | 30   |
| 3  |    TABLE SCAN              | PARTSUPP | 1         | 4    |
| 4  |    HASH Inner JOIN         |          | 1         | 25   |
| 5  |     TABLE SCAN             | NATION   | 1         | 4    |
| 6  |     NESTED LOOP Inner JOIN |          | 1         | 21   |
| 7  |      VIEW                  | VIEW1    | 1         | 13   |
| 8  |       SCALAR GROUP BY      |          | 1         | 13   |
| 9  |        HASH Inner JOIN     |          | 1         | 13   |
| 10 |         TABLE SCAN         | NATION   | 1         | 4    |
| 11 |         HASH Inner JOIN    |          | 1         | 8    |
| 12 |          TABLE SCAN        | PARTSUPP | 1         | 4    |
| 13 |          TABLE SCAN        | SUPPLIER | 1         | 4    |
| 14 |      TABLE SCAN            | SUPPLIER | 1         | 4    |
+---------------------------------------------------------------+
Outputs & filters:
0 - output([partsupp.ps_partkey], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
sort_keys([SUM(partsupp.ps_supplycost * partsupp.ps_availqty) DESC])
1 - output([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)], [partsupp.ps_partkey])
filters([SUM(partsupp.ps_supplycost * partsupp.ps_availqty) > VIEW1.C1 * 0.0001000000])
group_by_exprs([partsupp.ps_partkey])
aggr_exprs([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)], [SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
2 - output([partsupp.ps_partkey], [partsupp.ps_supplycost], [partsupp.ps_availqty], [VIEW1.C1])
equal_join_conditions([partsupp.ps_suppkey = supplier.s_suppkey])
3 - output([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
access([partsupp.ps_suppkey], [partsupp.ps_partkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
4 - output([supplier.s_suppkey], [VIEW1.C1])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
5 - output([nation.n_nationkey])
filters([nation.n_name = 'MOZAMBIQUE'])
access([nation.n_nationkey], [nation.n_name])
6 - output([supplier.s_nationkey], [supplier.s_suppkey], [VIEW1.C1])
7 - output([VIEW1.C1])
8 - output([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
aggr_exprs([SUM(partsupp.ps_supplycost * partsupp.ps_availqty)])
9 - output([partsupp.ps_supplycost], [partsupp.ps_availqty])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
10 - output([nation.n_nationkey])
filters([nation.n_name = 'MOZAMBIQUE'])
access([nation.n_nationkey], [nation.n_name])
11 - output([supplier.s_nationkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
equal_join_conditions([partsupp.ps_suppkey = supplier.s_suppkey])
12 - output([partsupp.ps_suppkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
access([partsupp.ps_suppkey], [partsupp.ps_supplycost], [partsupp.ps_availqty])
13 - output([supplier.s_suppkey], [supplier.s_nationkey])
access([supplier.s_suppkey], [supplier.s_nationkey])
14 - output([supplier.s_nationkey], [supplier.s_suppkey])
access([supplier.s_suppkey], [supplier.s_nationkey])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL2)
USE_HASH(@SEL2 supplier)
USE_HASH(@SEL2 partsupp, supplier)
LEADING(@SEL2 nation, (partsupp, supplier))
USE_NL(@SEL1 supplier)
USE_HASH(@SEL1 VIEW1, supplier)
USE_HASH(@SEL1 nation, VIEW1, supplier)
LEADING(@SEL1 partsupp, (nation, (VIEW1, supplier)))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q12
*/ L_SHIPMODE,
SUM(CASE WHEN O_ORDERPRIORITY = '1-URGENT' OR O_ORDERPRIORITY = '2-HIGH' THEN 1 ELSE 0 END) AS HIGH_LINE_COUNT,
SUM(CASE WHEN O_ORDERPRIORITY <> '1-URGENT' AND O_ORDERPRIORITY <> '2-HIGH' THEN 1 ELSE 0 END ) AS LOW_LINE_COUNT
FROM ORDERS, LINEITEM
WHERE O_ORDERKEY = L_ORDERKEY AND
L_SHIPMODE IN ('MAIL','SHIP') AND
L_COMMITDATE < L_RECEIPTDATE AND
L_SHIPDATE < L_COMMITDATE AND
L_RECEIPTDATE >= DATE'1994-01-01' AND
L_RECEIPTDATE < DATE'1995-09-01' + interval '1' year
GROUP BY L_SHIPMODE
ORDER BY L_SHIPMODE

Query Plan:
+------------------------------------------------------+
| ID | OPERATOR          | NAME     | ROW COUNT | COST |
+------------------------------------------------------+
| 0  | SORT              |          | 1         | 9    |
| 1  |  HASH GROUP BY    |          | 1         | 9    |
| 2  |   HASH Inner JOIN |          | 1         | 8    |
| 3  |    TABLE SCAN     | ORDERS   | 1         | 4    |
| 4  |    TABLE SCAN     | LINEITEM | 1         | 4    |
+------------------------------------------------------+
Outputs & filters:
0 - output([lineitem.l_shipmode], [SUM(CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)], [SUM(CASE WHEN orders.o_orderpriority != '1-URGENT' AND orders.o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)])
sort_keys([lineitem.l_shipmode ASC])
1 - output([lineitem.l_shipmode], [SUM(CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)], [SUM(CASE WHEN orders.o_orderpriority != '1-URGENT' AND orders.o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)])
group_by_exprs([lineitem.l_shipmode])
aggr_exprs([SUM(CASE WHEN orders.o_orderpriority = '1-URGENT' OR orders.o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)], [SUM(CASE WHEN orders.o_orderpriority != '1-URGENT' AND orders.o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)])
2 - output([lineitem.l_shipmode], [orders.o_orderpriority])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
3 - output([orders.o_orderkey], [orders.o_orderpriority])
access([orders.o_orderkey], [orders.o_orderpriority])
4 - output([lineitem.l_orderkey], [lineitem.l_shipmode])
filters([lineitem.l_shipmode IN ('MAIL', 'SHIP')], [lineitem.l_commitdate < lineitem.l_receiptdate], [lineitem.l_shipdate < lineitem.l_commitdate], [lineitem.l_receiptdate >= 1994-01-01 00:00:00], [lineitem.l_receiptdate < DATE_ADD(1995-09-01 00:00:00, ?)])
access([lineitem.l_orderkey], [lineitem.l_shipmode], [lineitem.l_commitdate], [lineitem.l_receiptdate], [lineitem.l_shipdate])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_HASH(@SEL1 lineitem)
LEADING(@SEL1 orders, lineitem)
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q13
*/ c_count, count(*) as custdist
from ( SELECT c_custkey, count(o_orderkey)  as  c_count
from customer left join orders on c_custkey = o_custkey and o_comment not like '%special%requests%'
group by c_custkey ) c_orders
group by c_count
order by custdist desc, c_count desc

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | SORT                    |          | 1         | 8    |
| 1  |  HASH GROUP BY          |          | 1         | 8    |
| 2  |   VIEW                  | C_ORDERS | 1         | 8    |
| 3  |    HASH GROUP BY        |          | 1         | 8    |
| 4  |     HASH LeftOuter JOIN |          | 1         | 8    |
| 5  |      TABLE SCAN         | CUSTOMER | 1         | 4    |
| 6  |      TABLE SCAN         | ORDERS   | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([c_orders.c_count], [COUNT(1)])
sort_keys([COUNT(1) DESC], [c_orders.c_count DESC])
1 - output([COUNT(1)], [c_orders.c_count])
group_by_exprs([c_orders.c_count])
aggr_exprs([COUNT(1)], [COUNT(1)])
2 - output([c_orders.c_count])
3 - output([customer.c_custkey], [COUNT(orders.o_orderkey)])
group_by_exprs([customer.c_custkey])
aggr_exprs([COUNT(orders.o_orderkey)])
4 - output([customer.c_custkey], [orders.o_orderkey])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
5 - output([customer.c_custkey])
access([customer.c_custkey])
6 - output([orders.o_custkey], [orders.o_orderkey])
filters([orders.o_comment NOT LIKE '%special%requests%'])
access([orders.o_custkey], [orders.o_comment], [orders.o_orderkey])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_HASH(@SEL2 orders)
LEADING(@SEL2 customer, orders)
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q14
*/ 100.00 * sum(case when p_type like 'promo%' then l_extendedprice * (1 - l_discount) else 0 end) / sum(l_extendedprice * (1 - l_discount)) as promo_revenue
from lineitem, part
where l_partkey = p_partkey and
l_shipdate >= date '1995-09-01' and
l_shipdate < date '1995-09-01' + interval '1' month

Query Plan:
+-----------------------------------------------------+
| ID | OPERATOR         | NAME     | ROW COUNT | COST |
+-----------------------------------------------------+
| 0  | SCALAR GROUP BY  |          | 1         | 8    |
| 1  |  HASH Inner JOIN |          | 1         | 8    |
| 2  |   TABLE SCAN     | LINEITEM | 1         | 4    |
| 3  |   TABLE SCAN     | PART     | 1         | 4    |
+-----------------------------------------------------+
Outputs & filters:
0 - output([100.00 * SUM(CASE WHEN part.p_type LIKE 'promo%' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END) / SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
aggr_exprs([SUM(CASE WHEN part.p_type LIKE 'promo%' THEN lineitem.l_extendedprice * 1 - lineitem.l_discount ELSE 0 END)], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
1 - output([part.p_type], [lineitem.l_extendedprice], [lineitem.l_discount])
equal_join_conditions([lineitem.l_partkey = part.p_partkey])
2 - output([lineitem.l_partkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1995-09-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1995-09-01 00:00:00, ?)])
access([lineitem.l_partkey], [lineitem.l_shipdate], [lineitem.l_extendedprice], [lineitem.l_discount])
3 - output([part.p_partkey], [part.p_type])
access([part.p_partkey], [part.p_type])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_HASH(@SEL1 part)
LEADING(@SEL1 lineitem, part)
END_OUTLINE_DATA
*/

CREATE VIEW REVENUE0 AS
SELECT l_suppkey                                 AS supplier_no,
SUM(l_extendedprice * ( 1 - l_discount )) AS total_revenue
FROM   lineitem
WHERE  l_shipdate >= DATE '1997-07-01'
AND l_shipdate < DATE '1997-07-01' + interval '3' month
GROUP  BY l_suppkey

explain
SELECT
/*
TPCH_Q15
*/ s_suppkey,
s_name,
s_address,
s_phone,
total_revenue
FROM   supplier,
revenue0
WHERE  s_suppkey = supplier_no
AND total_revenue = (SELECT Max(total_revenue)
FROM   revenue0)
ORDER  BY s_suppkey

Query Plan:
+--------------------------------------------------------+
| ID | OPERATOR            | NAME     | ROW COUNT | COST |
+--------------------------------------------------------+
| 0  | SORT                |          | 1         | 13   |
| 1  |  HASH Inner JOIN    |          | 1         | 13   |
| 2  |   TABLE SCAN        | SUPPLIER | 1         | 4    |
| 3  |   HASH Inner JOIN   |          | 1         | 9    |
| 4  |    VIEW             | REVENUE0 | 1         | 4    |
| 5  |     HASH GROUP BY   |          | 1         | 4    |
| 6  |      TABLE SCAN     | LINEITEM | 1         | 4    |
| 7  |    VIEW             | VIEW1    | 1         | 4    |
| 8  |     SCALAR GROUP BY |          | 1         | 4    |
| 9  |      VIEW           | REVENUE0 | 1         | 4    |
| 10 |       HASH GROUP BY |          | 1         | 4    |
| 11 |        TABLE SCAN   | LINEITEM | 1         | 4    |
+--------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [revenue0.total_revenue])
sort_keys([supplier.s_suppkey ASC])
1 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone], [revenue0.total_revenue])
equal_join_conditions([supplier.s_suppkey = revenue0.supplier_no])
2 - output([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone])
access([supplier.s_suppkey], [supplier.s_name], [supplier.s_address], [supplier.s_phone])
3 - output([revenue0.supplier_no], [revenue0.total_revenue])
equal_join_conditions([revenue0.total_revenue = VIEW1.C1])
4 - output([revenue0.total_revenue], [revenue0.supplier_no])
5 - output([lineitem.l_suppkey], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([lineitem.l_suppkey])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
6 - output([lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1997-07-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1997-07-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
7 - output([VIEW1.C1])
8 - output([MAX(revenue0.total_revenue)])
aggr_exprs([MAX(revenue0.total_revenue)])
9 - output([revenue0.total_revenue])
10 - output([lineitem.l_suppkey], [SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
group_by_exprs([lineitem.l_suppkey])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
11 - output([lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])
filters([lineitem.l_shipdate >= 1997-07-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1997-07-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_suppkey], [lineitem.l_extendedprice], [lineitem.l_discount])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL3)
USE_HASH(@SEL1 VIEW1)
USE_HASH(@SEL1 revenue0, VIEW1)
LEADING(@SEL1 supplier, (revenue0, VIEW1))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q16
*/ p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt
from partsupp, part
where p_partkey = ps_partkey and
p_brand <> 'Brand#45' and
p_type not like 'MEDIUM POLISHED%' and
p_size in (49, 14, 23, 45, 19, 3, 36, 9) and
ps_suppkey not in ( SELECT s_suppkey
from supplier
where s_comment like '%customer%complaints%' )
group by p_brand, p_type, p_size
order by supplier_cnt desc, p_brand, p_type, p_size

Query Plan:
+----------------------------------------------------------------+
| ID | OPERATOR                    | NAME     | ROW COUNT | COST |
+----------------------------------------------------------------+
| 0  | SORT                        |          | 1         | 17   |
| 1  |  HASH GROUP BY              |          | 1         | 17   |
| 2  |   NESTED LOOP LeftAnti JOIN |          | 1         | 17   |
| 3  |    HASH Inner JOIN          |          | 1         | 8    |
| 4  |     TABLE SCAN              | PARTSUPP | 1         | 4    |
| 5  |     TABLE SCAN              | PART     | 1         | 4    |
| 6  |    TABLE SCAN               | SUPPLIER | 1         | 4    |
+----------------------------------------------------------------+
Outputs & filters:
0 - output([part.p_brand], [part.p_type], [part.p_size], [COUNT(DISTINCT partsupp.ps_suppkey)])
sort_keys([COUNT(DISTINCT partsupp.ps_suppkey) DESC], [part.p_brand ASC], [part.p_type ASC], [part.p_size ASC])
1 - output([COUNT(DISTINCT partsupp.ps_suppkey)], [part.p_brand], [part.p_type], [part.p_size])
group_by_exprs([part.p_brand], [part.p_type], [part.p_size])
aggr_exprs([COUNT(DISTINCT partsupp.ps_suppkey)], [COUNT(DISTINCT partsupp.ps_suppkey)])
2 - output([part.p_brand], [part.p_type], [part.p_size], [partsupp.ps_suppkey])
other_join_conditions([partsupp.ps_suppkey != supplier.s_suppkey OR partsupp.ps_suppkey IS NULL OR supplier.s_suppkey IS NULL])
3 - output([partsupp.ps_suppkey], [part.p_brand], [part.p_type], [part.p_size])
equal_join_conditions([part.p_partkey = partsupp.ps_partkey])
4 - output([partsupp.ps_partkey], [partsupp.ps_suppkey])
access([partsupp.ps_partkey], [partsupp.ps_suppkey])
5 - output([part.p_partkey], [part.p_brand], [part.p_type], [part.p_size])
filters([part.p_brand != 'Brand#45'], [part.p_type NOT LIKE 'MEDIUM POLISHED%'], [part.p_size IN (49, 14, 23, 45, 19, 3, 36, 9)])
access([part.p_partkey], [part.p_brand], [part.p_type], [part.p_size])
6 - output([supplier.s_suppkey])
filters([supplier.s_comment LIKE '%customer%complaints%'])
access([supplier.s_suppkey], [supplier.s_comment])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL2)
MERGE(@SEL2)
USE_HASH(@SEL1 part)
USE_NL(@SEL1 supplier)
LEADING(@SEL1 (partsupp, part), supplier)
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q17
BEGIN_OUTLINE_DATA
PARALLEL(128)
USE_PX
END_OUTLINE_DATA
*/ Sum(l_extendedprice) / 7.0 AS avg_yearly
FROM   lineitem,
part
WHERE  p_partkey = l_partkey
AND p_brand = 'Brand#44'
AND p_container = 'WRAP PKG'
AND l_quantity < (SELECT 0.2 * Avg(l_quantity)
FROM   lineitem
WHERE  l_partkey = p_partkey)

Query Plan:
+----------------------------------------------------------+
| ID | OPERATOR              | NAME     | ROW COUNT | COST |
+----------------------------------------------------------+
| 0  | SCALAR GROUP BY       |          | 1         | 13   |
| 1  |  HASH RightOuter JOIN |          | 1         | 13   |
| 2  |   VIEW                | VIEW1    | 1         | 4    |
| 3  |    HASH GROUP BY      |          | 1         | 4    |
| 4  |     TABLE SCAN        | LINEITEM | 1         | 4    |
| 5  |   HASH Inner JOIN     |          | 1         | 8    |
| 6  |    TABLE SCAN         | LINEITEM | 1         | 4    |
| 7  |    TABLE SCAN         | PART     | 1         | 4    |
+----------------------------------------------------------+
Outputs & filters:
0 - output([SUM(lineitem.l_extendedprice) / 7.0])
aggr_exprs([SUM(lineitem.l_extendedprice)])
1 - output([lineitem.l_extendedprice])
filters([lineitem.l_quantity < 0.2 * CAST(VIEW1.C1 AS NUMBER(72, 38)) / CASE WHEN VIEW1.C1 IS NULL THEN 0 ELSE VIEW1.C2 END])
equal_join_conditions([VIEW1.C1 = part.p_partkey])
2 - output([VIEW1.C1], [VIEW1.C1], [VIEW1.C2])
3 - output([lineitem.l_partkey], [SUM(lineitem.l_quantity)], [COUNT(lineitem.l_quantity)])
group_by_exprs([lineitem.l_partkey])
aggr_exprs([SUM(lineitem.l_quantity)], [COUNT(lineitem.l_quantity)])
4 - output([lineitem.l_partkey], [lineitem.l_quantity])
access([lineitem.l_partkey], [lineitem.l_quantity])
5 - output([part.p_partkey], [lineitem.l_quantity], [lineitem.l_extendedprice])
equal_join_conditions([part.p_partkey = lineitem.l_partkey])
6 - output([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_extendedprice])
access([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_extendedprice])
7 - output([part.p_partkey])
filters([part.p_brand = 'Brand#44'], [part.p_container = 'WRAP PKG'])
access([part.p_partkey], [part.p_brand], [part.p_container])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL2)
USE_HASH(@SEL1 part)
USE_HASH(@SEL1 lineitem, part)
LEADING(@SEL1 VIEW1, (lineitem, part))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q18
*/ c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice, sum(l_quantity)
from customer, orders, lineitem
where o_orderkey in ( SELECT l_orderkey
from lineitem
group by l_orderkey
having sum(l_quantity) > 314 ) and
c_custkey = o_custkey and
o_orderkey = l_orderkey
group by c_name, c_custkey, o_orderkey, o_orderdate, o_totalprice
order by o_totalprice desc, o_orderdate
limit 100

Query Plan:
+-----------------------------------------------------------+
| ID | OPERATOR               | NAME     | ROW COUNT | COST |
+-----------------------------------------------------------+
| 0  | TOP_N SORT             |          | 1         | 18   |
| 1  |  HASH GROUP BY         |          | 1         | 18   |
| 2  |   HASH Inner JOIN      |          | 1         | 17   |
| 3  |    TABLE SCAN          | CUSTOMER | 1         | 4    |
| 4  |    HASH Inner JOIN     |          | 1         | 13   |
| 5  |     TABLE SCAN         | LINEITEM | 1         | 4    |
| 6  |     HASH LeftSemi JOIN |          | 1         | 8    |
| 7  |      TABLE SCAN        | ORDERS   | 1         | 4    |
| 8  |      VIEW              | VIEW1    | 1         | 4    |
| 9  |       HASH GROUP BY    |          | 1         | 4    |
| 10 |        TABLE SCAN      | LINEITEM | 1         | 4    |
+-----------------------------------------------------------+
Outputs & filters:
0 - output([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [SUM(lineitem.l_quantity)])
sort_keys([orders.o_totalprice DESC], [orders.o_orderdate ASC])
top_n([100])
1 - output([orders.o_totalprice], [orders.o_orderdate], [customer.c_name], [customer.c_custkey], [orders.o_orderkey], [SUM(lineitem.l_quantity)])
group_by_exprs([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice])
aggr_exprs([SUM(lineitem.l_quantity)])
2 - output([customer.c_name], [customer.c_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [lineitem.l_quantity])
equal_join_conditions([customer.c_custkey = orders.o_custkey])
3 - output([customer.c_custkey], [customer.c_name])
access([customer.c_custkey], [customer.c_name])
4 - output([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice], [lineitem.l_quantity])
equal_join_conditions([orders.o_orderkey = lineitem.l_orderkey])
5 - output([lineitem.l_orderkey], [lineitem.l_quantity])
access([lineitem.l_orderkey], [lineitem.l_quantity])
6 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate], [orders.o_totalprice])
equal_join_conditions([orders.o_orderkey = VIEW1.C1])
7 - output([orders.o_orderkey], [orders.o_custkey], [orders.o_orderdate], [orders.o_totalprice])
access([orders.o_custkey], [orders.o_orderkey], [orders.o_orderdate], [orders.o_totalprice])
8 - output([VIEW1.C1])
9 - output([lineitem.l_orderkey])
filters([SUM(lineitem.l_quantity) > 314])
group_by_exprs([lineitem.l_orderkey])
aggr_exprs([SUM(lineitem.l_quantity)])
10 - output([lineitem.l_orderkey], [lineitem.l_quantity])
access([lineitem.l_orderkey], [lineitem.l_quantity])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL2)
USE_HASH(@SEL1 VIEW1)
USE_HASH(@SEL1 orders, VIEW1)
USE_HASH(@SEL1 lineitem, orders, VIEW1)
LEADING(@SEL1 customer, (lineitem, (orders, VIEW1)))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q19
*/ Sum(l_extendedprice * ( 1 - l_discount )) AS revenue
FROM   lineitem,
part
WHERE  ( p_partkey = l_partkey
AND p_brand = 'Brand#12'
AND p_container IN ( 'SM CASE', 'SM BOX', 'SM PACK', 'SM PKG' )
AND l_quantity >= 1
AND l_quantity <= 1 + 10
AND p_size BETWEEN 1 AND 5
AND l_shipmode IN ( 'AIR', 'AIR REG' )
AND l_shipinstruct = 'DELIVER IN PERSON' )
OR ( p_partkey = l_partkey
AND p_brand = 'Brand#23'
AND p_container IN ( 'MED BAG', 'MED BOX', 'MED PKG', 'MED PACK' )
AND l_quantity >= 10
AND l_quantity <= 10 + 10
AND p_size BETWEEN 1 AND 10
AND l_shipmode IN ( 'AIR', 'AIR REG' )
AND l_shipinstruct = 'DELIVER IN PERSON' )
OR ( p_partkey = l_partkey
AND p_brand = 'Brand#34'
AND p_container IN ( 'LG CASE', 'LG BOX', 'LG PACK', 'LG PKG' )
AND l_quantity >= 20
AND l_quantity <= 20 + 10
AND p_size BETWEEN 1 AND 15
AND l_shipmode IN ( 'AIR', 'AIR REG' )
AND l_shipinstruct = 'DELIVER IN PERSON' )

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | SCALAR GROUP BY         |          | 1         | 13   |
| 1  |  NESTED LOOP Inner JOIN |          | 1         | 13   |
| 2  |   TABLE SCAN            | LINEITEM | 1         | 4    |
| 3  |   TABLE SCAN            | PART     | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
aggr_exprs([SUM(lineitem.l_extendedprice * 1 - lineitem.l_discount)])
1 - output([lineitem.l_extendedprice], [lineitem.l_discount])
other_join_conditions([part.p_partkey = lineitem.l_partkey AND part.p_brand = 'Brand#12' AND part.p_container IN ('SM CASE', 'SM BOX', 'SM PACK', 'SM PKG') AND lineitem.l_quantity >= 1 AND lineitem.l_quantity <= 1 + 10 AND part.p_size BETWEEN 1 AND 5 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON' OR part.p_partkey = lineitem.l_partkey AND part.p_brand = 'Brand#23' AND part.p_container IN ('MED BAG', 'MED BOX', 'MED PKG', 'MED PACK') AND lineitem.l_quantity >= 10 AND lineitem.l_quantity <= 10 + 10 AND part.p_size BETWEEN 1 AND 10 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON' OR part.p_partkey = lineitem.l_partkey AND part.p_brand = 'Brand#34' AND part.p_container IN ('LG CASE', 'LG BOX', 'LG PACK', 'LG PKG') AND lineitem.l_quantity >= 20 AND lineitem.l_quantity <= 20 + 10 AND part.p_size BETWEEN 1 AND 15 AND lineitem.l_shipmode IN ('AIR', 'AIR REG') AND lineitem.l_shipinstruct = 'DELIVER IN PERSON'])
2 - output([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_shipmode], [lineitem.l_shipinstruct], [lineitem.l_extendedprice], [lineitem.l_discount])
access([lineitem.l_partkey], [lineitem.l_quantity], [lineitem.l_shipmode], [lineitem.l_shipinstruct], [lineitem.l_extendedprice], [lineitem.l_discount])
3 - output([part.p_partkey], [part.p_brand], [part.p_container], [part.p_size])
access([part.p_partkey], [part.p_brand], [part.p_container], [part.p_size])

outline:
/*+
BEGIN_OUTLINE_DATA
USE_NL(@SEL1 part)
LEADING(@SEL1 lineitem, part)
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q20
*/ s_name,
s_address
FROM   supplier,
nation
WHERE  s_suppkey IN (SELECT ps_suppkey
FROM   partsupp
WHERE  ps_partkey IN (SELECT p_partkey
FROM   part
WHERE  p_name LIKE 'green%')
AND ps_availqty > (SELECT 0.5 * SUM(l_quantity)
FROM   lineitem
WHERE  l_partkey = ps_partkey
AND l_suppkey = ps_suppkey
AND l_shipdate >= DATE
'1993-01-01'
AND l_shipdate < DATE
'1993-01-01' + interval '1' year
))
AND s_nationkey = n_nationkey
AND n_name = 'ALGERIA'
ORDER  BY s_name

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | SORT                    |          | 1         | 22   |
| 1  |  HASH Inner JOIN        |          | 1         | 22   |
| 2  |   TABLE SCAN            | NATION   | 1         | 4    |
| 3  |   HASH LeftSemi JOIN    |          | 1         | 18   |
| 4  |    TABLE SCAN           | SUPPLIER | 1         | 4    |
| 5  |    HASH RightOuter JOIN |          | 1         | 13   |
| 6  |     VIEW                | VIEW1    | 1         | 4    |
| 7  |      HASH GROUP BY      |          | 1         | 4    |
| 8  |       TABLE SCAN        | LINEITEM | 1         | 4    |
| 9  |     HASH LeftSemi JOIN  |          | 1         | 8    |
| 10 |      TABLE SCAN         | PARTSUPP | 1         | 4    |
| 11 |      TABLE SCAN         | PART     | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_name], [supplier.s_address])
sort_keys([supplier.s_name ASC])
1 - output([supplier.s_name], [supplier.s_address])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
2 - output([nation.n_nationkey])
filters([nation.n_name = 'ALGERIA'])
access([nation.n_nationkey], [nation.n_name])
3 - output([supplier.s_nationkey], [supplier.s_name], [supplier.s_address])
equal_join_conditions([supplier.s_suppkey = partsupp.ps_suppkey])
4 - output([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_name], [supplier.s_address])
access([supplier.s_nationkey], [supplier.s_suppkey], [supplier.s_name], [supplier.s_address])
5 - output([partsupp.ps_suppkey])
filters([partsupp.ps_availqty > 0.5 * VIEW1.C1])
equal_join_conditions([VIEW1.C1 = partsupp.ps_partkey], [VIEW1.C2 = partsupp.ps_suppkey])
6 - output([VIEW1.C1], [VIEW1.C2], [VIEW1.C1])
7 - output([lineitem.l_partkey], [lineitem.l_suppkey], [SUM(lineitem.l_quantity)])
group_by_exprs([lineitem.l_partkey], [lineitem.l_suppkey])
aggr_exprs([SUM(lineitem.l_quantity)])
8 - output([lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_quantity])
filters([lineitem.l_shipdate >= 1993-01-01 00:00:00], [lineitem.l_shipdate < DATE_ADD(1993-01-01 00:00:00, ?)])
access([lineitem.l_shipdate], [lineitem.l_partkey], [lineitem.l_suppkey], [lineitem.l_quantity])
9 - output([partsupp.ps_partkey], [partsupp.ps_suppkey], [partsupp.ps_availqty])
equal_join_conditions([partsupp.ps_partkey = part.p_partkey])
10 - output([partsupp.ps_partkey], [partsupp.ps_suppkey], [partsupp.ps_availqty])
access([partsupp.ps_suppkey], [partsupp.ps_availqty], [partsupp.ps_partkey])
11 - output([part.p_partkey])
filters([part.p_name LIKE 'green%'])
access([part.p_partkey], [part.p_name])

outline:
/*+
BEGIN_OUTLINE_DATA
UNNEST(@SEL4)
UNNEST(@SEL2)
UNNEST(@SEL3)
MERGE(@SEL3)
MERGE(@SEL2)
USE_HASH(@SEL1 part)
USE_HASH(@SEL1 partsupp, part)
USE_HASH(@SEL1 VIEW1, partsupp, part)
USE_HASH(@SEL1 supplier, VIEW1, partsupp, part)
LEADING(@SEL1 nation, (supplier, (VIEW1, (partsupp, part))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q21
*/ s_name,
Count(*) numwait
FROM   supplier,
lineitem l1,
orders,
nation
WHERE  s_suppkey = l1.l_suppkey
AND o_orderkey = l1.l_orderkey
AND o_orderstatus = 'F'
AND l1.l_receiptdate > l1.l_commitdate
AND EXISTS (SELECT *
FROM   lineitem l2
WHERE  l2.l_orderkey = l1.l_orderkey
AND l2.l_suppkey <> l1.l_suppkey)
AND NOT EXISTS (SELECT *
FROM   lineitem l3
WHERE  l3.l_orderkey = l1.l_orderkey
AND l3.l_suppkey <> l1.l_suppkey
AND l3.l_receiptdate > l3.l_commitdate)
AND s_nationkey = n_nationkey
AND N_NAME = 'SAUDI ARABIA'
GROUP  BY s_name
ORDER  BY numwait DESC,
s_name
limit 100

Query Plan:
+------------------------------------------------------------+
| ID | OPERATOR                | NAME     | ROW COUNT | COST |
+------------------------------------------------------------+
| 0  | TOP_N SORT              |          | 1         | 26   |
| 1  |  HASH GROUP BY          |          | 1         | 26   |
| 2  |   HASH Inner JOIN       |          | 1         | 26   |
| 3  |    TABLE SCAN           | NATION   | 1         | 4    |
| 4  |    HASH RightSemi JOIN  |          | 1         | 22   |
| 5  |     TABLE SCAN          | L2       | 1         | 4    |
| 6  |     HASH RightAnti JOIN |          | 1         | 17   |
| 7  |      TABLE SCAN         | L3       | 1         | 4    |
| 8  |      HASH Inner JOIN    |          | 1         | 13   |
| 9  |       TABLE SCAN        | SUPPLIER | 1         | 4    |
| 10 |       HASH Inner JOIN   |          | 1         | 8    |
| 11 |        TABLE SCAN       | L1       | 1         | 4    |
| 12 |        TABLE SCAN       | ORDERS   | 1         | 4    |
+------------------------------------------------------------+
Outputs & filters:
0 - output([supplier.s_name], [COUNT(1)])
sort_keys([COUNT(1) DESC], [supplier.s_name ASC])
top_n([100])
1 - output([COUNT(1)], [supplier.s_name])
group_by_exprs([supplier.s_name])
aggr_exprs([COUNT(1)], [COUNT(1)])
2 - output([supplier.s_name])
equal_join_conditions([supplier.s_nationkey = nation.n_nationkey])
3 - output([nation.n_nationkey])
filters([nation.n_name = 'SAUDI ARABIA'])
access([nation.n_nationkey], [nation.n_name])
4 - output([supplier.s_nationkey], [supplier.s_name])
equal_join_conditions([l2.l_orderkey = l1.l_orderkey])
other_join_conditions([l2.l_suppkey != l1.l_suppkey])
5 - output([l2.l_orderkey], [l2.l_suppkey])
access([l2.l_orderkey], [l2.l_suppkey])
6 - output([l1.l_orderkey], [l1.l_suppkey], [supplier.s_nationkey], [supplier.s_name])
equal_join_conditions([l3.l_orderkey = l1.l_orderkey])
other_join_conditions([l3.l_suppkey != l1.l_suppkey])
7 - output([l3.l_orderkey], [l3.l_suppkey])
filters([l3.l_receiptdate > l3.l_commitdate])
access([l3.l_orderkey], [l3.l_suppkey], [l3.l_receiptdate], [l3.l_commitdate])
8 - output([l1.l_orderkey], [l1.l_suppkey], [supplier.s_nationkey], [supplier.s_name])
equal_join_conditions([supplier.s_suppkey = l1.l_suppkey])
9 - output([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_name])
access([supplier.s_suppkey], [supplier.s_nationkey], [supplier.s_name])
10 - output([l1.l_suppkey], [l1.l_orderkey])
equal_join_conditions([orders.o_orderkey = l1.l_orderkey])
11 - output([l1.l_orderkey], [l1.l_suppkey])
filters([l1.l_receiptdate > l1.l_commitdate])
access([l1.l_suppkey], [l1.l_orderkey], [l1.l_receiptdate], [l1.l_commitdate])
12 - output([orders.o_orderkey])
filters([orders.o_orderstatus = 'F'])
access([orders.o_orderkey], [orders.o_orderstatus])

outline:
/*+
BEGIN_OUTLINE_DATA
SIMPLIFY_SQ(@SEL2)
SIMPLIFY_SQ(@SEL3)
UNNEST(@SEL2)
UNNEST(@SEL3)
MERGE(@SEL2)
MERGE(@SEL3)
USE_HASH(@SEL1 orders)
USE_HASH(@SEL1 l1, orders)
USE_HASH(@SEL1 supplier, l1, orders)
USE_HASH(@SEL1 l3, supplier, l1, orders)
USE_HASH(@SEL1 l2, l3, supplier, l1, orders)
LEADING(@SEL1 nation, (l2, (l3, (supplier, (l1, orders)))))
END_OUTLINE_DATA
*/

explain
SELECT
/*
TPCH_Q22
*/ cntrycode,
Count(*)       AS numcust,
Sum(c_acctbal) AS totacctbal
FROM   (SELECT Substr(c_phone, 1, 2) AS cntrycode,
c_acctbal
FROM   customer
WHERE  Substr(c_phone, 1, 2) IN ( '13', '31', '23', '29',
'30', '18', '17' )
AND c_acctbal > (SELECT Avg(c_acctbal)
FROM   customer
WHERE  c_acctbal > 0.00
AND Substr(c_phone, 1, 2) IN (
'13', '31', '23', '29',
'30', '18', '17' ))
AND NOT EXISTS (SELECT *
FROM   orders
WHERE  o_custkey = c_custkey)) custsale
GROUP  BY cntrycode
ORDER  BY cntrycode

Query Plan:
+--------------------------------------------------------------+
| ID | OPERATOR                  | NAME     | ROW COUNT | COST |
+--------------------------------------------------------------+
| 0  | SORT                      |          | 1         | 17   |
| 1  |  HASH GROUP BY            |          | 1         | 17   |
| 2  |   HASH RightAnti JOIN     |          | 1         | 17   |
| 3  |    TABLE SCAN             | ORDERS   | 1         | 4    |
| 4  |    NESTED LOOP Inner JOIN |          | 1         | 12   |
| 5  |     VIEW                  | VIEW1    | 1         | 4    |
| 6  |      SCALAR GROUP BY      |          | 1         | 4    |
| 7  |       TABLE SCAN          | CUSTOMER | 1         | 4    |
| 8  |     TABLE SCAN            | CUSTOMER | 1         | 4    |
+--------------------------------------------------------------+
Outputs & filters:
0 - output([SUBSTR(customer.c_phone , 1 , 2)], [COUNT(1)], [SUM(customer.c_acctbal)])
sort_keys([SUBSTR(customer.c_phone , 1 , 2) ASC])
1 - output([customer.c_phone], [COUNT(1)], [SUM(customer.c_acctbal)])
group_by_exprs([SUBSTR(customer.c_phone , 1 , 2)])
aggr_exprs([COUNT(1)], [SUM(customer.c_acctbal)])
2 - output([customer.c_phone], [customer.c_acctbal])
equal_join_conditions([orders.o_custkey = customer.c_custkey])
3 - output([orders.o_custkey])
access([orders.o_custkey])
4 - output([customer.c_custkey], [customer.c_phone], [customer.c_acctbal])
other_join_conditions([customer.c_acctbal > CAST(VIEW1.C1 AS NUMBER(72, 38)) / VIEW1.C2])
5 - output([VIEW1.C1], [VIEW1.C2])
6 - output([SUM(customer.c_acctbal)], [COUNT(customer.c_acctbal)])
aggr_exprs([SUM(customer.c_acctbal)], [COUNT(customer.c_acctbal)])
7 - output([customer.c_acctbal])
filters([customer.c_acctbal > 0.00], [SUBSTR(customer.c_phone , 1 , 2) IN ('13', '31', '23', '29', '30', '18', '17')])
access([customer.c_acctbal], [customer.c_phone])
8 - output([customer.c_acctbal], [customer.c_custkey], [customer.c_phone])
filters([SUBSTR(customer.c_phone , 1 , 2) IN ('13', '31', '23', '29', '30', '18', '17')])
access([customer.c_phone], [customer.c_acctbal], [customer.c_custkey])

outline:
/*+
BEGIN_OUTLINE_DATA
MERGE(@SEL2)
SIMPLIFY_SQ(@SEL4)
UNNEST(@SEL3)
UNNEST(@SEL4)
MERGE(@SEL4)
USE_NL(@SEL1 customer)
USE_HASH(@SEL1 VIEW1, customer)
LEADING(@SEL1 orders, (VIEW1, customer))
END_OUTLINE_DATA
*/

Bye
